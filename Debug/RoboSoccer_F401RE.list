
RoboSoccer_F401RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d58  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08006ef8  08006ef8  00016ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fa8  08006fa8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006fa8  08006fa8  00016fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fb0  08006fb0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fb0  08006fb0  00016fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fb4  08006fb4  00016fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004abc  20000010  08006fc8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004acc  08006fc8  00024acc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001889f  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037df  00000000  00000000  00038922  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001580  00000000  00000000  0003c108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010b6  00000000  00000000  0003d688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019310  00000000  00000000  0003e73e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a47a  00000000  00000000  00057a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2f01  00000000  00000000  00071ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a60  00000000  00000000  00114dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0011a82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006ee0 	.word	0x08006ee0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08006ee0 	.word	0x08006ee0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <ADC_ReadAverage>:
  * @param  *avg_buffer Pointer to filtered buffer
  * @param  timeout_ms Timeout to capture each reading in millisecond
  * @retval Is success
  */
bool ADC_ReadAverage(uint16_t *avg_buffer, TickType_t timeout_ms)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b086      	sub	sp, #24
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
  uint32_t sum_buffer[ADC_CHANNEL_COUNT] = {0};
 80004e6:	2300      	movs	r3, #0
 80004e8:	60bb      	str	r3, [r7, #8]

  for (uint32_t i = 0; i < ADC_FILTER_SIZE; ++i) {
 80004ea:	2300      	movs	r3, #0
 80004ec:	617b      	str	r3, [r7, #20]
 80004ee:	e046      	b.n	800057e <ADC_ReadAverage+0xa2>
		(void)osSemaphoreAcquire(adcSemHandle, 0);
 80004f0:	4b33      	ldr	r3, [pc, #204]	; (80005c0 <ADC_ReadAverage+0xe4>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f003 fb54 	bl	8003ba4 <osSemaphoreAcquire>

		if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_CHANNEL_COUNT) != HAL_OK) {
 80004fc:	2201      	movs	r2, #1
 80004fe:	4931      	ldr	r1, [pc, #196]	; (80005c4 <ADC_ReadAverage+0xe8>)
 8000500:	4831      	ldr	r0, [pc, #196]	; (80005c8 <ADC_ReadAverage+0xec>)
 8000502:	f000 fd3b 	bl	8000f7c <HAL_ADC_Start_DMA>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <ADC_ReadAverage+0x34>
			return false;
 800050c:	2300      	movs	r3, #0
 800050e:	e053      	b.n	80005b8 <ADC_ReadAverage+0xdc>
		}
		// wait until ISR signals
		if (osSemaphoreAcquire(adcSemHandle, pdMS_TO_TICKS(timeout_ms)) != osOK) {
 8000510:	4b2b      	ldr	r3, [pc, #172]	; (80005c0 <ADC_ReadAverage+0xe4>)
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800051a:	fb01 f303 	mul.w	r3, r1, r3
 800051e:	492b      	ldr	r1, [pc, #172]	; (80005cc <ADC_ReadAverage+0xf0>)
 8000520:	fba1 1303 	umull	r1, r3, r1, r3
 8000524:	099b      	lsrs	r3, r3, #6
 8000526:	4619      	mov	r1, r3
 8000528:	4610      	mov	r0, r2
 800052a:	f003 fb3b 	bl	8003ba4 <osSemaphoreAcquire>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d004      	beq.n	800053e <ADC_ReadAverage+0x62>
			HAL_ADC_Stop_DMA(&hadc1);
 8000534:	4824      	ldr	r0, [pc, #144]	; (80005c8 <ADC_ReadAverage+0xec>)
 8000536:	f000 fe11 	bl	800115c <HAL_ADC_Stop_DMA>
			return false;
 800053a:	2300      	movs	r3, #0
 800053c:	e03c      	b.n	80005b8 <ADC_ReadAverage+0xdc>
		}
		HAL_ADC_Stop_DMA(&hadc1);
 800053e:	4822      	ldr	r0, [pc, #136]	; (80005c8 <ADC_ReadAverage+0xec>)
 8000540:	f000 fe0c 	bl	800115c <HAL_ADC_Stop_DMA>

		for (uint32_t ch = 0; ch < ADC_CHANNEL_COUNT; ++ch) {
 8000544:	2300      	movs	r3, #0
 8000546:	613b      	str	r3, [r7, #16]
 8000548:	e013      	b.n	8000572 <ADC_ReadAverage+0x96>
			sum_buffer[ch] += adc_buffer[ch];
 800054a:	693b      	ldr	r3, [r7, #16]
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	3318      	adds	r3, #24
 8000550:	443b      	add	r3, r7
 8000552:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000556:	491b      	ldr	r1, [pc, #108]	; (80005c4 <ADC_ReadAverage+0xe8>)
 8000558:	693a      	ldr	r2, [r7, #16]
 800055a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800055e:	441a      	add	r2, r3
 8000560:	693b      	ldr	r3, [r7, #16]
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	3318      	adds	r3, #24
 8000566:	443b      	add	r3, r7
 8000568:	f843 2c10 	str.w	r2, [r3, #-16]
		for (uint32_t ch = 0; ch < ADC_CHANNEL_COUNT; ++ch) {
 800056c:	693b      	ldr	r3, [r7, #16]
 800056e:	3301      	adds	r3, #1
 8000570:	613b      	str	r3, [r7, #16]
 8000572:	693b      	ldr	r3, [r7, #16]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d0e8      	beq.n	800054a <ADC_ReadAverage+0x6e>
  for (uint32_t i = 0; i < ADC_FILTER_SIZE; ++i) {
 8000578:	697b      	ldr	r3, [r7, #20]
 800057a:	3301      	adds	r3, #1
 800057c:	617b      	str	r3, [r7, #20]
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	2b04      	cmp	r3, #4
 8000582:	d9b5      	bls.n	80004f0 <ADC_ReadAverage+0x14>
		}
  }

  for (uint32_t ch = 0; ch < ADC_CHANNEL_COUNT; ++ch) {
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	e012      	b.n	80005b0 <ADC_ReadAverage+0xd4>
  	avg_buffer[ch] = (uint16_t)(sum_buffer[ch] / ADC_FILTER_SIZE);
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	3318      	adds	r3, #24
 8000590:	443b      	add	r3, r7
 8000592:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000596:	4a0e      	ldr	r2, [pc, #56]	; (80005d0 <ADC_ReadAverage+0xf4>)
 8000598:	fba2 2303 	umull	r2, r3, r2, r3
 800059c:	0899      	lsrs	r1, r3, #2
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	4413      	add	r3, r2
 80005a6:	b28a      	uxth	r2, r1
 80005a8:	801a      	strh	r2, [r3, #0]
  for (uint32_t ch = 0; ch < ADC_CHANNEL_COUNT; ++ch) {
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	3301      	adds	r3, #1
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d0e9      	beq.n	800058a <ADC_ReadAverage+0xae>
  }
  return true;
 80005b6:	2301      	movs	r3, #1
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3718      	adds	r7, #24
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	20000128 	.word	0x20000128
 80005c4:	2000002c 	.word	0x2000002c
 80005c8:	20000034 	.word	0x20000034
 80005cc:	10624dd3 	.word	0x10624dd3
 80005d0:	cccccccd 	.word	0xcccccccd

080005d4 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1 && adcSemHandle != NULL)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a07      	ldr	r2, [pc, #28]	; (8000600 <HAL_ADC_ConvCpltCallback+0x2c>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d108      	bne.n	80005f8 <HAL_ADC_ConvCpltCallback+0x24>
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <HAL_ADC_ConvCpltCallback+0x30>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d004      	beq.n	80005f8 <HAL_ADC_ConvCpltCallback+0x24>
    {
    	osSemaphoreRelease(adcSemHandle);
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <HAL_ADC_ConvCpltCallback+0x30>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f003 fb28 	bl	8003c48 <osSemaphoreRelease>
    }
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40012000 	.word	0x40012000
 8000604:	20000128 	.word	0x20000128

08000608 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
	static uint16_t msCount = 0;
	time_flags |= FLAG_1MS_TICK;
 800060c:	4b2a      	ldr	r3, [pc, #168]	; (80006b8 <vApplicationTickHook+0xb0>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	b2db      	uxtb	r3, r3
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	b2da      	uxtb	r2, r3
 8000618:	4b27      	ldr	r3, [pc, #156]	; (80006b8 <vApplicationTickHook+0xb0>)
 800061a:	701a      	strb	r2, [r3, #0]

	msCount += 1;
 800061c:	4b27      	ldr	r3, [pc, #156]	; (80006bc <vApplicationTickHook+0xb4>)
 800061e:	881b      	ldrh	r3, [r3, #0]
 8000620:	3301      	adds	r3, #1
 8000622:	b29a      	uxth	r2, r3
 8000624:	4b25      	ldr	r3, [pc, #148]	; (80006bc <vApplicationTickHook+0xb4>)
 8000626:	801a      	strh	r2, [r3, #0]
	if (msCount % 10 == 0) {
 8000628:	4b24      	ldr	r3, [pc, #144]	; (80006bc <vApplicationTickHook+0xb4>)
 800062a:	881a      	ldrh	r2, [r3, #0]
 800062c:	4b24      	ldr	r3, [pc, #144]	; (80006c0 <vApplicationTickHook+0xb8>)
 800062e:	fba3 1302 	umull	r1, r3, r3, r2
 8000632:	08d9      	lsrs	r1, r3, #3
 8000634:	460b      	mov	r3, r1
 8000636:	009b      	lsls	r3, r3, #2
 8000638:	440b      	add	r3, r1
 800063a:	005b      	lsls	r3, r3, #1
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	b29b      	uxth	r3, r3
 8000640:	2b00      	cmp	r3, #0
 8000642:	d107      	bne.n	8000654 <vApplicationTickHook+0x4c>
		time_flags |= FLAG_10MS_TICK;
 8000644:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <vApplicationTickHook+0xb0>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	f043 0302 	orr.w	r3, r3, #2
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <vApplicationTickHook+0xb0>)
 8000652:	701a      	strb	r2, [r3, #0]
	}
	if (msCount % 100 == 0) {
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <vApplicationTickHook+0xb4>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	4a1a      	ldr	r2, [pc, #104]	; (80006c4 <vApplicationTickHook+0xbc>)
 800065a:	fba2 1203 	umull	r1, r2, r2, r3
 800065e:	0952      	lsrs	r2, r2, #5
 8000660:	2164      	movs	r1, #100	; 0x64
 8000662:	fb01 f202 	mul.w	r2, r1, r2
 8000666:	1a9b      	subs	r3, r3, r2
 8000668:	b29b      	uxth	r3, r3
 800066a:	2b00      	cmp	r3, #0
 800066c:	d107      	bne.n	800067e <vApplicationTickHook+0x76>
		time_flags |= FLAG_100MS_TICK;
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <vApplicationTickHook+0xb0>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	b2db      	uxtb	r3, r3
 8000674:	f043 0304 	orr.w	r3, r3, #4
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <vApplicationTickHook+0xb0>)
 800067c:	701a      	strb	r2, [r3, #0]
	}
	if (msCount % 100 == 0) {
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <vApplicationTickHook+0xb4>)
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	4a10      	ldr	r2, [pc, #64]	; (80006c4 <vApplicationTickHook+0xbc>)
 8000684:	fba2 1203 	umull	r1, r2, r2, r3
 8000688:	0952      	lsrs	r2, r2, #5
 800068a:	2164      	movs	r1, #100	; 0x64
 800068c:	fb01 f202 	mul.w	r2, r1, r2
 8000690:	1a9b      	subs	r3, r3, r2
 8000692:	b29b      	uxth	r3, r3
 8000694:	2b00      	cmp	r3, #0
 8000696:	d10a      	bne.n	80006ae <vApplicationTickHook+0xa6>
		time_flags |= FLAG_1S_TICK;
 8000698:	4b07      	ldr	r3, [pc, #28]	; (80006b8 <vApplicationTickHook+0xb0>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	f043 0308 	orr.w	r3, r3, #8
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <vApplicationTickHook+0xb0>)
 80006a6:	701a      	strb	r2, [r3, #0]
		msCount = 0;
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <vApplicationTickHook+0xb4>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	801a      	strh	r2, [r3, #0]
	}
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	2000012c 	.word	0x2000012c
 80006bc:	20000032 	.word	0x20000032
 80006c0:	cccccccd 	.word	0xcccccccd
 80006c4:	51eb851f 	.word	0x51eb851f

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006cc:	f000 fbd0 	bl	8000e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d0:	f000 f836 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d4:	f000 f954 	bl	8000980 <MX_GPIO_Init>
  MX_DMA_Init();
 80006d8:	f000 f932 	bl	8000940 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006dc:	f000 f906 	bl	80008ec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80006e0:	f000 f89a 	bl	8000818 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006e4:	f003 f8f8 	bl	80038d8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of adcSem */
  adcSemHandle = osSemaphoreNew(1, 1, &adcSem_attributes);
 80006e8:	4a0d      	ldr	r2, [pc, #52]	; (8000720 <main+0x58>)
 80006ea:	2101      	movs	r1, #1
 80006ec:	2001      	movs	r0, #1
 80006ee:	f003 f9cf 	bl	8003a90 <osSemaphoreNew>
 80006f2:	4603      	mov	r3, r0
 80006f4:	4a0b      	ldr	r2, [pc, #44]	; (8000724 <main+0x5c>)
 80006f6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SensorTask */
  SensorTaskHandle = osThreadNew(StartSensorTask, NULL, &SensorTask_attributes);
 80006f8:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <main+0x60>)
 80006fa:	2100      	movs	r1, #0
 80006fc:	480b      	ldr	r0, [pc, #44]	; (800072c <main+0x64>)
 80006fe:	f003 f935 	bl	800396c <osThreadNew>
 8000702:	4603      	mov	r3, r0
 8000704:	4a0a      	ldr	r2, [pc, #40]	; (8000730 <main+0x68>)
 8000706:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(GeneralTask, NULL, &myTask02_attributes);
 8000708:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <main+0x6c>)
 800070a:	2100      	movs	r1, #0
 800070c:	480a      	ldr	r0, [pc, #40]	; (8000738 <main+0x70>)
 800070e:	f003 f92d 	bl	800396c <osThreadNew>
 8000712:	4603      	mov	r3, r0
 8000714:	4a09      	ldr	r2, [pc, #36]	; (800073c <main+0x74>)
 8000716:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000718:	f003 f902 	bl	8003920 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800071c:	e7fe      	b.n	800071c <main+0x54>
 800071e:	bf00      	nop
 8000720:	08006f78 	.word	0x08006f78
 8000724:	20000128 	.word	0x20000128
 8000728:	08006f30 	.word	0x08006f30
 800072c:	08000a5d 	.word	0x08000a5d
 8000730:	20000120 	.word	0x20000120
 8000734:	08006f54 	.word	0x08006f54
 8000738:	08000a89 	.word	0x08000a89
 800073c:	20000124 	.word	0x20000124

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b094      	sub	sp, #80	; 0x50
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 0320 	add.w	r3, r7, #32
 800074a:	2230      	movs	r2, #48	; 0x30
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f006 fb8c 	bl	8006e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	4b29      	ldr	r3, [pc, #164]	; (8000810 <SystemClock_Config+0xd0>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076c:	4a28      	ldr	r2, [pc, #160]	; (8000810 <SystemClock_Config+0xd0>)
 800076e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000772:	6413      	str	r3, [r2, #64]	; 0x40
 8000774:	4b26      	ldr	r3, [pc, #152]	; (8000810 <SystemClock_Config+0xd0>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	4b23      	ldr	r3, [pc, #140]	; (8000814 <SystemClock_Config+0xd4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800078c:	4a21      	ldr	r2, [pc, #132]	; (8000814 <SystemClock_Config+0xd4>)
 800078e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <SystemClock_Config+0xd4>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a0:	2302      	movs	r3, #2
 80007a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a4:	2301      	movs	r3, #1
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a8:	2310      	movs	r3, #16
 80007aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ac:	2302      	movs	r3, #2
 80007ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b0:	2300      	movs	r3, #0
 80007b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007b4:	2310      	movs	r3, #16
 80007b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007be:	2304      	movs	r3, #4
 80007c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007c2:	2307      	movs	r3, #7
 80007c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c6:	f107 0320 	add.w	r3, r7, #32
 80007ca:	4618      	mov	r0, r3
 80007cc:	f001 fe34 	bl	8002438 <HAL_RCC_OscConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007d6:	f000 f981 	bl	8000adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007da:	230f      	movs	r3, #15
 80007dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007de:	2302      	movs	r3, #2
 80007e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	2102      	movs	r1, #2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 f896 	bl	8002928 <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000802:	f000 f96b 	bl	8000adc <Error_Handler>
  }
}
 8000806:	bf00      	nop
 8000808:	3750      	adds	r7, #80	; 0x50
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800082a:	4b2b      	ldr	r3, [pc, #172]	; (80008d8 <MX_ADC1_Init+0xc0>)
 800082c:	4a2b      	ldr	r2, [pc, #172]	; (80008dc <MX_ADC1_Init+0xc4>)
 800082e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000830:	4b29      	ldr	r3, [pc, #164]	; (80008d8 <MX_ADC1_Init+0xc0>)
 8000832:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000836:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000838:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <MX_ADC1_Init+0xc0>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800083e:	4b26      	ldr	r3, [pc, #152]	; (80008d8 <MX_ADC1_Init+0xc0>)
 8000840:	2201      	movs	r2, #1
 8000842:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000844:	4b24      	ldr	r3, [pc, #144]	; (80008d8 <MX_ADC1_Init+0xc0>)
 8000846:	2200      	movs	r2, #0
 8000848:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800084a:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <MX_ADC1_Init+0xc0>)
 800084c:	2200      	movs	r2, #0
 800084e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000852:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <MX_ADC1_Init+0xc0>)
 8000854:	2200      	movs	r2, #0
 8000856:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000858:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <MX_ADC1_Init+0xc0>)
 800085a:	4a21      	ldr	r2, [pc, #132]	; (80008e0 <MX_ADC1_Init+0xc8>)
 800085c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800085e:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <MX_ADC1_Init+0xc0>)
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000864:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <MX_ADC1_Init+0xc0>)
 8000866:	2201      	movs	r2, #1
 8000868:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800086a:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <MX_ADC1_Init+0xc0>)
 800086c:	2201      	movs	r2, #1
 800086e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000872:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <MX_ADC1_Init+0xc0>)
 8000874:	2201      	movs	r2, #1
 8000876:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000878:	4817      	ldr	r0, [pc, #92]	; (80008d8 <MX_ADC1_Init+0xc0>)
 800087a:	f000 fb3b 	bl	8000ef4 <HAL_ADC_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000884:	f000 f92a 	bl	8000adc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000888:	2300      	movs	r3, #0
 800088a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 800088c:	2301      	movs	r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000890:	2307      	movs	r3, #7
 8000892:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	4619      	mov	r1, r3
 8000898:	480f      	ldr	r0, [pc, #60]	; (80008d8 <MX_ADC1_Init+0xc0>)
 800089a:	f000 fccd 	bl	8001238 <HAL_ADC_ConfigChannel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008a4:	f000 f91a 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  // Initialize adc buffer
  for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 80008a8:	2300      	movs	r3, #0
 80008aa:	75fb      	strb	r3, [r7, #23]
 80008ac:	e007      	b.n	80008be <MX_ADC1_Init+0xa6>
  	adc_buffer[i] = 0;
 80008ae:	7dfb      	ldrb	r3, [r7, #23]
 80008b0:	4a0c      	ldr	r2, [pc, #48]	; (80008e4 <MX_ADC1_Init+0xcc>)
 80008b2:	2100      	movs	r1, #0
 80008b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (uint8_t i = 0; i < ADC_CHANNEL_COUNT; i++) {
 80008b8:	7dfb      	ldrb	r3, [r7, #23]
 80008ba:	3301      	adds	r3, #1
 80008bc:	75fb      	strb	r3, [r7, #23]
 80008be:	7dfb      	ldrb	r3, [r7, #23]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d0f4      	beq.n	80008ae <MX_ADC1_Init+0x96>
  }
  // semaphore first take() will wait for DMA
  (void)osSemaphoreAcquire(adcSemHandle, 0);
 80008c4:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_ADC1_Init+0xd0>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f003 f96a 	bl	8003ba4 <osSemaphoreAcquire>
  /* USER CODE END ADC1_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000034 	.word	0x20000034
 80008dc:	40012000 	.word	0x40012000
 80008e0:	0f000001 	.word	0x0f000001
 80008e4:	2000002c 	.word	0x2000002c
 80008e8:	20000128 	.word	0x20000128

080008ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <MX_USART2_UART_Init+0x50>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 80008f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_USART2_UART_Init+0x4c>)
 8000924:	f002 fcd2 	bl	80032cc <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800092e:	f000 f8d5 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000dc 	.word	0x200000dc
 800093c:	40004400 	.word	0x40004400

08000940 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_DMA_Init+0x3c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a0b      	ldr	r2, [pc, #44]	; (800097c <MX_DMA_Init+0x3c>)
 8000950:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_DMA_Init+0x3c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2105      	movs	r1, #5
 8000966:	2038      	movs	r0, #56	; 0x38
 8000968:	f000 ffbe 	bl	80018e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800096c:	2038      	movs	r0, #56	; 0x38
 800096e:	f000 ffd7 	bl	8001920 <HAL_NVIC_EnableIRQ>

}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	4b2d      	ldr	r3, [pc, #180]	; (8000a50 <MX_GPIO_Init+0xd0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a2c      	ldr	r2, [pc, #176]	; (8000a50 <MX_GPIO_Init+0xd0>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b2a      	ldr	r3, [pc, #168]	; (8000a50 <MX_GPIO_Init+0xd0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b26      	ldr	r3, [pc, #152]	; (8000a50 <MX_GPIO_Init+0xd0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a25      	ldr	r2, [pc, #148]	; (8000a50 <MX_GPIO_Init+0xd0>)
 80009bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <MX_GPIO_Init+0xd0>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <MX_GPIO_Init+0xd0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a1e      	ldr	r2, [pc, #120]	; (8000a50 <MX_GPIO_Init+0xd0>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <MX_GPIO_Init+0xd0>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <MX_GPIO_Init+0xd0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <MX_GPIO_Init+0xd0>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <MX_GPIO_Init+0xd0>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2120      	movs	r1, #32
 8000a0a:	4812      	ldr	r0, [pc, #72]	; (8000a54 <MX_GPIO_Init+0xd4>)
 8000a0c:	f001 fcfa 	bl	8002404 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a16:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	480c      	ldr	r0, [pc, #48]	; (8000a58 <MX_GPIO_Init+0xd8>)
 8000a28:	f001 fb68 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a2c:	2320      	movs	r3, #32
 8000a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	4804      	ldr	r0, [pc, #16]	; (8000a54 <MX_GPIO_Init+0xd4>)
 8000a44:	f001 fb5a 	bl	80020fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a48:	bf00      	nop
 8000a4a:	3728      	adds	r7, #40	; 0x28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020000 	.word	0x40020000
 8000a58:	40020800 	.word	0x40020800

08000a5c <StartSensorTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSensorTask */
void StartSensorTask(void *argument)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8000a64:	f004 fd5c 	bl	8005520 <xTaskGetTickCount>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
  	// TO DO: Write error handler for adc
  	ADC_ReadAverage(filtered_adc_buffer, ADC_TIMEOUT);
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <StartSensorTask+0x28>)
 8000a70:	f7ff fd34 	bl	80004dc <ADC_ReadAverage>
    vTaskDelayUntil(&xLastWakeTime, pdMS_TO_TICKS(10));
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	210a      	movs	r1, #10
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f004 fbc0 	bl	8005200 <vTaskDelayUntil>
  	ADC_ReadAverage(filtered_adc_buffer, ADC_TIMEOUT);
 8000a80:	e7f4      	b.n	8000a6c <StartSensorTask+0x10>
 8000a82:	bf00      	nop
 8000a84:	20000030 	.word	0x20000030

08000a88 <GeneralTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GeneralTask */
void GeneralTask(void *argument)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GeneralTask */
  /* Infinite loop */
  for(;;)
  {
  	// toggle led
  	if(filtered_adc_buffer[0] > 3000) {
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <GeneralTask+0x28>)
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d903      	bls.n	8000aa4 <GeneralTask+0x1c>
  		GPIOA->BSRR = GPIO_PIN_5;
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <GeneralTask+0x2c>)
 8000a9e:	2220      	movs	r2, #32
 8000aa0:	619a      	str	r2, [r3, #24]
 8000aa2:	e7f5      	b.n	8000a90 <GeneralTask+0x8>
  	} else {
  		GPIOA->BSRR = (uint32_t)GPIO_PIN_5 << 16;
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <GeneralTask+0x2c>)
 8000aa6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000aaa:	619a      	str	r2, [r3, #24]
  	if(filtered_adc_buffer[0] > 3000) {
 8000aac:	e7f0      	b.n	8000a90 <GeneralTask+0x8>
 8000aae:	bf00      	nop
 8000ab0:	20000030 	.word	0x20000030
 8000ab4:	40020000 	.word	0x40020000

08000ab8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d101      	bne.n	8000ace <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aca:	f000 f9f3 	bl	8000eb4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40014800 	.word	0x40014800

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <Error_Handler+0x8>
	...

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_MspInit+0x54>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a11      	ldr	r2, [pc, #68]	; (8000b3c <HAL_MspInit+0x54>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <HAL_MspInit+0x54>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <HAL_MspInit+0x54>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <HAL_MspInit+0x54>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <HAL_MspInit+0x54>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	210f      	movs	r1, #15
 8000b2a:	f06f 0001 	mvn.w	r0, #1
 8000b2e:	f000 fedb 	bl	80018e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800

08000b40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a2f      	ldr	r2, [pc, #188]	; (8000c1c <HAL_ADC_MspInit+0xdc>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d158      	bne.n	8000c14 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b2e      	ldr	r3, [pc, #184]	; (8000c20 <HAL_ADC_MspInit+0xe0>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	4a2d      	ldr	r2, [pc, #180]	; (8000c20 <HAL_ADC_MspInit+0xe0>)
 8000b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b70:	6453      	str	r3, [r2, #68]	; 0x44
 8000b72:	4b2b      	ldr	r3, [pc, #172]	; (8000c20 <HAL_ADC_MspInit+0xe0>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <HAL_ADC_MspInit+0xe0>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a26      	ldr	r2, [pc, #152]	; (8000c20 <HAL_ADC_MspInit+0xe0>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <HAL_ADC_MspInit+0xe0>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	481d      	ldr	r0, [pc, #116]	; (8000c24 <HAL_ADC_MspInit+0xe4>)
 8000bae:	f001 faa5 	bl	80020fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <HAL_ADC_MspInit+0xe8>)
 8000bb4:	4a1d      	ldr	r2, [pc, #116]	; (8000c2c <HAL_ADC_MspInit+0xec>)
 8000bb6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <HAL_ADC_MspInit+0xe8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <HAL_ADC_MspInit+0xe8>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc4:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <HAL_ADC_MspInit+0xe8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bca:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <HAL_ADC_MspInit+0xe8>)
 8000bcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bd0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_ADC_MspInit+0xe8>)
 8000bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bd8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <HAL_ADC_MspInit+0xe8>)
 8000bdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000be0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <HAL_ADC_MspInit+0xe8>)
 8000be4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000be8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_ADC_MspInit+0xe8>)
 8000bec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bf0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <HAL_ADC_MspInit+0xe8>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bf8:	480b      	ldr	r0, [pc, #44]	; (8000c28 <HAL_ADC_MspInit+0xe8>)
 8000bfa:	f000 fe9f 	bl	800193c <HAL_DMA_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8000c04:	f7ff ff6a 	bl	8000adc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <HAL_ADC_MspInit+0xe8>)
 8000c0c:	639a      	str	r2, [r3, #56]	; 0x38
 8000c0e:	4a06      	ldr	r2, [pc, #24]	; (8000c28 <HAL_ADC_MspInit+0xe8>)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c14:	bf00      	nop
 8000c16:	3728      	adds	r7, #40	; 0x28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40012000 	.word	0x40012000
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020000 	.word	0x40020000
 8000c28:	2000007c 	.word	0x2000007c
 8000c2c:	40026410 	.word	0x40026410

08000c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <HAL_UART_MspInit+0x84>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d12b      	bne.n	8000caa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_UART_MspInit+0x88>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c9a:	2307      	movs	r3, #7
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4805      	ldr	r0, [pc, #20]	; (8000cbc <HAL_UART_MspInit+0x8c>)
 8000ca6:	f001 fa29 	bl	80020fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000caa:	bf00      	nop
 8000cac:	3728      	adds	r7, #40	; 0x28
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40004400 	.word	0x40004400
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020000 	.word	0x40020000

08000cc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08c      	sub	sp, #48	; 0x30
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	4b2e      	ldr	r3, [pc, #184]	; (8000d90 <HAL_InitTick+0xd0>)
 8000cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd8:	4a2d      	ldr	r2, [pc, #180]	; (8000d90 <HAL_InitTick+0xd0>)
 8000cda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cde:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce0:	4b2b      	ldr	r3, [pc, #172]	; (8000d90 <HAL_InitTick+0xd0>)
 8000ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cec:	f107 020c 	add.w	r2, r7, #12
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f002 f836 	bl	8002d68 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000cfc:	f002 f820 	bl	8002d40 <HAL_RCC_GetPCLK2Freq>
 8000d00:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d04:	4a23      	ldr	r2, [pc, #140]	; (8000d94 <HAL_InitTick+0xd4>)
 8000d06:	fba2 2303 	umull	r2, r3, r2, r3
 8000d0a:	0c9b      	lsrs	r3, r3, #18
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000d10:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <HAL_InitTick+0xd8>)
 8000d12:	4a22      	ldr	r2, [pc, #136]	; (8000d9c <HAL_InitTick+0xdc>)
 8000d14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000d16:	4b20      	ldr	r3, [pc, #128]	; (8000d98 <HAL_InitTick+0xd8>)
 8000d18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d1c:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000d1e:	4a1e      	ldr	r2, [pc, #120]	; (8000d98 <HAL_InitTick+0xd8>)
 8000d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d22:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000d24:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <HAL_InitTick+0xd8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2a:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <HAL_InitTick+0xd8>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d30:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <HAL_InitTick+0xd8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000d36:	4818      	ldr	r0, [pc, #96]	; (8000d98 <HAL_InitTick+0xd8>)
 8000d38:	f002 f848 	bl	8002dcc <HAL_TIM_Base_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d11b      	bne.n	8000d82 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000d4a:	4813      	ldr	r0, [pc, #76]	; (8000d98 <HAL_InitTick+0xd8>)
 8000d4c:	f002 f898 	bl	8002e80 <HAL_TIM_Base_Start_IT>
 8000d50:	4603      	mov	r3, r0
 8000d52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d111      	bne.n	8000d82 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000d5e:	201a      	movs	r0, #26
 8000d60:	f000 fdde 	bl	8001920 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b0f      	cmp	r3, #15
 8000d68:	d808      	bhi.n	8000d7c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	6879      	ldr	r1, [r7, #4]
 8000d6e:	201a      	movs	r0, #26
 8000d70:	f000 fdba 	bl	80018e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d74:	4a0a      	ldr	r2, [pc, #40]	; (8000da0 <HAL_InitTick+0xe0>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	e002      	b.n	8000d82 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3730      	adds	r7, #48	; 0x30
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800
 8000d94:	431bde83 	.word	0x431bde83
 8000d98:	20000130 	.word	0x20000130
 8000d9c:	40014800 	.word	0x40014800
 8000da0:	20000004 	.word	0x20000004

08000da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <NMI_Handler+0x4>

08000daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <HardFault_Handler+0x4>

08000db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <MemManage_Handler+0x4>

08000db6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <BusFault_Handler+0x4>

08000dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <UsageFault_Handler+0x4>

08000dc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000dd6:	f002 f8b5 	bl	8002f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000130 	.word	0x20000130

08000de4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <DMA2_Stream0_IRQHandler+0x10>)
 8000dea:	f000 ff1d 	bl	8001c28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	2000007c 	.word	0x2000007c

08000df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <SystemInit+0x20>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <SystemInit+0x20>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e22:	490e      	ldr	r1, [pc, #56]	; (8000e5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e24:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e38:	4c0b      	ldr	r4, [pc, #44]	; (8000e68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e46:	f7ff ffd7 	bl	8000df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f006 f817 	bl	8006e7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4e:	f7ff fc3b 	bl	80006c8 <main>
  bx  lr    
 8000e52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e54:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e60:	08006fb8 	.word	0x08006fb8
  ldr r2, =_sbss
 8000e64:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e68:	20004acc 	.word	0x20004acc

08000e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC_IRQHandler>
	...

08000e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e74:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <HAL_Init+0x40>)
 8000e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <HAL_Init+0x40>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <HAL_Init+0x40>)
 8000e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <HAL_Init+0x40>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <HAL_Init+0x40>)
 8000e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f000 fd1a 	bl	80018d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e9e:	200f      	movs	r0, #15
 8000ea0:	f7ff ff0e 	bl	8000cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ea4:	f7ff fe20 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40023c00 	.word	0x40023c00

08000eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x20>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_IncTick+0x24>)
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	20000178 	.word	0x20000178

08000edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_GetTick+0x14>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000178 	.word	0x20000178

08000ef4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000efc:	2300      	movs	r3, #0
 8000efe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d101      	bne.n	8000f0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e033      	b.n	8000f72 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d109      	bne.n	8000f26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff fe14 	bl	8000b40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	f003 0310 	and.w	r3, r3, #16
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d118      	bne.n	8000f64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f3a:	f023 0302 	bic.w	r3, r3, #2
 8000f3e:	f043 0202 	orr.w	r2, r3, #2
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 fa98 	bl	800147c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2200      	movs	r2, #0
 8000f50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	f023 0303 	bic.w	r3, r3, #3
 8000f5a:	f043 0201 	orr.w	r2, r3, #1
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	641a      	str	r2, [r3, #64]	; 0x40
 8000f62:	e001      	b.n	8000f68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d101      	bne.n	8000f9a <HAL_ADC_Start_DMA+0x1e>
 8000f96:	2302      	movs	r3, #2
 8000f98:	e0ce      	b.n	8001138 <HAL_ADC_Start_DMA+0x1bc>
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d018      	beq.n	8000fe2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	689a      	ldr	r2, [r3, #8]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f042 0201 	orr.w	r2, r2, #1
 8000fbe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fc0:	4b5f      	ldr	r3, [pc, #380]	; (8001140 <HAL_ADC_Start_DMA+0x1c4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a5f      	ldr	r2, [pc, #380]	; (8001144 <HAL_ADC_Start_DMA+0x1c8>)
 8000fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fca:	0c9a      	lsrs	r2, r3, #18
 8000fcc:	4613      	mov	r3, r2
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	4413      	add	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000fd4:	e002      	b.n	8000fdc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1f9      	bne.n	8000fd6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ff0:	d107      	bne.n	8001002 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001000:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	2b01      	cmp	r3, #1
 800100e:	f040 8086 	bne.w	800111e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800101a:	f023 0301 	bic.w	r3, r3, #1
 800101e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001030:	2b00      	cmp	r3, #0
 8001032:	d007      	beq.n	8001044 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800103c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800104c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001050:	d106      	bne.n	8001060 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	f023 0206 	bic.w	r2, r3, #6
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	645a      	str	r2, [r3, #68]	; 0x44
 800105e:	e002      	b.n	8001066 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	2200      	movs	r2, #0
 8001064:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800106e:	4b36      	ldr	r3, [pc, #216]	; (8001148 <HAL_ADC_Start_DMA+0x1cc>)
 8001070:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001076:	4a35      	ldr	r2, [pc, #212]	; (800114c <HAL_ADC_Start_DMA+0x1d0>)
 8001078:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107e:	4a34      	ldr	r2, [pc, #208]	; (8001150 <HAL_ADC_Start_DMA+0x1d4>)
 8001080:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001086:	4a33      	ldr	r2, [pc, #204]	; (8001154 <HAL_ADC_Start_DMA+0x1d8>)
 8001088:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001092:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80010a2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010b2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	334c      	adds	r3, #76	; 0x4c
 80010be:	4619      	mov	r1, r3
 80010c0:	68ba      	ldr	r2, [r7, #8]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f000 fce8 	bl	8001a98 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 031f 	and.w	r3, r3, #31
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d10f      	bne.n	80010f4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d129      	bne.n	8001136 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	e020      	b.n	8001136 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a17      	ldr	r2, [pc, #92]	; (8001158 <HAL_ADC_Start_DMA+0x1dc>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d11b      	bne.n	8001136 <HAL_ADC_Start_DMA+0x1ba>
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d114      	bne.n	8001136 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	e00b      	b.n	8001136 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f043 0210 	orr.w	r2, r3, #16
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	f043 0201 	orr.w	r2, r3, #1
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000000 	.word	0x20000000
 8001144:	431bde83 	.word	0x431bde83
 8001148:	40012300 	.word	0x40012300
 800114c:	08001675 	.word	0x08001675
 8001150:	0800172f 	.word	0x0800172f
 8001154:	0800174b 	.word	0x0800174b
 8001158:	40012000 	.word	0x40012000

0800115c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001164:	2300      	movs	r3, #0
 8001166:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800116e:	2b01      	cmp	r3, #1
 8001170:	d101      	bne.n	8001176 <HAL_ADC_Stop_DMA+0x1a>
 8001172:	2302      	movs	r3, #2
 8001174:	e048      	b.n	8001208 <HAL_ADC_Stop_DMA+0xac>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2201      	movs	r2, #1
 800117a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0201 	bic.w	r2, r2, #1
 800118c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	d130      	bne.n	80011fe <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011aa:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d10f      	bne.n	80011da <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 fcc2 	bl	8001b48 <HAL_DMA_Abort>
 80011c4:	4603      	mov	r3, r0
 80011c6:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d005      	beq.n	80011da <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80011e8:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011f2:	f023 0301 	bic.w	r3, r3, #1
 80011f6:	f043 0201 	orr.w	r2, r3, #1
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001206:	7bfb      	ldrb	r3, [r7, #15]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800124c:	2b01      	cmp	r3, #1
 800124e:	d101      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x1c>
 8001250:	2302      	movs	r3, #2
 8001252:	e105      	b.n	8001460 <HAL_ADC_ConfigChannel+0x228>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b09      	cmp	r3, #9
 8001262:	d925      	bls.n	80012b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68d9      	ldr	r1, [r3, #12]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	b29b      	uxth	r3, r3
 8001270:	461a      	mov	r2, r3
 8001272:	4613      	mov	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4413      	add	r3, r2
 8001278:	3b1e      	subs	r3, #30
 800127a:	2207      	movs	r2, #7
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43da      	mvns	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	400a      	ands	r2, r1
 8001288:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	68d9      	ldr	r1, [r3, #12]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	b29b      	uxth	r3, r3
 800129a:	4618      	mov	r0, r3
 800129c:	4603      	mov	r3, r0
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4403      	add	r3, r0
 80012a2:	3b1e      	subs	r3, #30
 80012a4:	409a      	lsls	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	e022      	b.n	80012f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6919      	ldr	r1, [r3, #16]
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	4613      	mov	r3, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	4413      	add	r3, r2
 80012c4:	2207      	movs	r2, #7
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43da      	mvns	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	400a      	ands	r2, r1
 80012d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6919      	ldr	r1, [r3, #16]
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	4618      	mov	r0, r3
 80012e6:	4603      	mov	r3, r0
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	4403      	add	r3, r0
 80012ec:	409a      	lsls	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d824      	bhi.n	8001348 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	4613      	mov	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	3b05      	subs	r3, #5
 8001310:	221f      	movs	r2, #31
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	400a      	ands	r2, r1
 800131e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	b29b      	uxth	r3, r3
 800132c:	4618      	mov	r0, r3
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	4613      	mov	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	3b05      	subs	r3, #5
 800133a:	fa00 f203 	lsl.w	r2, r0, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	430a      	orrs	r2, r1
 8001344:	635a      	str	r2, [r3, #52]	; 0x34
 8001346:	e04c      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b0c      	cmp	r3, #12
 800134e:	d824      	bhi.n	800139a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	3b23      	subs	r3, #35	; 0x23
 8001362:	221f      	movs	r2, #31
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43da      	mvns	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	400a      	ands	r2, r1
 8001370:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	b29b      	uxth	r3, r3
 800137e:	4618      	mov	r0, r3
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	4613      	mov	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	3b23      	subs	r3, #35	; 0x23
 800138c:	fa00 f203 	lsl.w	r2, r0, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	430a      	orrs	r2, r1
 8001396:	631a      	str	r2, [r3, #48]	; 0x30
 8001398:	e023      	b.n	80013e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	3b41      	subs	r3, #65	; 0x41
 80013ac:	221f      	movs	r2, #31
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	400a      	ands	r2, r1
 80013ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	4618      	mov	r0, r3
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	3b41      	subs	r3, #65	; 0x41
 80013d6:	fa00 f203 	lsl.w	r2, r0, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013e2:	4b22      	ldr	r3, [pc, #136]	; (800146c <HAL_ADC_ConfigChannel+0x234>)
 80013e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a21      	ldr	r2, [pc, #132]	; (8001470 <HAL_ADC_ConfigChannel+0x238>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d109      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x1cc>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b12      	cmp	r3, #18
 80013f6:	d105      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a19      	ldr	r2, [pc, #100]	; (8001470 <HAL_ADC_ConfigChannel+0x238>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d123      	bne.n	8001456 <HAL_ADC_ConfigChannel+0x21e>
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b10      	cmp	r3, #16
 8001414:	d003      	beq.n	800141e <HAL_ADC_ConfigChannel+0x1e6>
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b11      	cmp	r3, #17
 800141c:	d11b      	bne.n	8001456 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b10      	cmp	r3, #16
 8001430:	d111      	bne.n	8001456 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <HAL_ADC_ConfigChannel+0x23c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <HAL_ADC_ConfigChannel+0x240>)
 8001438:	fba2 2303 	umull	r2, r3, r2, r3
 800143c:	0c9a      	lsrs	r2, r3, #18
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001448:	e002      	b.n	8001450 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	3b01      	subs	r3, #1
 800144e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d1f9      	bne.n	800144a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	40012300 	.word	0x40012300
 8001470:	40012000 	.word	0x40012000
 8001474:	20000000 	.word	0x20000000
 8001478:	431bde83 	.word	0x431bde83

0800147c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001484:	4b79      	ldr	r3, [pc, #484]	; (800166c <ADC_Init+0x1f0>)
 8001486:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	431a      	orrs	r2, r3
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6859      	ldr	r1, [r3, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	021a      	lsls	r2, r3, #8
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6859      	ldr	r1, [r3, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6899      	ldr	r1, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68da      	ldr	r2, [r3, #12]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150e:	4a58      	ldr	r2, [pc, #352]	; (8001670 <ADC_Init+0x1f4>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d022      	beq.n	800155a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001522:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6899      	ldr	r1, [r3, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001544:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6899      	ldr	r1, [r3, #8]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	e00f      	b.n	800157a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	689a      	ldr	r2, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001568:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001578:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0202 	bic.w	r2, r2, #2
 8001588:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6899      	ldr	r1, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	7e1b      	ldrb	r3, [r3, #24]
 8001594:	005a      	lsls	r2, r3, #1
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d01b      	beq.n	80015e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6859      	ldr	r1, [r3, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d2:	3b01      	subs	r3, #1
 80015d4:	035a      	lsls	r2, r3, #13
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	e007      	b.n	80015f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	685a      	ldr	r2, [r3, #4]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	3b01      	subs	r3, #1
 800160c:	051a      	lsls	r2, r3, #20
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001624:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6899      	ldr	r1, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001632:	025a      	lsls	r2, r3, #9
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800164a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6899      	ldr	r1, [r3, #8]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	029a      	lsls	r2, r3, #10
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	609a      	str	r2, [r3, #8]
}
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	40012300 	.word	0x40012300
 8001670:	0f000001 	.word	0x0f000001

08001674 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001680:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800168a:	2b00      	cmp	r3, #0
 800168c:	d13c      	bne.n	8001708 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d12b      	bne.n	8001700 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d127      	bne.n	8001700 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d006      	beq.n	80016cc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d119      	bne.n	8001700 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0220 	bic.w	r2, r2, #32
 80016da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d105      	bne.n	8001700 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	f043 0201 	orr.w	r2, r3, #1
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f7fe ff67 	bl	80005d4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001706:	e00e      	b.n	8001726 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f7ff fd85 	bl	8001224 <HAL_ADC_ErrorCallback>
}
 800171a:	e004      	b.n	8001726 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	4798      	blx	r3
}
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800173a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	f7ff fd67 	bl	8001210 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b084      	sub	sp, #16
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001756:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2240      	movs	r2, #64	; 0x40
 800175c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	f043 0204 	orr.w	r2, r3, #4
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f7ff fd5a 	bl	8001224 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001788:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001794:	4013      	ands	r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017aa:	4a04      	ldr	r2, [pc, #16]	; (80017bc <__NVIC_SetPriorityGrouping+0x44>)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	60d3      	str	r3, [r2, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <__NVIC_GetPriorityGrouping+0x18>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	f003 0307 	and.w	r3, r3, #7
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db0b      	blt.n	8001806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	f003 021f 	and.w	r2, r3, #31
 80017f4:	4907      	ldr	r1, [pc, #28]	; (8001814 <__NVIC_EnableIRQ+0x38>)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	2001      	movs	r0, #1
 80017fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000e100 	.word	0xe000e100

08001818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	6039      	str	r1, [r7, #0]
 8001822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001828:	2b00      	cmp	r3, #0
 800182a:	db0a      	blt.n	8001842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	b2da      	uxtb	r2, r3
 8001830:	490c      	ldr	r1, [pc, #48]	; (8001864 <__NVIC_SetPriority+0x4c>)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	0112      	lsls	r2, r2, #4
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	440b      	add	r3, r1
 800183c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001840:	e00a      	b.n	8001858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4908      	ldr	r1, [pc, #32]	; (8001868 <__NVIC_SetPriority+0x50>)
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	3b04      	subs	r3, #4
 8001850:	0112      	lsls	r2, r2, #4
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	440b      	add	r3, r1
 8001856:	761a      	strb	r2, [r3, #24]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000e100 	.word	0xe000e100
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800186c:	b480      	push	{r7}
 800186e:	b089      	sub	sp, #36	; 0x24
 8001870:	af00      	add	r7, sp, #0
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f1c3 0307 	rsb	r3, r3, #7
 8001886:	2b04      	cmp	r3, #4
 8001888:	bf28      	it	cs
 800188a:	2304      	movcs	r3, #4
 800188c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3304      	adds	r3, #4
 8001892:	2b06      	cmp	r3, #6
 8001894:	d902      	bls.n	800189c <NVIC_EncodePriority+0x30>
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3b03      	subs	r3, #3
 800189a:	e000      	b.n	800189e <NVIC_EncodePriority+0x32>
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43da      	mvns	r2, r3
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	401a      	ands	r2, r3
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	43d9      	mvns	r1, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	4313      	orrs	r3, r2
         );
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3724      	adds	r7, #36	; 0x24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ff4c 	bl	8001778 <__NVIC_SetPriorityGrouping>
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018fa:	f7ff ff61 	bl	80017c0 <__NVIC_GetPriorityGrouping>
 80018fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	68b9      	ldr	r1, [r7, #8]
 8001904:	6978      	ldr	r0, [r7, #20]
 8001906:	f7ff ffb1 	bl	800186c <NVIC_EncodePriority>
 800190a:	4602      	mov	r2, r0
 800190c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001910:	4611      	mov	r1, r2
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff ff80 	bl	8001818 <__NVIC_SetPriority>
}
 8001918:	bf00      	nop
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff ff54 	bl	80017dc <__NVIC_EnableIRQ>
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001948:	f7ff fac8 	bl	8000edc <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e099      	b.n	8001a8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2202      	movs	r2, #2
 800195c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0201 	bic.w	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001978:	e00f      	b.n	800199a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800197a:	f7ff faaf 	bl	8000edc <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b05      	cmp	r3, #5
 8001986:	d908      	bls.n	800199a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2220      	movs	r2, #32
 800198c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2203      	movs	r2, #3
 8001992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e078      	b.n	8001a8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1e8      	bne.n	800197a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	4b38      	ldr	r3, [pc, #224]	; (8001a94 <HAL_DMA_Init+0x158>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d107      	bne.n	8001a04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fc:	4313      	orrs	r3, r2
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f023 0307 	bic.w	r3, r3, #7
 8001a1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	2b04      	cmp	r3, #4
 8001a2c:	d117      	bne.n	8001a5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d00e      	beq.n	8001a5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 fadf 	bl	8002004 <DMA_CheckFifoParam>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d008      	beq.n	8001a5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2240      	movs	r2, #64	; 0x40
 8001a50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e016      	b.n	8001a8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f000 fa96 	bl	8001f98 <DMA_CalcBaseAndBitshift>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a74:	223f      	movs	r2, #63	; 0x3f
 8001a76:	409a      	lsls	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	f010803f 	.word	0xf010803f

08001a98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
 8001aa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_DMA_Start_IT+0x26>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e040      	b.n	8001b40 <HAL_DMA_Start_IT+0xa8>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d12f      	bne.n	8001b32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 fa28 	bl	8001f3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001af0:	223f      	movs	r2, #63	; 0x3f
 8001af2:	409a      	lsls	r2, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 0216 	orr.w	r2, r2, #22
 8001b06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d007      	beq.n	8001b20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f042 0208 	orr.w	r2, r2, #8
 8001b1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0201 	orr.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	e005      	b.n	8001b3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b56:	f7ff f9c1 	bl	8000edc <HAL_GetTick>
 8001b5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d008      	beq.n	8001b7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2280      	movs	r2, #128	; 0x80
 8001b6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e052      	b.n	8001c20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0216 	bic.w	r2, r2, #22
 8001b88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	695a      	ldr	r2, [r3, #20]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d103      	bne.n	8001baa <HAL_DMA_Abort+0x62>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0208 	bic.w	r2, r2, #8
 8001bb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0201 	bic.w	r2, r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bca:	e013      	b.n	8001bf4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bcc:	f7ff f986 	bl	8000edc <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b05      	cmp	r3, #5
 8001bd8:	d90c      	bls.n	8001bf4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2220      	movs	r2, #32
 8001bde:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2203      	movs	r2, #3
 8001be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e015      	b.n	8001c20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1e4      	bne.n	8001bcc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c06:	223f      	movs	r2, #63	; 0x3f
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c34:	4b8e      	ldr	r3, [pc, #568]	; (8001e70 <HAL_DMA_IRQHandler+0x248>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a8e      	ldr	r2, [pc, #568]	; (8001e74 <HAL_DMA_IRQHandler+0x24c>)
 8001c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3e:	0a9b      	lsrs	r3, r3, #10
 8001c40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c52:	2208      	movs	r2, #8
 8001c54:	409a      	lsls	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d01a      	beq.n	8001c94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d013      	beq.n	8001c94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0204 	bic.w	r2, r2, #4
 8001c7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c80:	2208      	movs	r2, #8
 8001c82:	409a      	lsls	r2, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8c:	f043 0201 	orr.w	r2, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c98:	2201      	movs	r2, #1
 8001c9a:	409a      	lsls	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d012      	beq.n	8001cca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00b      	beq.n	8001cca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	409a      	lsls	r2, r3
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc2:	f043 0202 	orr.w	r2, r3, #2
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cce:	2204      	movs	r2, #4
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d012      	beq.n	8001d00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d00b      	beq.n	8001d00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cec:	2204      	movs	r2, #4
 8001cee:	409a      	lsls	r2, r3
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf8:	f043 0204 	orr.w	r2, r3, #4
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d04:	2210      	movs	r2, #16
 8001d06:	409a      	lsls	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d043      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d03c      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d22:	2210      	movs	r2, #16
 8001d24:	409a      	lsls	r2, r3
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d018      	beq.n	8001d6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d108      	bne.n	8001d58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d024      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	4798      	blx	r3
 8001d56:	e01f      	b.n	8001d98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d01b      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	4798      	blx	r3
 8001d68:	e016      	b.n	8001d98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d107      	bne.n	8001d88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0208 	bic.w	r2, r2, #8
 8001d86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 808f 	beq.w	8001ec8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0310 	and.w	r3, r3, #16
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 8087 	beq.w	8001ec8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	409a      	lsls	r2, r3
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b05      	cmp	r3, #5
 8001dd0:	d136      	bne.n	8001e40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0216 	bic.w	r2, r2, #22
 8001de0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695a      	ldr	r2, [r3, #20]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001df0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d103      	bne.n	8001e02 <HAL_DMA_IRQHandler+0x1da>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d007      	beq.n	8001e12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0208 	bic.w	r2, r2, #8
 8001e10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e16:	223f      	movs	r2, #63	; 0x3f
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d07e      	beq.n	8001f34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	4798      	blx	r3
        }
        return;
 8001e3e:	e079      	b.n	8001f34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d01d      	beq.n	8001e8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10d      	bne.n	8001e78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d031      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	4798      	blx	r3
 8001e6c:	e02c      	b.n	8001ec8 <HAL_DMA_IRQHandler+0x2a0>
 8001e6e:	bf00      	nop
 8001e70:	20000000 	.word	0x20000000
 8001e74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d023      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	4798      	blx	r3
 8001e88:	e01e      	b.n	8001ec8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10f      	bne.n	8001eb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 0210 	bic.w	r2, r2, #16
 8001ea6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d032      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d022      	beq.n	8001f22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2205      	movs	r2, #5
 8001ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0201 	bic.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d307      	bcc.n	8001f10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f2      	bne.n	8001ef4 <HAL_DMA_IRQHandler+0x2cc>
 8001f0e:	e000      	b.n	8001f12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2201      	movs	r2, #1
 8001f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d005      	beq.n	8001f36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	4798      	blx	r3
 8001f32:	e000      	b.n	8001f36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f34:	bf00      	nop
    }
  }
}
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b40      	cmp	r3, #64	; 0x40
 8001f68:	d108      	bne.n	8001f7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f7a:	e007      	b.n	8001f8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	60da      	str	r2, [r3, #12]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	3b10      	subs	r3, #16
 8001fa8:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <DMA_CalcBaseAndBitshift+0x64>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	091b      	lsrs	r3, r3, #4
 8001fb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fb2:	4a13      	ldr	r2, [pc, #76]	; (8002000 <DMA_CalcBaseAndBitshift+0x68>)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2b03      	cmp	r3, #3
 8001fc4:	d909      	bls.n	8001fda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fce:	f023 0303 	bic.w	r3, r3, #3
 8001fd2:	1d1a      	adds	r2, r3, #4
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	659a      	str	r2, [r3, #88]	; 0x58
 8001fd8:	e007      	b.n	8001fea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fe2:	f023 0303 	bic.w	r3, r3, #3
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	aaaaaaab 	.word	0xaaaaaaab
 8002000:	08006fa0 	.word	0x08006fa0

08002004 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002014:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d11f      	bne.n	800205e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2b03      	cmp	r3, #3
 8002022:	d856      	bhi.n	80020d2 <DMA_CheckFifoParam+0xce>
 8002024:	a201      	add	r2, pc, #4	; (adr r2, 800202c <DMA_CheckFifoParam+0x28>)
 8002026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202a:	bf00      	nop
 800202c:	0800203d 	.word	0x0800203d
 8002030:	0800204f 	.word	0x0800204f
 8002034:	0800203d 	.word	0x0800203d
 8002038:	080020d3 	.word	0x080020d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002040:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d046      	beq.n	80020d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800204c:	e043      	b.n	80020d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002056:	d140      	bne.n	80020da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800205c:	e03d      	b.n	80020da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002066:	d121      	bne.n	80020ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b03      	cmp	r3, #3
 800206c:	d837      	bhi.n	80020de <DMA_CheckFifoParam+0xda>
 800206e:	a201      	add	r2, pc, #4	; (adr r2, 8002074 <DMA_CheckFifoParam+0x70>)
 8002070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002074:	08002085 	.word	0x08002085
 8002078:	0800208b 	.word	0x0800208b
 800207c:	08002085 	.word	0x08002085
 8002080:	0800209d 	.word	0x0800209d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
      break;
 8002088:	e030      	b.n	80020ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d025      	beq.n	80020e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800209a:	e022      	b.n	80020e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020a4:	d11f      	bne.n	80020e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020aa:	e01c      	b.n	80020e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d903      	bls.n	80020ba <DMA_CheckFifoParam+0xb6>
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d003      	beq.n	80020c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020b8:	e018      	b.n	80020ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	73fb      	strb	r3, [r7, #15]
      break;
 80020be:	e015      	b.n	80020ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00e      	beq.n	80020ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
      break;
 80020d0:	e00b      	b.n	80020ea <DMA_CheckFifoParam+0xe6>
      break;
 80020d2:	bf00      	nop
 80020d4:	e00a      	b.n	80020ec <DMA_CheckFifoParam+0xe8>
      break;
 80020d6:	bf00      	nop
 80020d8:	e008      	b.n	80020ec <DMA_CheckFifoParam+0xe8>
      break;
 80020da:	bf00      	nop
 80020dc:	e006      	b.n	80020ec <DMA_CheckFifoParam+0xe8>
      break;
 80020de:	bf00      	nop
 80020e0:	e004      	b.n	80020ec <DMA_CheckFifoParam+0xe8>
      break;
 80020e2:	bf00      	nop
 80020e4:	e002      	b.n	80020ec <DMA_CheckFifoParam+0xe8>
      break;   
 80020e6:	bf00      	nop
 80020e8:	e000      	b.n	80020ec <DMA_CheckFifoParam+0xe8>
      break;
 80020ea:	bf00      	nop
    }
  } 
  
  return status; 
 80020ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop

080020fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800210e:	2300      	movs	r3, #0
 8002110:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	e159      	b.n	80023cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002118:	2201      	movs	r2, #1
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	4013      	ands	r3, r2
 800212a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	429a      	cmp	r2, r3
 8002132:	f040 8148 	bne.w	80023c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	2b01      	cmp	r3, #1
 8002140:	d005      	beq.n	800214e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800214a:	2b02      	cmp	r3, #2
 800214c:	d130      	bne.n	80021b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	2203      	movs	r2, #3
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002184:	2201      	movs	r2, #1
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	f003 0201 	and.w	r2, r3, #1
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 0303 	and.w	r3, r3, #3
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d017      	beq.n	80021ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	2203      	movs	r2, #3
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	43db      	mvns	r3, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d123      	bne.n	8002240 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	08da      	lsrs	r2, r3, #3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3208      	adds	r2, #8
 8002200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002204:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	220f      	movs	r2, #15
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	08da      	lsrs	r2, r3, #3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3208      	adds	r2, #8
 800223a:	69b9      	ldr	r1, [r7, #24]
 800223c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	2203      	movs	r2, #3
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 0203 	and.w	r2, r3, #3
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80a2 	beq.w	80023c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4b57      	ldr	r3, [pc, #348]	; (80023e4 <HAL_GPIO_Init+0x2e8>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	4a56      	ldr	r2, [pc, #344]	; (80023e4 <HAL_GPIO_Init+0x2e8>)
 800228c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002290:	6453      	str	r3, [r2, #68]	; 0x44
 8002292:	4b54      	ldr	r3, [pc, #336]	; (80023e4 <HAL_GPIO_Init+0x2e8>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800229e:	4a52      	ldr	r2, [pc, #328]	; (80023e8 <HAL_GPIO_Init+0x2ec>)
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	089b      	lsrs	r3, r3, #2
 80022a4:	3302      	adds	r3, #2
 80022a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	220f      	movs	r2, #15
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a49      	ldr	r2, [pc, #292]	; (80023ec <HAL_GPIO_Init+0x2f0>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d019      	beq.n	80022fe <HAL_GPIO_Init+0x202>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a48      	ldr	r2, [pc, #288]	; (80023f0 <HAL_GPIO_Init+0x2f4>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d013      	beq.n	80022fa <HAL_GPIO_Init+0x1fe>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a47      	ldr	r2, [pc, #284]	; (80023f4 <HAL_GPIO_Init+0x2f8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00d      	beq.n	80022f6 <HAL_GPIO_Init+0x1fa>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a46      	ldr	r2, [pc, #280]	; (80023f8 <HAL_GPIO_Init+0x2fc>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d007      	beq.n	80022f2 <HAL_GPIO_Init+0x1f6>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a45      	ldr	r2, [pc, #276]	; (80023fc <HAL_GPIO_Init+0x300>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d101      	bne.n	80022ee <HAL_GPIO_Init+0x1f2>
 80022ea:	2304      	movs	r3, #4
 80022ec:	e008      	b.n	8002300 <HAL_GPIO_Init+0x204>
 80022ee:	2307      	movs	r3, #7
 80022f0:	e006      	b.n	8002300 <HAL_GPIO_Init+0x204>
 80022f2:	2303      	movs	r3, #3
 80022f4:	e004      	b.n	8002300 <HAL_GPIO_Init+0x204>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e002      	b.n	8002300 <HAL_GPIO_Init+0x204>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <HAL_GPIO_Init+0x204>
 80022fe:	2300      	movs	r3, #0
 8002300:	69fa      	ldr	r2, [r7, #28]
 8002302:	f002 0203 	and.w	r2, r2, #3
 8002306:	0092      	lsls	r2, r2, #2
 8002308:	4093      	lsls	r3, r2
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002310:	4935      	ldr	r1, [pc, #212]	; (80023e8 <HAL_GPIO_Init+0x2ec>)
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	089b      	lsrs	r3, r3, #2
 8002316:	3302      	adds	r3, #2
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800231e:	4b38      	ldr	r3, [pc, #224]	; (8002400 <HAL_GPIO_Init+0x304>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002342:	4a2f      	ldr	r2, [pc, #188]	; (8002400 <HAL_GPIO_Init+0x304>)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002348:	4b2d      	ldr	r3, [pc, #180]	; (8002400 <HAL_GPIO_Init+0x304>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800236c:	4a24      	ldr	r2, [pc, #144]	; (8002400 <HAL_GPIO_Init+0x304>)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002372:	4b23      	ldr	r3, [pc, #140]	; (8002400 <HAL_GPIO_Init+0x304>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	43db      	mvns	r3, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4013      	ands	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002396:	4a1a      	ldr	r2, [pc, #104]	; (8002400 <HAL_GPIO_Init+0x304>)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800239c:	4b18      	ldr	r3, [pc, #96]	; (8002400 <HAL_GPIO_Init+0x304>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023c0:	4a0f      	ldr	r2, [pc, #60]	; (8002400 <HAL_GPIO_Init+0x304>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3301      	adds	r3, #1
 80023ca:	61fb      	str	r3, [r7, #28]
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	2b0f      	cmp	r3, #15
 80023d0:	f67f aea2 	bls.w	8002118 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023d4:	bf00      	nop
 80023d6:	bf00      	nop
 80023d8:	3724      	adds	r7, #36	; 0x24
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40013800 	.word	0x40013800
 80023ec:	40020000 	.word	0x40020000
 80023f0:	40020400 	.word	0x40020400
 80023f4:	40020800 	.word	0x40020800
 80023f8:	40020c00 	.word	0x40020c00
 80023fc:	40021000 	.word	0x40021000
 8002400:	40013c00 	.word	0x40013c00

08002404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	807b      	strh	r3, [r7, #2]
 8002410:	4613      	mov	r3, r2
 8002412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002414:	787b      	ldrb	r3, [r7, #1]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800241a:	887a      	ldrh	r2, [r7, #2]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002420:	e003      	b.n	800242a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002422:	887b      	ldrh	r3, [r7, #2]
 8002424:	041a      	lsls	r2, r3, #16
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	619a      	str	r2, [r3, #24]
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
	...

08002438 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e267      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d075      	beq.n	8002542 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002456:	4b88      	ldr	r3, [pc, #544]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b04      	cmp	r3, #4
 8002460:	d00c      	beq.n	800247c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002462:	4b85      	ldr	r3, [pc, #532]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800246a:	2b08      	cmp	r3, #8
 800246c:	d112      	bne.n	8002494 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800246e:	4b82      	ldr	r3, [pc, #520]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002476:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800247a:	d10b      	bne.n	8002494 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247c:	4b7e      	ldr	r3, [pc, #504]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d05b      	beq.n	8002540 <HAL_RCC_OscConfig+0x108>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d157      	bne.n	8002540 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e242      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800249c:	d106      	bne.n	80024ac <HAL_RCC_OscConfig+0x74>
 800249e:	4b76      	ldr	r3, [pc, #472]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a75      	ldr	r2, [pc, #468]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	e01d      	b.n	80024e8 <HAL_RCC_OscConfig+0xb0>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b4:	d10c      	bne.n	80024d0 <HAL_RCC_OscConfig+0x98>
 80024b6:	4b70      	ldr	r3, [pc, #448]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a6f      	ldr	r2, [pc, #444]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 80024bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c0:	6013      	str	r3, [r2, #0]
 80024c2:	4b6d      	ldr	r3, [pc, #436]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a6c      	ldr	r2, [pc, #432]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 80024c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	e00b      	b.n	80024e8 <HAL_RCC_OscConfig+0xb0>
 80024d0:	4b69      	ldr	r3, [pc, #420]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a68      	ldr	r2, [pc, #416]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 80024d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024da:	6013      	str	r3, [r2, #0]
 80024dc:	4b66      	ldr	r3, [pc, #408]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a65      	ldr	r2, [pc, #404]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 80024e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d013      	beq.n	8002518 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f0:	f7fe fcf4 	bl	8000edc <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f8:	f7fe fcf0 	bl	8000edc <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b64      	cmp	r3, #100	; 0x64
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e207      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250a:	4b5b      	ldr	r3, [pc, #364]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0xc0>
 8002516:	e014      	b.n	8002542 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002518:	f7fe fce0 	bl	8000edc <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002520:	f7fe fcdc 	bl	8000edc <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b64      	cmp	r3, #100	; 0x64
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e1f3      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002532:	4b51      	ldr	r3, [pc, #324]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f0      	bne.n	8002520 <HAL_RCC_OscConfig+0xe8>
 800253e:	e000      	b.n	8002542 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d063      	beq.n	8002616 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800254e:	4b4a      	ldr	r3, [pc, #296]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00b      	beq.n	8002572 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800255a:	4b47      	ldr	r3, [pc, #284]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002562:	2b08      	cmp	r3, #8
 8002564:	d11c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002566:	4b44      	ldr	r3, [pc, #272]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d116      	bne.n	80025a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002572:	4b41      	ldr	r3, [pc, #260]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d005      	beq.n	800258a <HAL_RCC_OscConfig+0x152>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d001      	beq.n	800258a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e1c7      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258a:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4937      	ldr	r1, [pc, #220]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259e:	e03a      	b.n	8002616 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d020      	beq.n	80025ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025a8:	4b34      	ldr	r3, [pc, #208]	; (800267c <HAL_RCC_OscConfig+0x244>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ae:	f7fe fc95 	bl	8000edc <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b6:	f7fe fc91 	bl	8000edc <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e1a8      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c8:	4b2b      	ldr	r3, [pc, #172]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d4:	4b28      	ldr	r3, [pc, #160]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4925      	ldr	r1, [pc, #148]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	600b      	str	r3, [r1, #0]
 80025e8:	e015      	b.n	8002616 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ea:	4b24      	ldr	r3, [pc, #144]	; (800267c <HAL_RCC_OscConfig+0x244>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7fe fc74 	bl	8000edc <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f8:	f7fe fc70 	bl	8000edc <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e187      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260a:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0308 	and.w	r3, r3, #8
 800261e:	2b00      	cmp	r3, #0
 8002620:	d036      	beq.n	8002690 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d016      	beq.n	8002658 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800262a:	4b15      	ldr	r3, [pc, #84]	; (8002680 <HAL_RCC_OscConfig+0x248>)
 800262c:	2201      	movs	r2, #1
 800262e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002630:	f7fe fc54 	bl	8000edc <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002638:	f7fe fc50 	bl	8000edc <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e167      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264a:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_RCC_OscConfig+0x240>)
 800264c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0x200>
 8002656:	e01b      	b.n	8002690 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002658:	4b09      	ldr	r3, [pc, #36]	; (8002680 <HAL_RCC_OscConfig+0x248>)
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265e:	f7fe fc3d 	bl	8000edc <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002664:	e00e      	b.n	8002684 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002666:	f7fe fc39 	bl	8000edc <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d907      	bls.n	8002684 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e150      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
 8002678:	40023800 	.word	0x40023800
 800267c:	42470000 	.word	0x42470000
 8002680:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002684:	4b88      	ldr	r3, [pc, #544]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 8002686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1ea      	bne.n	8002666 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 8097 	beq.w	80027cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800269e:	2300      	movs	r3, #0
 80026a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026a2:	4b81      	ldr	r3, [pc, #516]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10f      	bne.n	80026ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	4b7d      	ldr	r3, [pc, #500]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	4a7c      	ldr	r2, [pc, #496]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 80026b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026bc:	6413      	str	r3, [r2, #64]	; 0x40
 80026be:	4b7a      	ldr	r3, [pc, #488]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ca:	2301      	movs	r3, #1
 80026cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ce:	4b77      	ldr	r3, [pc, #476]	; (80028ac <HAL_RCC_OscConfig+0x474>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d118      	bne.n	800270c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026da:	4b74      	ldr	r3, [pc, #464]	; (80028ac <HAL_RCC_OscConfig+0x474>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a73      	ldr	r2, [pc, #460]	; (80028ac <HAL_RCC_OscConfig+0x474>)
 80026e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e6:	f7fe fbf9 	bl	8000edc <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ee:	f7fe fbf5 	bl	8000edc <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e10c      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002700:	4b6a      	ldr	r3, [pc, #424]	; (80028ac <HAL_RCC_OscConfig+0x474>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0f0      	beq.n	80026ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d106      	bne.n	8002722 <HAL_RCC_OscConfig+0x2ea>
 8002714:	4b64      	ldr	r3, [pc, #400]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 8002716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002718:	4a63      	ldr	r2, [pc, #396]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 800271a:	f043 0301 	orr.w	r3, r3, #1
 800271e:	6713      	str	r3, [r2, #112]	; 0x70
 8002720:	e01c      	b.n	800275c <HAL_RCC_OscConfig+0x324>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2b05      	cmp	r3, #5
 8002728:	d10c      	bne.n	8002744 <HAL_RCC_OscConfig+0x30c>
 800272a:	4b5f      	ldr	r3, [pc, #380]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 800272c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272e:	4a5e      	ldr	r2, [pc, #376]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 8002730:	f043 0304 	orr.w	r3, r3, #4
 8002734:	6713      	str	r3, [r2, #112]	; 0x70
 8002736:	4b5c      	ldr	r3, [pc, #368]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 8002738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273a:	4a5b      	ldr	r2, [pc, #364]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	6713      	str	r3, [r2, #112]	; 0x70
 8002742:	e00b      	b.n	800275c <HAL_RCC_OscConfig+0x324>
 8002744:	4b58      	ldr	r3, [pc, #352]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 8002746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002748:	4a57      	ldr	r2, [pc, #348]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 800274a:	f023 0301 	bic.w	r3, r3, #1
 800274e:	6713      	str	r3, [r2, #112]	; 0x70
 8002750:	4b55      	ldr	r3, [pc, #340]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 8002752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002754:	4a54      	ldr	r2, [pc, #336]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 8002756:	f023 0304 	bic.w	r3, r3, #4
 800275a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002764:	f7fe fbba 	bl	8000edc <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276a:	e00a      	b.n	8002782 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800276c:	f7fe fbb6 	bl	8000edc <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	f241 3288 	movw	r2, #5000	; 0x1388
 800277a:	4293      	cmp	r3, r2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e0cb      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002782:	4b49      	ldr	r3, [pc, #292]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 8002784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0ee      	beq.n	800276c <HAL_RCC_OscConfig+0x334>
 800278e:	e014      	b.n	80027ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002790:	f7fe fba4 	bl	8000edc <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002796:	e00a      	b.n	80027ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002798:	f7fe fba0 	bl	8000edc <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e0b5      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ae:	4b3e      	ldr	r3, [pc, #248]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1ee      	bne.n	8002798 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ba:	7dfb      	ldrb	r3, [r7, #23]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d105      	bne.n	80027cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c0:	4b39      	ldr	r3, [pc, #228]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	4a38      	ldr	r2, [pc, #224]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 80027c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 80a1 	beq.w	8002918 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027d6:	4b34      	ldr	r3, [pc, #208]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 030c 	and.w	r3, r3, #12
 80027de:	2b08      	cmp	r3, #8
 80027e0:	d05c      	beq.n	800289c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d141      	bne.n	800286e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ea:	4b31      	ldr	r3, [pc, #196]	; (80028b0 <HAL_RCC_OscConfig+0x478>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f0:	f7fe fb74 	bl	8000edc <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f8:	f7fe fb70 	bl	8000edc <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e087      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280a:	4b27      	ldr	r3, [pc, #156]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f0      	bne.n	80027f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69da      	ldr	r2, [r3, #28]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	019b      	lsls	r3, r3, #6
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282c:	085b      	lsrs	r3, r3, #1
 800282e:	3b01      	subs	r3, #1
 8002830:	041b      	lsls	r3, r3, #16
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	061b      	lsls	r3, r3, #24
 800283a:	491b      	ldr	r1, [pc, #108]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 800283c:	4313      	orrs	r3, r2
 800283e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002840:	4b1b      	ldr	r3, [pc, #108]	; (80028b0 <HAL_RCC_OscConfig+0x478>)
 8002842:	2201      	movs	r2, #1
 8002844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002846:	f7fe fb49 	bl	8000edc <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800284e:	f7fe fb45 	bl	8000edc <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e05c      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002860:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x416>
 800286c:	e054      	b.n	8002918 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286e:	4b10      	ldr	r3, [pc, #64]	; (80028b0 <HAL_RCC_OscConfig+0x478>)
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7fe fb32 	bl	8000edc <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287a:	e008      	b.n	800288e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800287c:	f7fe fb2e 	bl	8000edc <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e045      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <HAL_RCC_OscConfig+0x470>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1f0      	bne.n	800287c <HAL_RCC_OscConfig+0x444>
 800289a:	e03d      	b.n	8002918 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d107      	bne.n	80028b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e038      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40007000 	.word	0x40007000
 80028b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028b4:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <HAL_RCC_OscConfig+0x4ec>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d028      	beq.n	8002914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d121      	bne.n	8002914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028da:	429a      	cmp	r2, r3
 80028dc:	d11a      	bne.n	8002914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028e4:	4013      	ands	r3, r2
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d111      	bne.n	8002914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fa:	085b      	lsrs	r3, r3, #1
 80028fc:	3b01      	subs	r3, #1
 80028fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002900:	429a      	cmp	r2, r3
 8002902:	d107      	bne.n	8002914 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800

08002928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0cc      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800293c:	4b68      	ldr	r3, [pc, #416]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d90c      	bls.n	8002964 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b65      	ldr	r3, [pc, #404]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002952:	4b63      	ldr	r3, [pc, #396]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0b8      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d020      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800297c:	4b59      	ldr	r3, [pc, #356]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	4a58      	ldr	r2, [pc, #352]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002986:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0308 	and.w	r3, r3, #8
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002994:	4b53      	ldr	r3, [pc, #332]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4a52      	ldr	r2, [pc, #328]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800299e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a0:	4b50      	ldr	r3, [pc, #320]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	494d      	ldr	r1, [pc, #308]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d044      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d107      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c6:	4b47      	ldr	r3, [pc, #284]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d119      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e07f      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d003      	beq.n	80029e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d107      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e6:	4b3f      	ldr	r3, [pc, #252]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e06f      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f6:	4b3b      	ldr	r3, [pc, #236]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e067      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a06:	4b37      	ldr	r3, [pc, #220]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f023 0203 	bic.w	r2, r3, #3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4934      	ldr	r1, [pc, #208]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a18:	f7fe fa60 	bl	8000edc <HAL_GetTick>
 8002a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a1e:	e00a      	b.n	8002a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a20:	f7fe fa5c 	bl	8000edc <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e04f      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a36:	4b2b      	ldr	r3, [pc, #172]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 020c 	and.w	r2, r3, #12
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d1eb      	bne.n	8002a20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a48:	4b25      	ldr	r3, [pc, #148]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d20c      	bcs.n	8002a70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a56:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5e:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e032      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d008      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a7c:	4b19      	ldr	r3, [pc, #100]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	4916      	ldr	r1, [pc, #88]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d009      	beq.n	8002aae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a9a:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	490e      	ldr	r1, [pc, #56]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aae:	f000 f821 	bl	8002af4 <HAL_RCC_GetSysClockFreq>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	490a      	ldr	r1, [pc, #40]	; (8002ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac0:	5ccb      	ldrb	r3, [r1, r3]
 8002ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac6:	4a09      	ldr	r2, [pc, #36]	; (8002aec <HAL_RCC_ClockConfig+0x1c4>)
 8002ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_RCC_ClockConfig+0x1c8>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe f8f6 	bl	8000cc0 <HAL_InitTick>

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40023c00 	.word	0x40023c00
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	08006f88 	.word	0x08006f88
 8002aec:	20000000 	.word	0x20000000
 8002af0:	20000004 	.word	0x20000004

08002af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002af8:	b094      	sub	sp, #80	; 0x50
 8002afa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	647b      	str	r3, [r7, #68]	; 0x44
 8002b00:	2300      	movs	r3, #0
 8002b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b04:	2300      	movs	r3, #0
 8002b06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b0c:	4b79      	ldr	r3, [pc, #484]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 030c 	and.w	r3, r3, #12
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d00d      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0x40>
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	f200 80e1 	bhi.w	8002ce0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <HAL_RCC_GetSysClockFreq+0x34>
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d003      	beq.n	8002b2e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b26:	e0db      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b28:	4b73      	ldr	r3, [pc, #460]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b2c:	e0db      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b2e:	4b73      	ldr	r3, [pc, #460]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x208>)
 8002b30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b32:	e0d8      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b34:	4b6f      	ldr	r3, [pc, #444]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b3e:	4b6d      	ldr	r3, [pc, #436]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d063      	beq.n	8002c12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b4a:	4b6a      	ldr	r3, [pc, #424]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	099b      	lsrs	r3, r3, #6
 8002b50:	2200      	movs	r2, #0
 8002b52:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b5c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b5e:	2300      	movs	r3, #0
 8002b60:	637b      	str	r3, [r7, #52]	; 0x34
 8002b62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b66:	4622      	mov	r2, r4
 8002b68:	462b      	mov	r3, r5
 8002b6a:	f04f 0000 	mov.w	r0, #0
 8002b6e:	f04f 0100 	mov.w	r1, #0
 8002b72:	0159      	lsls	r1, r3, #5
 8002b74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b78:	0150      	lsls	r0, r2, #5
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4621      	mov	r1, r4
 8002b80:	1a51      	subs	r1, r2, r1
 8002b82:	6139      	str	r1, [r7, #16]
 8002b84:	4629      	mov	r1, r5
 8002b86:	eb63 0301 	sbc.w	r3, r3, r1
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b98:	4659      	mov	r1, fp
 8002b9a:	018b      	lsls	r3, r1, #6
 8002b9c:	4651      	mov	r1, sl
 8002b9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ba2:	4651      	mov	r1, sl
 8002ba4:	018a      	lsls	r2, r1, #6
 8002ba6:	4651      	mov	r1, sl
 8002ba8:	ebb2 0801 	subs.w	r8, r2, r1
 8002bac:	4659      	mov	r1, fp
 8002bae:	eb63 0901 	sbc.w	r9, r3, r1
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bc6:	4690      	mov	r8, r2
 8002bc8:	4699      	mov	r9, r3
 8002bca:	4623      	mov	r3, r4
 8002bcc:	eb18 0303 	adds.w	r3, r8, r3
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	462b      	mov	r3, r5
 8002bd4:	eb49 0303 	adc.w	r3, r9, r3
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002be6:	4629      	mov	r1, r5
 8002be8:	024b      	lsls	r3, r1, #9
 8002bea:	4621      	mov	r1, r4
 8002bec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bf0:	4621      	mov	r1, r4
 8002bf2:	024a      	lsls	r2, r1, #9
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c04:	f7fd faec 	bl	80001e0 <__aeabi_uldivmod>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c10:	e058      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c12:	4b38      	ldr	r3, [pc, #224]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	099b      	lsrs	r3, r3, #6
 8002c18:	2200      	movs	r2, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c22:	623b      	str	r3, [r7, #32]
 8002c24:	2300      	movs	r3, #0
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
 8002c28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c2c:	4642      	mov	r2, r8
 8002c2e:	464b      	mov	r3, r9
 8002c30:	f04f 0000 	mov.w	r0, #0
 8002c34:	f04f 0100 	mov.w	r1, #0
 8002c38:	0159      	lsls	r1, r3, #5
 8002c3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c3e:	0150      	lsls	r0, r2, #5
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4641      	mov	r1, r8
 8002c46:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c4a:	4649      	mov	r1, r9
 8002c4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c64:	ebb2 040a 	subs.w	r4, r2, sl
 8002c68:	eb63 050b 	sbc.w	r5, r3, fp
 8002c6c:	f04f 0200 	mov.w	r2, #0
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	00eb      	lsls	r3, r5, #3
 8002c76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c7a:	00e2      	lsls	r2, r4, #3
 8002c7c:	4614      	mov	r4, r2
 8002c7e:	461d      	mov	r5, r3
 8002c80:	4643      	mov	r3, r8
 8002c82:	18e3      	adds	r3, r4, r3
 8002c84:	603b      	str	r3, [r7, #0]
 8002c86:	464b      	mov	r3, r9
 8002c88:	eb45 0303 	adc.w	r3, r5, r3
 8002c8c:	607b      	str	r3, [r7, #4]
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	028b      	lsls	r3, r1, #10
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ca4:	4621      	mov	r1, r4
 8002ca6:	028a      	lsls	r2, r1, #10
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cae:	2200      	movs	r2, #0
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	61fa      	str	r2, [r7, #28]
 8002cb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cb8:	f7fd fa92 	bl	80001e0 <__aeabi_uldivmod>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	0c1b      	lsrs	r3, r3, #16
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	3301      	adds	r3, #1
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002cd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cde:	e002      	b.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ce2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ce4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3750      	adds	r7, #80	; 0x50
 8002cec:	46bd      	mov	sp, r7
 8002cee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	00f42400 	.word	0x00f42400
 8002cfc:	007a1200 	.word	0x007a1200

08002d00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d04:	4b03      	ldr	r3, [pc, #12]	; (8002d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d06:	681b      	ldr	r3, [r3, #0]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	20000000 	.word	0x20000000

08002d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d1c:	f7ff fff0 	bl	8002d00 <HAL_RCC_GetHCLKFreq>
 8002d20:	4602      	mov	r2, r0
 8002d22:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	0a9b      	lsrs	r3, r3, #10
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	4903      	ldr	r1, [pc, #12]	; (8002d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d2e:	5ccb      	ldrb	r3, [r1, r3]
 8002d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	08006f98 	.word	0x08006f98

08002d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d44:	f7ff ffdc 	bl	8002d00 <HAL_RCC_GetHCLKFreq>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	0b5b      	lsrs	r3, r3, #13
 8002d50:	f003 0307 	and.w	r3, r3, #7
 8002d54:	4903      	ldr	r1, [pc, #12]	; (8002d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d56:	5ccb      	ldrb	r3, [r1, r3]
 8002d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40023800 	.word	0x40023800
 8002d64:	08006f98 	.word	0x08006f98

08002d68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	220f      	movs	r2, #15
 8002d76:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 0203 	and.w	r2, r3, #3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d84:	4b0f      	ldr	r3, [pc, #60]	; (8002dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d9c:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	08db      	lsrs	r3, r3, #3
 8002da2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002daa:	4b07      	ldr	r3, [pc, #28]	; (8002dc8 <HAL_RCC_GetClockConfig+0x60>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0207 	and.w	r2, r3, #7
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	601a      	str	r2, [r3, #0]
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40023c00 	.word	0x40023c00

08002dcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e041      	b.n	8002e62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f839 	bl	8002e6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3304      	adds	r3, #4
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	f000 f9ca 	bl	80031a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
	...

08002e80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d001      	beq.n	8002e98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e044      	b.n	8002f22 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1e      	ldr	r2, [pc, #120]	; (8002f30 <HAL_TIM_Base_Start_IT+0xb0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d018      	beq.n	8002eec <HAL_TIM_Base_Start_IT+0x6c>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec2:	d013      	beq.n	8002eec <HAL_TIM_Base_Start_IT+0x6c>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1a      	ldr	r2, [pc, #104]	; (8002f34 <HAL_TIM_Base_Start_IT+0xb4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00e      	beq.n	8002eec <HAL_TIM_Base_Start_IT+0x6c>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a19      	ldr	r2, [pc, #100]	; (8002f38 <HAL_TIM_Base_Start_IT+0xb8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d009      	beq.n	8002eec <HAL_TIM_Base_Start_IT+0x6c>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a17      	ldr	r2, [pc, #92]	; (8002f3c <HAL_TIM_Base_Start_IT+0xbc>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d004      	beq.n	8002eec <HAL_TIM_Base_Start_IT+0x6c>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a16      	ldr	r2, [pc, #88]	; (8002f40 <HAL_TIM_Base_Start_IT+0xc0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d111      	bne.n	8002f10 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b06      	cmp	r3, #6
 8002efc:	d010      	beq.n	8002f20 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f042 0201 	orr.w	r2, r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f0e:	e007      	b.n	8002f20 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40010000 	.word	0x40010000
 8002f34:	40000400 	.word	0x40000400
 8002f38:	40000800 	.word	0x40000800
 8002f3c:	40000c00 	.word	0x40000c00
 8002f40:	40014000 	.word	0x40014000

08002f44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d122      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d11b      	bne.n	8002fa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f06f 0202 	mvn.w	r2, #2
 8002f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f8ee 	bl	8003168 <HAL_TIM_IC_CaptureCallback>
 8002f8c:	e005      	b.n	8002f9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f000 f8e0 	bl	8003154 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f8f1 	bl	800317c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d122      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d11b      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f06f 0204 	mvn.w	r2, #4
 8002fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f8c4 	bl	8003168 <HAL_TIM_IC_CaptureCallback>
 8002fe0:	e005      	b.n	8002fee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f8b6 	bl	8003154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f8c7 	bl	800317c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f003 0308 	and.w	r3, r3, #8
 8002ffe:	2b08      	cmp	r3, #8
 8003000:	d122      	bne.n	8003048 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b08      	cmp	r3, #8
 800300e:	d11b      	bne.n	8003048 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0208 	mvn.w	r2, #8
 8003018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2204      	movs	r2, #4
 800301e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f89a 	bl	8003168 <HAL_TIM_IC_CaptureCallback>
 8003034:	e005      	b.n	8003042 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f88c 	bl	8003154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f89d 	bl	800317c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	2b10      	cmp	r3, #16
 8003054:	d122      	bne.n	800309c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f003 0310 	and.w	r3, r3, #16
 8003060:	2b10      	cmp	r3, #16
 8003062:	d11b      	bne.n	800309c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f06f 0210 	mvn.w	r2, #16
 800306c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2208      	movs	r2, #8
 8003072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f870 	bl	8003168 <HAL_TIM_IC_CaptureCallback>
 8003088:	e005      	b.n	8003096 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f862 	bl	8003154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f873 	bl	800317c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d10e      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d107      	bne.n	80030c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0201 	mvn.w	r2, #1
 80030c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fd fcf8 	bl	8000ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d2:	2b80      	cmp	r3, #128	; 0x80
 80030d4:	d10e      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e0:	2b80      	cmp	r3, #128	; 0x80
 80030e2:	d107      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f8e2 	bl	80032b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fe:	2b40      	cmp	r3, #64	; 0x40
 8003100:	d10e      	bne.n	8003120 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310c:	2b40      	cmp	r3, #64	; 0x40
 800310e:	d107      	bne.n	8003120 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f838 	bl	8003190 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0320 	and.w	r3, r3, #32
 800312a:	2b20      	cmp	r3, #32
 800312c:	d10e      	bne.n	800314c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0320 	and.w	r3, r3, #32
 8003138:	2b20      	cmp	r3, #32
 800313a:	d107      	bne.n	800314c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0220 	mvn.w	r2, #32
 8003144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f8ac 	bl	80032a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800314c:	bf00      	nop
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a34      	ldr	r2, [pc, #208]	; (8003288 <TIM_Base_SetConfig+0xe4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d00f      	beq.n	80031dc <TIM_Base_SetConfig+0x38>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c2:	d00b      	beq.n	80031dc <TIM_Base_SetConfig+0x38>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a31      	ldr	r2, [pc, #196]	; (800328c <TIM_Base_SetConfig+0xe8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d007      	beq.n	80031dc <TIM_Base_SetConfig+0x38>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a30      	ldr	r2, [pc, #192]	; (8003290 <TIM_Base_SetConfig+0xec>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d003      	beq.n	80031dc <TIM_Base_SetConfig+0x38>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a2f      	ldr	r2, [pc, #188]	; (8003294 <TIM_Base_SetConfig+0xf0>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d108      	bne.n	80031ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a25      	ldr	r2, [pc, #148]	; (8003288 <TIM_Base_SetConfig+0xe4>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d01b      	beq.n	800322e <TIM_Base_SetConfig+0x8a>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fc:	d017      	beq.n	800322e <TIM_Base_SetConfig+0x8a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a22      	ldr	r2, [pc, #136]	; (800328c <TIM_Base_SetConfig+0xe8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d013      	beq.n	800322e <TIM_Base_SetConfig+0x8a>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a21      	ldr	r2, [pc, #132]	; (8003290 <TIM_Base_SetConfig+0xec>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00f      	beq.n	800322e <TIM_Base_SetConfig+0x8a>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a20      	ldr	r2, [pc, #128]	; (8003294 <TIM_Base_SetConfig+0xf0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00b      	beq.n	800322e <TIM_Base_SetConfig+0x8a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a1f      	ldr	r2, [pc, #124]	; (8003298 <TIM_Base_SetConfig+0xf4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d007      	beq.n	800322e <TIM_Base_SetConfig+0x8a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a1e      	ldr	r2, [pc, #120]	; (800329c <TIM_Base_SetConfig+0xf8>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d003      	beq.n	800322e <TIM_Base_SetConfig+0x8a>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a1d      	ldr	r2, [pc, #116]	; (80032a0 <TIM_Base_SetConfig+0xfc>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d108      	bne.n	8003240 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4313      	orrs	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	4313      	orrs	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a08      	ldr	r2, [pc, #32]	; (8003288 <TIM_Base_SetConfig+0xe4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d103      	bne.n	8003274 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	615a      	str	r2, [r3, #20]
}
 800327a:	bf00      	nop
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40010000 	.word	0x40010000
 800328c:	40000400 	.word	0x40000400
 8003290:	40000800 	.word	0x40000800
 8003294:	40000c00 	.word	0x40000c00
 8003298:	40014000 	.word	0x40014000
 800329c:	40014400 	.word	0x40014400
 80032a0:	40014800 	.word	0x40014800

080032a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e03f      	b.n	800335e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7fd fc9c 	bl	8000c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2224      	movs	r2, #36	; 0x24
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800330e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f829 	bl	8003368 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	691a      	ldr	r2, [r3, #16]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003324:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695a      	ldr	r2, [r3, #20]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003334:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003344:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800336c:	b0c0      	sub	sp, #256	; 0x100
 800336e:	af00      	add	r7, sp, #0
 8003370:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003384:	68d9      	ldr	r1, [r3, #12]
 8003386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	ea40 0301 	orr.w	r3, r0, r1
 8003390:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	431a      	orrs	r2, r3
 80033a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	431a      	orrs	r2, r3
 80033a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80033b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033c0:	f021 010c 	bic.w	r1, r1, #12
 80033c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033ce:	430b      	orrs	r3, r1
 80033d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e2:	6999      	ldr	r1, [r3, #24]
 80033e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	ea40 0301 	orr.w	r3, r0, r1
 80033ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	4b8f      	ldr	r3, [pc, #572]	; (8003634 <UART_SetConfig+0x2cc>)
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d005      	beq.n	8003408 <UART_SetConfig+0xa0>
 80033fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	4b8d      	ldr	r3, [pc, #564]	; (8003638 <UART_SetConfig+0x2d0>)
 8003404:	429a      	cmp	r2, r3
 8003406:	d104      	bne.n	8003412 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003408:	f7ff fc9a 	bl	8002d40 <HAL_RCC_GetPCLK2Freq>
 800340c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003410:	e003      	b.n	800341a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003412:	f7ff fc81 	bl	8002d18 <HAL_RCC_GetPCLK1Freq>
 8003416:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800341a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003424:	f040 810c 	bne.w	8003640 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003428:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800342c:	2200      	movs	r2, #0
 800342e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003432:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003436:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800343a:	4622      	mov	r2, r4
 800343c:	462b      	mov	r3, r5
 800343e:	1891      	adds	r1, r2, r2
 8003440:	65b9      	str	r1, [r7, #88]	; 0x58
 8003442:	415b      	adcs	r3, r3
 8003444:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003446:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800344a:	4621      	mov	r1, r4
 800344c:	eb12 0801 	adds.w	r8, r2, r1
 8003450:	4629      	mov	r1, r5
 8003452:	eb43 0901 	adc.w	r9, r3, r1
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003462:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003466:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800346a:	4690      	mov	r8, r2
 800346c:	4699      	mov	r9, r3
 800346e:	4623      	mov	r3, r4
 8003470:	eb18 0303 	adds.w	r3, r8, r3
 8003474:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003478:	462b      	mov	r3, r5
 800347a:	eb49 0303 	adc.w	r3, r9, r3
 800347e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800348e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003492:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003496:	460b      	mov	r3, r1
 8003498:	18db      	adds	r3, r3, r3
 800349a:	653b      	str	r3, [r7, #80]	; 0x50
 800349c:	4613      	mov	r3, r2
 800349e:	eb42 0303 	adc.w	r3, r2, r3
 80034a2:	657b      	str	r3, [r7, #84]	; 0x54
 80034a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80034ac:	f7fc fe98 	bl	80001e0 <__aeabi_uldivmod>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4b61      	ldr	r3, [pc, #388]	; (800363c <UART_SetConfig+0x2d4>)
 80034b6:	fba3 2302 	umull	r2, r3, r3, r2
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	011c      	lsls	r4, r3, #4
 80034be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034c2:	2200      	movs	r2, #0
 80034c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80034c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80034cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80034d0:	4642      	mov	r2, r8
 80034d2:	464b      	mov	r3, r9
 80034d4:	1891      	adds	r1, r2, r2
 80034d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80034d8:	415b      	adcs	r3, r3
 80034da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80034e0:	4641      	mov	r1, r8
 80034e2:	eb12 0a01 	adds.w	sl, r2, r1
 80034e6:	4649      	mov	r1, r9
 80034e8:	eb43 0b01 	adc.w	fp, r3, r1
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003500:	4692      	mov	sl, r2
 8003502:	469b      	mov	fp, r3
 8003504:	4643      	mov	r3, r8
 8003506:	eb1a 0303 	adds.w	r3, sl, r3
 800350a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800350e:	464b      	mov	r3, r9
 8003510:	eb4b 0303 	adc.w	r3, fp, r3
 8003514:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003524:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003528:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800352c:	460b      	mov	r3, r1
 800352e:	18db      	adds	r3, r3, r3
 8003530:	643b      	str	r3, [r7, #64]	; 0x40
 8003532:	4613      	mov	r3, r2
 8003534:	eb42 0303 	adc.w	r3, r2, r3
 8003538:	647b      	str	r3, [r7, #68]	; 0x44
 800353a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800353e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003542:	f7fc fe4d 	bl	80001e0 <__aeabi_uldivmod>
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	4611      	mov	r1, r2
 800354c:	4b3b      	ldr	r3, [pc, #236]	; (800363c <UART_SetConfig+0x2d4>)
 800354e:	fba3 2301 	umull	r2, r3, r3, r1
 8003552:	095b      	lsrs	r3, r3, #5
 8003554:	2264      	movs	r2, #100	; 0x64
 8003556:	fb02 f303 	mul.w	r3, r2, r3
 800355a:	1acb      	subs	r3, r1, r3
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003562:	4b36      	ldr	r3, [pc, #216]	; (800363c <UART_SetConfig+0x2d4>)
 8003564:	fba3 2302 	umull	r2, r3, r3, r2
 8003568:	095b      	lsrs	r3, r3, #5
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003570:	441c      	add	r4, r3
 8003572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003576:	2200      	movs	r2, #0
 8003578:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800357c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003580:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003584:	4642      	mov	r2, r8
 8003586:	464b      	mov	r3, r9
 8003588:	1891      	adds	r1, r2, r2
 800358a:	63b9      	str	r1, [r7, #56]	; 0x38
 800358c:	415b      	adcs	r3, r3
 800358e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003590:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003594:	4641      	mov	r1, r8
 8003596:	1851      	adds	r1, r2, r1
 8003598:	6339      	str	r1, [r7, #48]	; 0x30
 800359a:	4649      	mov	r1, r9
 800359c:	414b      	adcs	r3, r1
 800359e:	637b      	str	r3, [r7, #52]	; 0x34
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80035ac:	4659      	mov	r1, fp
 80035ae:	00cb      	lsls	r3, r1, #3
 80035b0:	4651      	mov	r1, sl
 80035b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035b6:	4651      	mov	r1, sl
 80035b8:	00ca      	lsls	r2, r1, #3
 80035ba:	4610      	mov	r0, r2
 80035bc:	4619      	mov	r1, r3
 80035be:	4603      	mov	r3, r0
 80035c0:	4642      	mov	r2, r8
 80035c2:	189b      	adds	r3, r3, r2
 80035c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035c8:	464b      	mov	r3, r9
 80035ca:	460a      	mov	r2, r1
 80035cc:	eb42 0303 	adc.w	r3, r2, r3
 80035d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80035e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80035e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80035e8:	460b      	mov	r3, r1
 80035ea:	18db      	adds	r3, r3, r3
 80035ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ee:	4613      	mov	r3, r2
 80035f0:	eb42 0303 	adc.w	r3, r2, r3
 80035f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80035fe:	f7fc fdef 	bl	80001e0 <__aeabi_uldivmod>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4b0d      	ldr	r3, [pc, #52]	; (800363c <UART_SetConfig+0x2d4>)
 8003608:	fba3 1302 	umull	r1, r3, r3, r2
 800360c:	095b      	lsrs	r3, r3, #5
 800360e:	2164      	movs	r1, #100	; 0x64
 8003610:	fb01 f303 	mul.w	r3, r1, r3
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	3332      	adds	r3, #50	; 0x32
 800361a:	4a08      	ldr	r2, [pc, #32]	; (800363c <UART_SetConfig+0x2d4>)
 800361c:	fba2 2303 	umull	r2, r3, r2, r3
 8003620:	095b      	lsrs	r3, r3, #5
 8003622:	f003 0207 	and.w	r2, r3, #7
 8003626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4422      	add	r2, r4
 800362e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003630:	e106      	b.n	8003840 <UART_SetConfig+0x4d8>
 8003632:	bf00      	nop
 8003634:	40011000 	.word	0x40011000
 8003638:	40011400 	.word	0x40011400
 800363c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003640:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003644:	2200      	movs	r2, #0
 8003646:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800364a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800364e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003652:	4642      	mov	r2, r8
 8003654:	464b      	mov	r3, r9
 8003656:	1891      	adds	r1, r2, r2
 8003658:	6239      	str	r1, [r7, #32]
 800365a:	415b      	adcs	r3, r3
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
 800365e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003662:	4641      	mov	r1, r8
 8003664:	1854      	adds	r4, r2, r1
 8003666:	4649      	mov	r1, r9
 8003668:	eb43 0501 	adc.w	r5, r3, r1
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	00eb      	lsls	r3, r5, #3
 8003676:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800367a:	00e2      	lsls	r2, r4, #3
 800367c:	4614      	mov	r4, r2
 800367e:	461d      	mov	r5, r3
 8003680:	4643      	mov	r3, r8
 8003682:	18e3      	adds	r3, r4, r3
 8003684:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003688:	464b      	mov	r3, r9
 800368a:	eb45 0303 	adc.w	r3, r5, r3
 800368e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800369e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	f04f 0300 	mov.w	r3, #0
 80036aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80036ae:	4629      	mov	r1, r5
 80036b0:	008b      	lsls	r3, r1, #2
 80036b2:	4621      	mov	r1, r4
 80036b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036b8:	4621      	mov	r1, r4
 80036ba:	008a      	lsls	r2, r1, #2
 80036bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80036c0:	f7fc fd8e 	bl	80001e0 <__aeabi_uldivmod>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4b60      	ldr	r3, [pc, #384]	; (800384c <UART_SetConfig+0x4e4>)
 80036ca:	fba3 2302 	umull	r2, r3, r3, r2
 80036ce:	095b      	lsrs	r3, r3, #5
 80036d0:	011c      	lsls	r4, r3, #4
 80036d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036d6:	2200      	movs	r2, #0
 80036d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80036dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80036e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80036e4:	4642      	mov	r2, r8
 80036e6:	464b      	mov	r3, r9
 80036e8:	1891      	adds	r1, r2, r2
 80036ea:	61b9      	str	r1, [r7, #24]
 80036ec:	415b      	adcs	r3, r3
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036f4:	4641      	mov	r1, r8
 80036f6:	1851      	adds	r1, r2, r1
 80036f8:	6139      	str	r1, [r7, #16]
 80036fa:	4649      	mov	r1, r9
 80036fc:	414b      	adcs	r3, r1
 80036fe:	617b      	str	r3, [r7, #20]
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800370c:	4659      	mov	r1, fp
 800370e:	00cb      	lsls	r3, r1, #3
 8003710:	4651      	mov	r1, sl
 8003712:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003716:	4651      	mov	r1, sl
 8003718:	00ca      	lsls	r2, r1, #3
 800371a:	4610      	mov	r0, r2
 800371c:	4619      	mov	r1, r3
 800371e:	4603      	mov	r3, r0
 8003720:	4642      	mov	r2, r8
 8003722:	189b      	adds	r3, r3, r2
 8003724:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003728:	464b      	mov	r3, r9
 800372a:	460a      	mov	r2, r1
 800372c:	eb42 0303 	adc.w	r3, r2, r3
 8003730:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	67bb      	str	r3, [r7, #120]	; 0x78
 800373e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003740:	f04f 0200 	mov.w	r2, #0
 8003744:	f04f 0300 	mov.w	r3, #0
 8003748:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800374c:	4649      	mov	r1, r9
 800374e:	008b      	lsls	r3, r1, #2
 8003750:	4641      	mov	r1, r8
 8003752:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003756:	4641      	mov	r1, r8
 8003758:	008a      	lsls	r2, r1, #2
 800375a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800375e:	f7fc fd3f 	bl	80001e0 <__aeabi_uldivmod>
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	4611      	mov	r1, r2
 8003768:	4b38      	ldr	r3, [pc, #224]	; (800384c <UART_SetConfig+0x4e4>)
 800376a:	fba3 2301 	umull	r2, r3, r3, r1
 800376e:	095b      	lsrs	r3, r3, #5
 8003770:	2264      	movs	r2, #100	; 0x64
 8003772:	fb02 f303 	mul.w	r3, r2, r3
 8003776:	1acb      	subs	r3, r1, r3
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	3332      	adds	r3, #50	; 0x32
 800377c:	4a33      	ldr	r2, [pc, #204]	; (800384c <UART_SetConfig+0x4e4>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	095b      	lsrs	r3, r3, #5
 8003784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003788:	441c      	add	r4, r3
 800378a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800378e:	2200      	movs	r2, #0
 8003790:	673b      	str	r3, [r7, #112]	; 0x70
 8003792:	677a      	str	r2, [r7, #116]	; 0x74
 8003794:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003798:	4642      	mov	r2, r8
 800379a:	464b      	mov	r3, r9
 800379c:	1891      	adds	r1, r2, r2
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	415b      	adcs	r3, r3
 80037a2:	60fb      	str	r3, [r7, #12]
 80037a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037a8:	4641      	mov	r1, r8
 80037aa:	1851      	adds	r1, r2, r1
 80037ac:	6039      	str	r1, [r7, #0]
 80037ae:	4649      	mov	r1, r9
 80037b0:	414b      	adcs	r3, r1
 80037b2:	607b      	str	r3, [r7, #4]
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80037c0:	4659      	mov	r1, fp
 80037c2:	00cb      	lsls	r3, r1, #3
 80037c4:	4651      	mov	r1, sl
 80037c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037ca:	4651      	mov	r1, sl
 80037cc:	00ca      	lsls	r2, r1, #3
 80037ce:	4610      	mov	r0, r2
 80037d0:	4619      	mov	r1, r3
 80037d2:	4603      	mov	r3, r0
 80037d4:	4642      	mov	r2, r8
 80037d6:	189b      	adds	r3, r3, r2
 80037d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80037da:	464b      	mov	r3, r9
 80037dc:	460a      	mov	r2, r1
 80037de:	eb42 0303 	adc.w	r3, r2, r3
 80037e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	663b      	str	r3, [r7, #96]	; 0x60
 80037ee:	667a      	str	r2, [r7, #100]	; 0x64
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	f04f 0300 	mov.w	r3, #0
 80037f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80037fc:	4649      	mov	r1, r9
 80037fe:	008b      	lsls	r3, r1, #2
 8003800:	4641      	mov	r1, r8
 8003802:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003806:	4641      	mov	r1, r8
 8003808:	008a      	lsls	r2, r1, #2
 800380a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800380e:	f7fc fce7 	bl	80001e0 <__aeabi_uldivmod>
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	4b0d      	ldr	r3, [pc, #52]	; (800384c <UART_SetConfig+0x4e4>)
 8003818:	fba3 1302 	umull	r1, r3, r3, r2
 800381c:	095b      	lsrs	r3, r3, #5
 800381e:	2164      	movs	r1, #100	; 0x64
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	3332      	adds	r3, #50	; 0x32
 800382a:	4a08      	ldr	r2, [pc, #32]	; (800384c <UART_SetConfig+0x4e4>)
 800382c:	fba2 2303 	umull	r2, r3, r2, r3
 8003830:	095b      	lsrs	r3, r3, #5
 8003832:	f003 020f 	and.w	r2, r3, #15
 8003836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4422      	add	r2, r4
 800383e:	609a      	str	r2, [r3, #8]
}
 8003840:	bf00      	nop
 8003842:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003846:	46bd      	mov	sp, r7
 8003848:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800384c:	51eb851f 	.word	0x51eb851f

08003850 <__NVIC_SetPriority>:
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	6039      	str	r1, [r7, #0]
 800385a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800385c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003860:	2b00      	cmp	r3, #0
 8003862:	db0a      	blt.n	800387a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	b2da      	uxtb	r2, r3
 8003868:	490c      	ldr	r1, [pc, #48]	; (800389c <__NVIC_SetPriority+0x4c>)
 800386a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386e:	0112      	lsls	r2, r2, #4
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	440b      	add	r3, r1
 8003874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003878:	e00a      	b.n	8003890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	b2da      	uxtb	r2, r3
 800387e:	4908      	ldr	r1, [pc, #32]	; (80038a0 <__NVIC_SetPriority+0x50>)
 8003880:	79fb      	ldrb	r3, [r7, #7]
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	3b04      	subs	r3, #4
 8003888:	0112      	lsls	r2, r2, #4
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	440b      	add	r3, r1
 800388e:	761a      	strb	r2, [r3, #24]
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	e000e100 	.word	0xe000e100
 80038a0:	e000ed00 	.word	0xe000ed00

080038a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80038a8:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <SysTick_Handler+0x1c>)
 80038aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80038ac:	f002 f976 	bl	8005b9c <xTaskGetSchedulerState>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d001      	beq.n	80038ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80038b6:	f003 f85f 	bl	8006978 <xPortSysTickHandler>
  }
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	e000e010 	.word	0xe000e010

080038c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80038c8:	2100      	movs	r1, #0
 80038ca:	f06f 0004 	mvn.w	r0, #4
 80038ce:	f7ff ffbf 	bl	8003850 <__NVIC_SetPriority>
#endif
}
 80038d2:	bf00      	nop
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038de:	f3ef 8305 	mrs	r3, IPSR
 80038e2:	603b      	str	r3, [r7, #0]
  return(result);
 80038e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80038ea:	f06f 0305 	mvn.w	r3, #5
 80038ee:	607b      	str	r3, [r7, #4]
 80038f0:	e00c      	b.n	800390c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80038f2:	4b0a      	ldr	r3, [pc, #40]	; (800391c <osKernelInitialize+0x44>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d105      	bne.n	8003906 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80038fa:	4b08      	ldr	r3, [pc, #32]	; (800391c <osKernelInitialize+0x44>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003900:	2300      	movs	r3, #0
 8003902:	607b      	str	r3, [r7, #4]
 8003904:	e002      	b.n	800390c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003906:	f04f 33ff 	mov.w	r3, #4294967295
 800390a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800390c:	687b      	ldr	r3, [r7, #4]
}
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	2000017c 	.word	0x2000017c

08003920 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003926:	f3ef 8305 	mrs	r3, IPSR
 800392a:	603b      	str	r3, [r7, #0]
  return(result);
 800392c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003932:	f06f 0305 	mvn.w	r3, #5
 8003936:	607b      	str	r3, [r7, #4]
 8003938:	e010      	b.n	800395c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800393a:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <osKernelStart+0x48>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d109      	bne.n	8003956 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003942:	f7ff ffbf 	bl	80038c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003946:	4b08      	ldr	r3, [pc, #32]	; (8003968 <osKernelStart+0x48>)
 8003948:	2202      	movs	r2, #2
 800394a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800394c:	f001 fcd6 	bl	80052fc <vTaskStartScheduler>
      stat = osOK;
 8003950:	2300      	movs	r3, #0
 8003952:	607b      	str	r3, [r7, #4]
 8003954:	e002      	b.n	800395c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003956:	f04f 33ff 	mov.w	r3, #4294967295
 800395a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800395c:	687b      	ldr	r3, [r7, #4]
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	2000017c 	.word	0x2000017c

0800396c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800396c:	b580      	push	{r7, lr}
 800396e:	b08e      	sub	sp, #56	; 0x38
 8003970:	af04      	add	r7, sp, #16
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003978:	2300      	movs	r3, #0
 800397a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800397c:	f3ef 8305 	mrs	r3, IPSR
 8003980:	617b      	str	r3, [r7, #20]
  return(result);
 8003982:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003984:	2b00      	cmp	r3, #0
 8003986:	d17e      	bne.n	8003a86 <osThreadNew+0x11a>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d07b      	beq.n	8003a86 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800398e:	2380      	movs	r3, #128	; 0x80
 8003990:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003992:	2318      	movs	r3, #24
 8003994:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003996:	2300      	movs	r3, #0
 8003998:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800399a:	f04f 33ff 	mov.w	r3, #4294967295
 800399e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d045      	beq.n	8003a32 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <osThreadNew+0x48>
        name = attr->name;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <osThreadNew+0x6e>
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	2b38      	cmp	r3, #56	; 0x38
 80039cc:	d805      	bhi.n	80039da <osThreadNew+0x6e>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <osThreadNew+0x72>
        return (NULL);
 80039da:	2300      	movs	r3, #0
 80039dc:	e054      	b.n	8003a88 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	089b      	lsrs	r3, r3, #2
 80039ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00e      	beq.n	8003a14 <osThreadNew+0xa8>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	2b5b      	cmp	r3, #91	; 0x5b
 80039fc:	d90a      	bls.n	8003a14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d006      	beq.n	8003a14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <osThreadNew+0xa8>
        mem = 1;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	61bb      	str	r3, [r7, #24]
 8003a12:	e010      	b.n	8003a36 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10c      	bne.n	8003a36 <osThreadNew+0xca>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d108      	bne.n	8003a36 <osThreadNew+0xca>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d104      	bne.n	8003a36 <osThreadNew+0xca>
          mem = 0;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61bb      	str	r3, [r7, #24]
 8003a30:	e001      	b.n	8003a36 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d110      	bne.n	8003a5e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a44:	9202      	str	r2, [sp, #8]
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	6a3a      	ldr	r2, [r7, #32]
 8003a50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f001 fa32 	bl	8004ebc <xTaskCreateStatic>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	613b      	str	r3, [r7, #16]
 8003a5c:	e013      	b.n	8003a86 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d110      	bne.n	8003a86 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	f107 0310 	add.w	r3, r7, #16
 8003a6c:	9301      	str	r3, [sp, #4]
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f001 fa7d 	bl	8004f76 <xTaskCreate>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d001      	beq.n	8003a86 <osThreadNew+0x11a>
            hTask = NULL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003a86:	693b      	ldr	r3, [r7, #16]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3728      	adds	r7, #40	; 0x28
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08a      	sub	sp, #40	; 0x28
 8003a94:	af02      	add	r7, sp, #8
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003aa0:	f3ef 8305 	mrs	r3, IPSR
 8003aa4:	613b      	str	r3, [r7, #16]
  return(result);
 8003aa6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d175      	bne.n	8003b98 <osSemaphoreNew+0x108>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d072      	beq.n	8003b98 <osSemaphoreNew+0x108>
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d86e      	bhi.n	8003b98 <osSemaphoreNew+0x108>
    mem = -1;
 8003aba:	f04f 33ff 	mov.w	r3, #4294967295
 8003abe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d015      	beq.n	8003af2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d006      	beq.n	8003adc <osSemaphoreNew+0x4c>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	2b4f      	cmp	r3, #79	; 0x4f
 8003ad4:	d902      	bls.n	8003adc <osSemaphoreNew+0x4c>
        mem = 1;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	61bb      	str	r3, [r7, #24]
 8003ada:	e00c      	b.n	8003af6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d108      	bne.n	8003af6 <osSemaphoreNew+0x66>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d104      	bne.n	8003af6 <osSemaphoreNew+0x66>
          mem = 0;
 8003aec:	2300      	movs	r3, #0
 8003aee:	61bb      	str	r3, [r7, #24]
 8003af0:	e001      	b.n	8003af6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afc:	d04c      	beq.n	8003b98 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d128      	bne.n	8003b56 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d10a      	bne.n	8003b20 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2203      	movs	r2, #3
 8003b10:	9200      	str	r2, [sp, #0]
 8003b12:	2200      	movs	r2, #0
 8003b14:	2100      	movs	r1, #0
 8003b16:	2001      	movs	r0, #1
 8003b18:	f000 fa2a 	bl	8003f70 <xQueueGenericCreateStatic>
 8003b1c:	61f8      	str	r0, [r7, #28]
 8003b1e:	e005      	b.n	8003b2c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003b20:	2203      	movs	r2, #3
 8003b22:	2100      	movs	r1, #0
 8003b24:	2001      	movs	r0, #1
 8003b26:	f000 fa9b 	bl	8004060 <xQueueGenericCreate>
 8003b2a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d022      	beq.n	8003b78 <osSemaphoreNew+0xe8>
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d01f      	beq.n	8003b78 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003b38:	2300      	movs	r3, #0
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	69f8      	ldr	r0, [r7, #28]
 8003b40:	f000 fb56 	bl	80041f0 <xQueueGenericSend>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d016      	beq.n	8003b78 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003b4a:	69f8      	ldr	r0, [r7, #28]
 8003b4c:	f000 ffe2 	bl	8004b14 <vQueueDelete>
            hSemaphore = NULL;
 8003b50:	2300      	movs	r3, #0
 8003b52:	61fb      	str	r3, [r7, #28]
 8003b54:	e010      	b.n	8003b78 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d108      	bne.n	8003b6e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	461a      	mov	r2, r3
 8003b62:	68b9      	ldr	r1, [r7, #8]
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 fad8 	bl	800411a <xQueueCreateCountingSemaphoreStatic>
 8003b6a:	61f8      	str	r0, [r7, #28]
 8003b6c:	e004      	b.n	8003b78 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003b6e:	68b9      	ldr	r1, [r7, #8]
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 fb09 	bl	8004188 <xQueueCreateCountingSemaphore>
 8003b76:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00c      	beq.n	8003b98 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <osSemaphoreNew+0xfc>
          name = attr->name;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	e001      	b.n	8003b90 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003b90:	6979      	ldr	r1, [r7, #20]
 8003b92:	69f8      	ldr	r0, [r7, #28]
 8003b94:	f001 f90a 	bl	8004dac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003b98:	69fb      	ldr	r3, [r7, #28]
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3720      	adds	r7, #32
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
	...

08003ba4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d103      	bne.n	8003bc4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003bbc:	f06f 0303 	mvn.w	r3, #3
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	e039      	b.n	8003c38 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bc4:	f3ef 8305 	mrs	r3, IPSR
 8003bc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003bca:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d022      	beq.n	8003c16 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8003bd6:	f06f 0303 	mvn.w	r3, #3
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	e02c      	b.n	8003c38 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003bde:	2300      	movs	r3, #0
 8003be0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003be2:	f107 0308 	add.w	r3, r7, #8
 8003be6:	461a      	mov	r2, r3
 8003be8:	2100      	movs	r1, #0
 8003bea:	6938      	ldr	r0, [r7, #16]
 8003bec:	f000 ff12 	bl	8004a14 <xQueueReceiveFromISR>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d003      	beq.n	8003bfe <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8003bf6:	f06f 0302 	mvn.w	r3, #2
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	e01c      	b.n	8003c38 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d019      	beq.n	8003c38 <osSemaphoreAcquire+0x94>
 8003c04:	4b0f      	ldr	r3, [pc, #60]	; (8003c44 <osSemaphoreAcquire+0xa0>)
 8003c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	e010      	b.n	8003c38 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003c16:	6839      	ldr	r1, [r7, #0]
 8003c18:	6938      	ldr	r0, [r7, #16]
 8003c1a:	f000 fdef 	bl	80047fc <xQueueSemaphoreTake>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d009      	beq.n	8003c38 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8003c2a:	f06f 0301 	mvn.w	r3, #1
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	e002      	b.n	8003c38 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8003c32:	f06f 0302 	mvn.w	r3, #2
 8003c36:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003c38:	697b      	ldr	r3, [r7, #20]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	e000ed04 	.word	0xe000ed04

08003c48 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d103      	bne.n	8003c66 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003c5e:	f06f 0303 	mvn.w	r3, #3
 8003c62:	617b      	str	r3, [r7, #20]
 8003c64:	e02c      	b.n	8003cc0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c66:	f3ef 8305 	mrs	r3, IPSR
 8003c6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d01a      	beq.n	8003ca8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8003c72:	2300      	movs	r3, #0
 8003c74:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003c76:	f107 0308 	add.w	r3, r7, #8
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	6938      	ldr	r0, [r7, #16]
 8003c7e:	f000 fc50 	bl	8004522 <xQueueGiveFromISR>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d003      	beq.n	8003c90 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8003c88:	f06f 0302 	mvn.w	r3, #2
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	e017      	b.n	8003cc0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d014      	beq.n	8003cc0 <osSemaphoreRelease+0x78>
 8003c96:	4b0d      	ldr	r3, [pc, #52]	; (8003ccc <osSemaphoreRelease+0x84>)
 8003c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	e00b      	b.n	8003cc0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003ca8:	2300      	movs	r3, #0
 8003caa:	2200      	movs	r2, #0
 8003cac:	2100      	movs	r1, #0
 8003cae:	6938      	ldr	r0, [r7, #16]
 8003cb0:	f000 fa9e 	bl	80041f0 <xQueueGenericSend>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d002      	beq.n	8003cc0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8003cba:	f06f 0302 	mvn.w	r3, #2
 8003cbe:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003cc0:	697b      	ldr	r3, [r7, #20]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	e000ed04 	.word	0xe000ed04

08003cd0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4a07      	ldr	r2, [pc, #28]	; (8003cfc <vApplicationGetIdleTaskMemory+0x2c>)
 8003ce0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	4a06      	ldr	r2, [pc, #24]	; (8003d00 <vApplicationGetIdleTaskMemory+0x30>)
 8003ce6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2280      	movs	r2, #128	; 0x80
 8003cec:	601a      	str	r2, [r3, #0]
}
 8003cee:	bf00      	nop
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	20000180 	.word	0x20000180
 8003d00:	200001dc 	.word	0x200001dc

08003d04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4a07      	ldr	r2, [pc, #28]	; (8003d30 <vApplicationGetTimerTaskMemory+0x2c>)
 8003d14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	4a06      	ldr	r2, [pc, #24]	; (8003d34 <vApplicationGetTimerTaskMemory+0x30>)
 8003d1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d22:	601a      	str	r2, [r3, #0]
}
 8003d24:	bf00      	nop
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	200003dc 	.word	0x200003dc
 8003d34:	20000438 	.word	0x20000438

08003d38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f103 0208 	add.w	r2, r3, #8
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f103 0208 	add.w	r2, r3, #8
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f103 0208 	add.w	r2, r3, #8
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d92:	b480      	push	{r7}
 8003d94:	b085      	sub	sp, #20
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	683a      	ldr	r2, [r7, #0]
 8003db6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	1c5a      	adds	r2, r3, #1
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	601a      	str	r2, [r3, #0]
}
 8003dce:	bf00      	nop
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b085      	sub	sp, #20
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df0:	d103      	bne.n	8003dfa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	e00c      	b.n	8003e14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3308      	adds	r3, #8
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	e002      	b.n	8003e08 <vListInsert+0x2e>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d2f6      	bcs.n	8003e02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	601a      	str	r2, [r3, #0]
}
 8003e40:	bf00      	nop
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6892      	ldr	r2, [r2, #8]
 8003e62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6852      	ldr	r2, [r2, #4]
 8003e6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d103      	bne.n	8003e80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	1e5a      	subs	r2, r3, #1
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10a      	bne.n	8003eca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ec6:	bf00      	nop
 8003ec8:	e7fe      	b.n	8003ec8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003eca:	f002 fcc3 	bl	8006854 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed6:	68f9      	ldr	r1, [r7, #12]
 8003ed8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003eda:	fb01 f303 	mul.w	r3, r1, r3
 8003ede:	441a      	add	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efa:	3b01      	subs	r3, #1
 8003efc:	68f9      	ldr	r1, [r7, #12]
 8003efe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f00:	fb01 f303 	mul.w	r3, r1, r3
 8003f04:	441a      	add	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	22ff      	movs	r2, #255	; 0xff
 8003f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	22ff      	movs	r2, #255	; 0xff
 8003f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d114      	bne.n	8003f4a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d01a      	beq.n	8003f5e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	3310      	adds	r3, #16
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f001 fc77 	bl	8005820 <xTaskRemoveFromEventList>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d012      	beq.n	8003f5e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f38:	4b0c      	ldr	r3, [pc, #48]	; (8003f6c <xQueueGenericReset+0xcc>)
 8003f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	f3bf 8f6f 	isb	sy
 8003f48:	e009      	b.n	8003f5e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	3310      	adds	r3, #16
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7ff fef2 	bl	8003d38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	3324      	adds	r3, #36	; 0x24
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7ff feed 	bl	8003d38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f5e:	f002 fca9 	bl	80068b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f62:	2301      	movs	r3, #1
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	e000ed04 	.word	0xe000ed04

08003f70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08e      	sub	sp, #56	; 0x38
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10a      	bne.n	8003f9a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f96:	bf00      	nop
 8003f98:	e7fe      	b.n	8003f98 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10a      	bne.n	8003fb6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003fb2:	bf00      	nop
 8003fb4:	e7fe      	b.n	8003fb4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d002      	beq.n	8003fc2 <xQueueGenericCreateStatic+0x52>
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <xQueueGenericCreateStatic+0x56>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <xQueueGenericCreateStatic+0x58>
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10a      	bne.n	8003fe2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd0:	f383 8811 	msr	BASEPRI, r3
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	623b      	str	r3, [r7, #32]
}
 8003fde:	bf00      	nop
 8003fe0:	e7fe      	b.n	8003fe0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d102      	bne.n	8003fee <xQueueGenericCreateStatic+0x7e>
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <xQueueGenericCreateStatic+0x82>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <xQueueGenericCreateStatic+0x84>
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10a      	bne.n	800400e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffc:	f383 8811 	msr	BASEPRI, r3
 8004000:	f3bf 8f6f 	isb	sy
 8004004:	f3bf 8f4f 	dsb	sy
 8004008:	61fb      	str	r3, [r7, #28]
}
 800400a:	bf00      	nop
 800400c:	e7fe      	b.n	800400c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800400e:	2350      	movs	r3, #80	; 0x50
 8004010:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2b50      	cmp	r3, #80	; 0x50
 8004016:	d00a      	beq.n	800402e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	61bb      	str	r3, [r7, #24]
}
 800402a:	bf00      	nop
 800402c:	e7fe      	b.n	800402c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800402e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00d      	beq.n	8004056 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800403a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004042:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	4613      	mov	r3, r2
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	68b9      	ldr	r1, [r7, #8]
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 f83f 	bl	80040d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004058:	4618      	mov	r0, r3
 800405a:	3730      	adds	r7, #48	; 0x30
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08a      	sub	sp, #40	; 0x28
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	4613      	mov	r3, r2
 800406c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10a      	bne.n	800408a <xQueueGenericCreate+0x2a>
	__asm volatile
 8004074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004078:	f383 8811 	msr	BASEPRI, r3
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	613b      	str	r3, [r7, #16]
}
 8004086:	bf00      	nop
 8004088:	e7fe      	b.n	8004088 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	fb02 f303 	mul.w	r3, r2, r3
 8004092:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	3350      	adds	r3, #80	; 0x50
 8004098:	4618      	mov	r0, r3
 800409a:	f002 fcfd 	bl	8006a98 <pvPortMalloc>
 800409e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d011      	beq.n	80040ca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	3350      	adds	r3, #80	; 0x50
 80040ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040b8:	79fa      	ldrb	r2, [r7, #7]
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	4613      	mov	r3, r2
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	68b9      	ldr	r1, [r7, #8]
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f805 	bl	80040d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80040ca:	69bb      	ldr	r3, [r7, #24]
	}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3720      	adds	r7, #32
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
 80040e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d103      	bne.n	80040f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	69ba      	ldr	r2, [r7, #24]
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	e002      	b.n	80040f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004102:	2101      	movs	r1, #1
 8004104:	69b8      	ldr	r0, [r7, #24]
 8004106:	f7ff fecb 	bl	8003ea0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	78fa      	ldrb	r2, [r7, #3]
 800410e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004112:	bf00      	nop
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800411a:	b580      	push	{r7, lr}
 800411c:	b08a      	sub	sp, #40	; 0x28
 800411e:	af02      	add	r7, sp, #8
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	60b9      	str	r1, [r7, #8]
 8004124:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10a      	bne.n	8004142 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800412c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	61bb      	str	r3, [r7, #24]
}
 800413e:	bf00      	nop
 8004140:	e7fe      	b.n	8004140 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	429a      	cmp	r2, r3
 8004148:	d90a      	bls.n	8004160 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800414a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414e:	f383 8811 	msr	BASEPRI, r3
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	f3bf 8f4f 	dsb	sy
 800415a:	617b      	str	r3, [r7, #20]
}
 800415c:	bf00      	nop
 800415e:	e7fe      	b.n	800415e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004160:	2302      	movs	r3, #2
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	2100      	movs	r1, #0
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f7ff ff00 	bl	8003f70 <xQueueGenericCreateStatic>
 8004170:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800417e:	69fb      	ldr	r3, [r7, #28]
	}
 8004180:	4618      	mov	r0, r3
 8004182:	3720      	adds	r7, #32
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10a      	bne.n	80041ae <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419c:	f383 8811 	msr	BASEPRI, r3
 80041a0:	f3bf 8f6f 	isb	sy
 80041a4:	f3bf 8f4f 	dsb	sy
 80041a8:	613b      	str	r3, [r7, #16]
}
 80041aa:	bf00      	nop
 80041ac:	e7fe      	b.n	80041ac <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d90a      	bls.n	80041cc <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80041b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ba:	f383 8811 	msr	BASEPRI, r3
 80041be:	f3bf 8f6f 	isb	sy
 80041c2:	f3bf 8f4f 	dsb	sy
 80041c6:	60fb      	str	r3, [r7, #12]
}
 80041c8:	bf00      	nop
 80041ca:	e7fe      	b.n	80041ca <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80041cc:	2202      	movs	r2, #2
 80041ce:	2100      	movs	r1, #0
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff ff45 	bl	8004060 <xQueueGenericCreate>
 80041d6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d002      	beq.n	80041e4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80041e4:	697b      	ldr	r3, [r7, #20]
	}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08e      	sub	sp, #56	; 0x38
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80041fe:	2300      	movs	r3, #0
 8004200:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10a      	bne.n	8004222 <xQueueGenericSend+0x32>
	__asm volatile
 800420c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800421e:	bf00      	nop
 8004220:	e7fe      	b.n	8004220 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d103      	bne.n	8004230 <xQueueGenericSend+0x40>
 8004228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <xQueueGenericSend+0x44>
 8004230:	2301      	movs	r3, #1
 8004232:	e000      	b.n	8004236 <xQueueGenericSend+0x46>
 8004234:	2300      	movs	r3, #0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10a      	bne.n	8004250 <xQueueGenericSend+0x60>
	__asm volatile
 800423a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423e:	f383 8811 	msr	BASEPRI, r3
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800424c:	bf00      	nop
 800424e:	e7fe      	b.n	800424e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2b02      	cmp	r3, #2
 8004254:	d103      	bne.n	800425e <xQueueGenericSend+0x6e>
 8004256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <xQueueGenericSend+0x72>
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <xQueueGenericSend+0x74>
 8004262:	2300      	movs	r3, #0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10a      	bne.n	800427e <xQueueGenericSend+0x8e>
	__asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	623b      	str	r3, [r7, #32]
}
 800427a:	bf00      	nop
 800427c:	e7fe      	b.n	800427c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800427e:	f001 fc8d 	bl	8005b9c <xTaskGetSchedulerState>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d102      	bne.n	800428e <xQueueGenericSend+0x9e>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <xQueueGenericSend+0xa2>
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <xQueueGenericSend+0xa4>
 8004292:	2300      	movs	r3, #0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10a      	bne.n	80042ae <xQueueGenericSend+0xbe>
	__asm volatile
 8004298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	61fb      	str	r3, [r7, #28]
}
 80042aa:	bf00      	nop
 80042ac:	e7fe      	b.n	80042ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042ae:	f002 fad1 	bl	8006854 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d302      	bcc.n	80042c4 <xQueueGenericSend+0xd4>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d129      	bne.n	8004318 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	68b9      	ldr	r1, [r7, #8]
 80042c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042ca:	f000 fc5e 	bl	8004b8a <prvCopyDataToQueue>
 80042ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d010      	beq.n	80042fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	3324      	adds	r3, #36	; 0x24
 80042dc:	4618      	mov	r0, r3
 80042de:	f001 fa9f 	bl	8005820 <xTaskRemoveFromEventList>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d013      	beq.n	8004310 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80042e8:	4b3f      	ldr	r3, [pc, #252]	; (80043e8 <xQueueGenericSend+0x1f8>)
 80042ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	e00a      	b.n	8004310 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80042fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d007      	beq.n	8004310 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004300:	4b39      	ldr	r3, [pc, #228]	; (80043e8 <xQueueGenericSend+0x1f8>)
 8004302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004306:	601a      	str	r2, [r3, #0]
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004310:	f002 fad0 	bl	80068b4 <vPortExitCritical>
				return pdPASS;
 8004314:	2301      	movs	r3, #1
 8004316:	e063      	b.n	80043e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d103      	bne.n	8004326 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800431e:	f002 fac9 	bl	80068b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004322:	2300      	movs	r3, #0
 8004324:	e05c      	b.n	80043e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004328:	2b00      	cmp	r3, #0
 800432a:	d106      	bne.n	800433a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800432c:	f107 0314 	add.w	r3, r7, #20
 8004330:	4618      	mov	r0, r3
 8004332:	f001 fad9 	bl	80058e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004336:	2301      	movs	r3, #1
 8004338:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800433a:	f002 fabb 	bl	80068b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800433e:	f001 f843 	bl	80053c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004342:	f002 fa87 	bl	8006854 <vPortEnterCritical>
 8004346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004348:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800434c:	b25b      	sxtb	r3, r3
 800434e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004352:	d103      	bne.n	800435c <xQueueGenericSend+0x16c>
 8004354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004362:	b25b      	sxtb	r3, r3
 8004364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004368:	d103      	bne.n	8004372 <xQueueGenericSend+0x182>
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004372:	f002 fa9f 	bl	80068b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004376:	1d3a      	adds	r2, r7, #4
 8004378:	f107 0314 	add.w	r3, r7, #20
 800437c:	4611      	mov	r1, r2
 800437e:	4618      	mov	r0, r3
 8004380:	f001 fac8 	bl	8005914 <xTaskCheckForTimeOut>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d124      	bne.n	80043d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800438a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800438c:	f000 fcf5 	bl	8004d7a <prvIsQueueFull>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d018      	beq.n	80043c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	3310      	adds	r3, #16
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	4611      	mov	r1, r2
 800439e:	4618      	mov	r0, r3
 80043a0:	f001 f9ee 	bl	8005780 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80043a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043a6:	f000 fc80 	bl	8004caa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80043aa:	f001 f81b 	bl	80053e4 <xTaskResumeAll>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f47f af7c 	bne.w	80042ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80043b6:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <xQueueGenericSend+0x1f8>)
 80043b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	e772      	b.n	80042ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80043c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043ca:	f000 fc6e 	bl	8004caa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043ce:	f001 f809 	bl	80053e4 <xTaskResumeAll>
 80043d2:	e76c      	b.n	80042ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80043d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043d6:	f000 fc68 	bl	8004caa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043da:	f001 f803 	bl	80053e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80043de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3738      	adds	r7, #56	; 0x38
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	e000ed04 	.word	0xe000ed04

080043ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b090      	sub	sp, #64	; 0x40
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80043fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10a      	bne.n	800441a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004416:	bf00      	nop
 8004418:	e7fe      	b.n	8004418 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d103      	bne.n	8004428 <xQueueGenericSendFromISR+0x3c>
 8004420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <xQueueGenericSendFromISR+0x40>
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <xQueueGenericSendFromISR+0x42>
 800442c:	2300      	movs	r3, #0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10a      	bne.n	8004448 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004444:	bf00      	nop
 8004446:	e7fe      	b.n	8004446 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d103      	bne.n	8004456 <xQueueGenericSendFromISR+0x6a>
 800444e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <xQueueGenericSendFromISR+0x6e>
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <xQueueGenericSendFromISR+0x70>
 800445a:	2300      	movs	r3, #0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10a      	bne.n	8004476 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	623b      	str	r3, [r7, #32]
}
 8004472:	bf00      	nop
 8004474:	e7fe      	b.n	8004474 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004476:	f002 facf 	bl	8006a18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800447a:	f3ef 8211 	mrs	r2, BASEPRI
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	61fa      	str	r2, [r7, #28]
 8004490:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004492:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004494:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800449a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800449c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449e:	429a      	cmp	r2, r3
 80044a0:	d302      	bcc.n	80044a8 <xQueueGenericSendFromISR+0xbc>
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d12f      	bne.n	8004508 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80044a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	68b9      	ldr	r1, [r7, #8]
 80044bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80044be:	f000 fb64 	bl	8004b8a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80044c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80044c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ca:	d112      	bne.n	80044f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d016      	beq.n	8004502 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d6:	3324      	adds	r3, #36	; 0x24
 80044d8:	4618      	mov	r0, r3
 80044da:	f001 f9a1 	bl	8005820 <xTaskRemoveFromEventList>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00e      	beq.n	8004502 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00b      	beq.n	8004502 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	e007      	b.n	8004502 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044f6:	3301      	adds	r3, #1
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	b25a      	sxtb	r2, r3
 80044fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004502:	2301      	movs	r3, #1
 8004504:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004506:	e001      	b.n	800450c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004508:	2300      	movs	r3, #0
 800450a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800450c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800450e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004516:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800451a:	4618      	mov	r0, r3
 800451c:	3740      	adds	r7, #64	; 0x40
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b08e      	sub	sp, #56	; 0x38
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
 800452a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10a      	bne.n	800454c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	623b      	str	r3, [r7, #32]
}
 8004548:	bf00      	nop
 800454a:	e7fe      	b.n	800454a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800454c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <xQueueGiveFromISR+0x48>
	__asm volatile
 8004554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	61fb      	str	r3, [r7, #28]
}
 8004566:	bf00      	nop
 8004568:	e7fe      	b.n	8004568 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d103      	bne.n	800457a <xQueueGiveFromISR+0x58>
 8004572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <xQueueGiveFromISR+0x5c>
 800457a:	2301      	movs	r3, #1
 800457c:	e000      	b.n	8004580 <xQueueGiveFromISR+0x5e>
 800457e:	2300      	movs	r3, #0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10a      	bne.n	800459a <xQueueGiveFromISR+0x78>
	__asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	61bb      	str	r3, [r7, #24]
}
 8004596:	bf00      	nop
 8004598:	e7fe      	b.n	8004598 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800459a:	f002 fa3d 	bl	8006a18 <vPortValidateInterruptPriority>
	__asm volatile
 800459e:	f3ef 8211 	mrs	r2, BASEPRI
 80045a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	617a      	str	r2, [r7, #20]
 80045b4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80045b6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d22b      	bcs.n	8004622 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80045ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d6:	1c5a      	adds	r2, r3, #1
 80045d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045da:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80045dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80045e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e4:	d112      	bne.n	800460c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d016      	beq.n	800461c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f0:	3324      	adds	r3, #36	; 0x24
 80045f2:	4618      	mov	r0, r3
 80045f4:	f001 f914 	bl	8005820 <xTaskRemoveFromEventList>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00e      	beq.n	800461c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00b      	beq.n	800461c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	2201      	movs	r2, #1
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	e007      	b.n	800461c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800460c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004610:	3301      	adds	r3, #1
 8004612:	b2db      	uxtb	r3, r3
 8004614:	b25a      	sxtb	r2, r3
 8004616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800461c:	2301      	movs	r3, #1
 800461e:	637b      	str	r3, [r7, #52]	; 0x34
 8004620:	e001      	b.n	8004626 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004622:	2300      	movs	r3, #0
 8004624:	637b      	str	r3, [r7, #52]	; 0x34
 8004626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004628:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f383 8811 	msr	BASEPRI, r3
}
 8004630:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004634:	4618      	mov	r0, r3
 8004636:	3738      	adds	r7, #56	; 0x38
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08c      	sub	sp, #48	; 0x30
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004648:	2300      	movs	r3, #0
 800464a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10a      	bne.n	800466c <xQueueReceive+0x30>
	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	623b      	str	r3, [r7, #32]
}
 8004668:	bf00      	nop
 800466a:	e7fe      	b.n	800466a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d103      	bne.n	800467a <xQueueReceive+0x3e>
 8004672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <xQueueReceive+0x42>
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <xQueueReceive+0x44>
 800467e:	2300      	movs	r3, #0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10a      	bne.n	800469a <xQueueReceive+0x5e>
	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	61fb      	str	r3, [r7, #28]
}
 8004696:	bf00      	nop
 8004698:	e7fe      	b.n	8004698 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800469a:	f001 fa7f 	bl	8005b9c <xTaskGetSchedulerState>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d102      	bne.n	80046aa <xQueueReceive+0x6e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <xQueueReceive+0x72>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <xQueueReceive+0x74>
 80046ae:	2300      	movs	r3, #0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10a      	bne.n	80046ca <xQueueReceive+0x8e>
	__asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	61bb      	str	r3, [r7, #24]
}
 80046c6:	bf00      	nop
 80046c8:	e7fe      	b.n	80046c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046ca:	f002 f8c3 	bl	8006854 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d01f      	beq.n	800471a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046da:	68b9      	ldr	r1, [r7, #8]
 80046dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046de:	f000 fabe 	bl	8004c5e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	1e5a      	subs	r2, r3, #1
 80046e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00f      	beq.n	8004712 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f4:	3310      	adds	r3, #16
 80046f6:	4618      	mov	r0, r3
 80046f8:	f001 f892 	bl	8005820 <xTaskRemoveFromEventList>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d007      	beq.n	8004712 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004702:	4b3d      	ldr	r3, [pc, #244]	; (80047f8 <xQueueReceive+0x1bc>)
 8004704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004712:	f002 f8cf 	bl	80068b4 <vPortExitCritical>
				return pdPASS;
 8004716:	2301      	movs	r3, #1
 8004718:	e069      	b.n	80047ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d103      	bne.n	8004728 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004720:	f002 f8c8 	bl	80068b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004724:	2300      	movs	r3, #0
 8004726:	e062      	b.n	80047ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472a:	2b00      	cmp	r3, #0
 800472c:	d106      	bne.n	800473c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800472e:	f107 0310 	add.w	r3, r7, #16
 8004732:	4618      	mov	r0, r3
 8004734:	f001 f8d8 	bl	80058e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004738:	2301      	movs	r3, #1
 800473a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800473c:	f002 f8ba 	bl	80068b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004740:	f000 fe42 	bl	80053c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004744:	f002 f886 	bl	8006854 <vPortEnterCritical>
 8004748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800474e:	b25b      	sxtb	r3, r3
 8004750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004754:	d103      	bne.n	800475e <xQueueReceive+0x122>
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004764:	b25b      	sxtb	r3, r3
 8004766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476a:	d103      	bne.n	8004774 <xQueueReceive+0x138>
 800476c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476e:	2200      	movs	r2, #0
 8004770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004774:	f002 f89e 	bl	80068b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004778:	1d3a      	adds	r2, r7, #4
 800477a:	f107 0310 	add.w	r3, r7, #16
 800477e:	4611      	mov	r1, r2
 8004780:	4618      	mov	r0, r3
 8004782:	f001 f8c7 	bl	8005914 <xTaskCheckForTimeOut>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d123      	bne.n	80047d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800478c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800478e:	f000 fade 	bl	8004d4e <prvIsQueueEmpty>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d017      	beq.n	80047c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479a:	3324      	adds	r3, #36	; 0x24
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	4611      	mov	r1, r2
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 ffed 	bl	8005780 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047a8:	f000 fa7f 	bl	8004caa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047ac:	f000 fe1a 	bl	80053e4 <xTaskResumeAll>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d189      	bne.n	80046ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80047b6:	4b10      	ldr	r3, [pc, #64]	; (80047f8 <xQueueReceive+0x1bc>)
 80047b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047bc:	601a      	str	r2, [r3, #0]
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	e780      	b.n	80046ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80047c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047ca:	f000 fa6e 	bl	8004caa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047ce:	f000 fe09 	bl	80053e4 <xTaskResumeAll>
 80047d2:	e77a      	b.n	80046ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80047d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047d6:	f000 fa68 	bl	8004caa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047da:	f000 fe03 	bl	80053e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047e0:	f000 fab5 	bl	8004d4e <prvIsQueueEmpty>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f43f af6f 	beq.w	80046ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80047ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3730      	adds	r7, #48	; 0x30
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	e000ed04 	.word	0xe000ed04

080047fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08e      	sub	sp, #56	; 0x38
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004806:	2300      	movs	r3, #0
 8004808:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800480e:	2300      	movs	r3, #0
 8004810:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10a      	bne.n	800482e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	623b      	str	r3, [r7, #32]
}
 800482a:	bf00      	nop
 800482c:	e7fe      	b.n	800482c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800482e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00a      	beq.n	800484c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483a:	f383 8811 	msr	BASEPRI, r3
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	61fb      	str	r3, [r7, #28]
}
 8004848:	bf00      	nop
 800484a:	e7fe      	b.n	800484a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800484c:	f001 f9a6 	bl	8005b9c <xTaskGetSchedulerState>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d102      	bne.n	800485c <xQueueSemaphoreTake+0x60>
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <xQueueSemaphoreTake+0x64>
 800485c:	2301      	movs	r3, #1
 800485e:	e000      	b.n	8004862 <xQueueSemaphoreTake+0x66>
 8004860:	2300      	movs	r3, #0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10a      	bne.n	800487c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	61bb      	str	r3, [r7, #24]
}
 8004878:	bf00      	nop
 800487a:	e7fe      	b.n	800487a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800487c:	f001 ffea 	bl	8006854 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004884:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004888:	2b00      	cmp	r3, #0
 800488a:	d024      	beq.n	80048d6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800488c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488e:	1e5a      	subs	r2, r3, #1
 8004890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004892:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d104      	bne.n	80048a6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800489c:	f001 faf4 	bl	8005e88 <pvTaskIncrementMutexHeldCount>
 80048a0:	4602      	mov	r2, r0
 80048a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00f      	beq.n	80048ce <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b0:	3310      	adds	r3, #16
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 ffb4 	bl	8005820 <xTaskRemoveFromEventList>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d007      	beq.n	80048ce <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80048be:	4b54      	ldr	r3, [pc, #336]	; (8004a10 <xQueueSemaphoreTake+0x214>)
 80048c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80048ce:	f001 fff1 	bl	80068b4 <vPortExitCritical>
				return pdPASS;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e097      	b.n	8004a06 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d111      	bne.n	8004900 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80048dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80048e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	617b      	str	r3, [r7, #20]
}
 80048f4:	bf00      	nop
 80048f6:	e7fe      	b.n	80048f6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80048f8:	f001 ffdc 	bl	80068b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80048fc:	2300      	movs	r3, #0
 80048fe:	e082      	b.n	8004a06 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004906:	f107 030c 	add.w	r3, r7, #12
 800490a:	4618      	mov	r0, r3
 800490c:	f000 ffec 	bl	80058e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004910:	2301      	movs	r3, #1
 8004912:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004914:	f001 ffce 	bl	80068b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004918:	f000 fd56 	bl	80053c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800491c:	f001 ff9a 	bl	8006854 <vPortEnterCritical>
 8004920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004922:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004926:	b25b      	sxtb	r3, r3
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492c:	d103      	bne.n	8004936 <xQueueSemaphoreTake+0x13a>
 800492e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004938:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800493c:	b25b      	sxtb	r3, r3
 800493e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004942:	d103      	bne.n	800494c <xQueueSemaphoreTake+0x150>
 8004944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800494c:	f001 ffb2 	bl	80068b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004950:	463a      	mov	r2, r7
 8004952:	f107 030c 	add.w	r3, r7, #12
 8004956:	4611      	mov	r1, r2
 8004958:	4618      	mov	r0, r3
 800495a:	f000 ffdb 	bl	8005914 <xTaskCheckForTimeOut>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d132      	bne.n	80049ca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004964:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004966:	f000 f9f2 	bl	8004d4e <prvIsQueueEmpty>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d026      	beq.n	80049be <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d109      	bne.n	800498c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004978:	f001 ff6c 	bl	8006854 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800497c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	4618      	mov	r0, r3
 8004982:	f001 f929 	bl	8005bd8 <xTaskPriorityInherit>
 8004986:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004988:	f001 ff94 	bl	80068b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800498c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498e:	3324      	adds	r3, #36	; 0x24
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	4611      	mov	r1, r2
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fef3 	bl	8005780 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800499a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800499c:	f000 f985 	bl	8004caa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049a0:	f000 fd20 	bl	80053e4 <xTaskResumeAll>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f47f af68 	bne.w	800487c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80049ac:	4b18      	ldr	r3, [pc, #96]	; (8004a10 <xQueueSemaphoreTake+0x214>)
 80049ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	e75e      	b.n	800487c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80049be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049c0:	f000 f973 	bl	8004caa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049c4:	f000 fd0e 	bl	80053e4 <xTaskResumeAll>
 80049c8:	e758      	b.n	800487c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80049ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049cc:	f000 f96d 	bl	8004caa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049d0:	f000 fd08 	bl	80053e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049d6:	f000 f9ba 	bl	8004d4e <prvIsQueueEmpty>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f43f af4d 	beq.w	800487c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80049e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00d      	beq.n	8004a04 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80049e8:	f001 ff34 	bl	8006854 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80049ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049ee:	f000 f8b4 	bl	8004b5a <prvGetDisinheritPriorityAfterTimeout>
 80049f2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80049f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049fa:	4618      	mov	r0, r3
 80049fc:	f001 f9c2 	bl	8005d84 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004a00:	f001 ff58 	bl	80068b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3738      	adds	r7, #56	; 0x38
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	e000ed04 	.word	0xe000ed04

08004a14 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b08e      	sub	sp, #56	; 0x38
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10a      	bne.n	8004a40 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	623b      	str	r3, [r7, #32]
}
 8004a3c:	bf00      	nop
 8004a3e:	e7fe      	b.n	8004a3e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d103      	bne.n	8004a4e <xQueueReceiveFromISR+0x3a>
 8004a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <xQueueReceiveFromISR+0x3e>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e000      	b.n	8004a54 <xQueueReceiveFromISR+0x40>
 8004a52:	2300      	movs	r3, #0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10a      	bne.n	8004a6e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	61fb      	str	r3, [r7, #28]
}
 8004a6a:	bf00      	nop
 8004a6c:	e7fe      	b.n	8004a6c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a6e:	f001 ffd3 	bl	8006a18 <vPortValidateInterruptPriority>
	__asm volatile
 8004a72:	f3ef 8211 	mrs	r2, BASEPRI
 8004a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	61ba      	str	r2, [r7, #24]
 8004a88:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004a8a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d02f      	beq.n	8004afa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004aa4:	68b9      	ldr	r1, [r7, #8]
 8004aa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004aa8:	f000 f8d9 	bl	8004c5e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aae:	1e5a      	subs	r2, r3, #1
 8004ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004ab4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004abc:	d112      	bne.n	8004ae4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d016      	beq.n	8004af4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	3310      	adds	r3, #16
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fea8 	bl	8005820 <xTaskRemoveFromEventList>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00e      	beq.n	8004af4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00b      	beq.n	8004af4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	e007      	b.n	8004af4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ae8:	3301      	adds	r3, #1
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	b25a      	sxtb	r2, r3
 8004aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004af4:	2301      	movs	r3, #1
 8004af6:	637b      	str	r3, [r7, #52]	; 0x34
 8004af8:	e001      	b.n	8004afe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	637b      	str	r3, [r7, #52]	; 0x34
 8004afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b00:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	f383 8811 	msr	BASEPRI, r3
}
 8004b08:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3738      	adds	r7, #56	; 0x38
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10a      	bne.n	8004b3c <vQueueDelete+0x28>
	__asm volatile
 8004b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	60bb      	str	r3, [r7, #8]
}
 8004b38:	bf00      	nop
 8004b3a:	e7fe      	b.n	8004b3a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 f95f 	bl	8004e00 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d102      	bne.n	8004b52 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f002 f86f 	bl	8006c30 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004b52:	bf00      	nop
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004b5a:	b480      	push	{r7}
 8004b5c:	b085      	sub	sp, #20
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d006      	beq.n	8004b78 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004b74:	60fb      	str	r3, [r7, #12]
 8004b76:	e001      	b.n	8004b7c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
	}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b086      	sub	sp, #24
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b96:	2300      	movs	r3, #0
 8004b98:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10d      	bne.n	8004bc4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d14d      	bne.n	8004c4c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f001 f877 	bl	8005ca8 <xTaskPriorityDisinherit>
 8004bba:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	609a      	str	r2, [r3, #8]
 8004bc2:	e043      	b.n	8004c4c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d119      	bne.n	8004bfe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6858      	ldr	r0, [r3, #4]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	68b9      	ldr	r1, [r7, #8]
 8004bd6:	f002 f975 	bl	8006ec4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	441a      	add	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d32b      	bcc.n	8004c4c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	605a      	str	r2, [r3, #4]
 8004bfc:	e026      	b.n	8004c4c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	68d8      	ldr	r0, [r3, #12]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	461a      	mov	r2, r3
 8004c08:	68b9      	ldr	r1, [r7, #8]
 8004c0a:	f002 f95b 	bl	8006ec4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	425b      	negs	r3, r3
 8004c18:	441a      	add	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d207      	bcs.n	8004c3a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	425b      	negs	r3, r3
 8004c34:	441a      	add	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d105      	bne.n	8004c4c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c54:	697b      	ldr	r3, [r7, #20]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3718      	adds	r7, #24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	b082      	sub	sp, #8
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d018      	beq.n	8004ca2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68da      	ldr	r2, [r3, #12]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	441a      	add	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d303      	bcc.n	8004c92 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68d9      	ldr	r1, [r3, #12]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	6838      	ldr	r0, [r7, #0]
 8004c9e:	f002 f911 	bl	8006ec4 <memcpy>
	}
}
 8004ca2:	bf00      	nop
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004cb2:	f001 fdcf 	bl	8006854 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cbc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cbe:	e011      	b.n	8004ce4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d012      	beq.n	8004cee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3324      	adds	r3, #36	; 0x24
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fda7 	bl	8005820 <xTaskRemoveFromEventList>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d001      	beq.n	8004cdc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004cd8:	f000 fe7e 	bl	80059d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004cdc:	7bfb      	ldrb	r3, [r7, #15]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	dce9      	bgt.n	8004cc0 <prvUnlockQueue+0x16>
 8004cec:	e000      	b.n	8004cf0 <prvUnlockQueue+0x46>
					break;
 8004cee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	22ff      	movs	r2, #255	; 0xff
 8004cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004cf8:	f001 fddc 	bl	80068b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004cfc:	f001 fdaa 	bl	8006854 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d06:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d08:	e011      	b.n	8004d2e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d012      	beq.n	8004d38 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3310      	adds	r3, #16
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fd82 	bl	8005820 <xTaskRemoveFromEventList>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d22:	f000 fe59 	bl	80059d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d26:	7bbb      	ldrb	r3, [r7, #14]
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	dce9      	bgt.n	8004d0a <prvUnlockQueue+0x60>
 8004d36:	e000      	b.n	8004d3a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d38:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	22ff      	movs	r2, #255	; 0xff
 8004d3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d42:	f001 fdb7 	bl	80068b4 <vPortExitCritical>
}
 8004d46:	bf00      	nop
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b084      	sub	sp, #16
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d56:	f001 fd7d 	bl	8006854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d102      	bne.n	8004d68 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d62:	2301      	movs	r3, #1
 8004d64:	60fb      	str	r3, [r7, #12]
 8004d66:	e001      	b.n	8004d6c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d6c:	f001 fda2 	bl	80068b4 <vPortExitCritical>

	return xReturn;
 8004d70:	68fb      	ldr	r3, [r7, #12]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b084      	sub	sp, #16
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d82:	f001 fd67 	bl	8006854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d102      	bne.n	8004d98 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d92:	2301      	movs	r3, #1
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	e001      	b.n	8004d9c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d9c:	f001 fd8a 	bl	80068b4 <vPortExitCritical>

	return xReturn;
 8004da0:	68fb      	ldr	r3, [r7, #12]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004db6:	2300      	movs	r3, #0
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	e014      	b.n	8004de6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004dbc:	4a0f      	ldr	r2, [pc, #60]	; (8004dfc <vQueueAddToRegistry+0x50>)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10b      	bne.n	8004de0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004dc8:	490c      	ldr	r1, [pc, #48]	; (8004dfc <vQueueAddToRegistry+0x50>)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004dd2:	4a0a      	ldr	r2, [pc, #40]	; (8004dfc <vQueueAddToRegistry+0x50>)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	4413      	add	r3, r2
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004dde:	e006      	b.n	8004dee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	3301      	adds	r3, #1
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b07      	cmp	r3, #7
 8004dea:	d9e7      	bls.n	8004dbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004dec:	bf00      	nop
 8004dee:	bf00      	nop
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	20000838 	.word	0x20000838

08004e00 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	e016      	b.n	8004e3c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004e0e:	4a10      	ldr	r2, [pc, #64]	; (8004e50 <vQueueUnregisterQueue+0x50>)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	4413      	add	r3, r2
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d10b      	bne.n	8004e36 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004e1e:	4a0c      	ldr	r2, [pc, #48]	; (8004e50 <vQueueUnregisterQueue+0x50>)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2100      	movs	r1, #0
 8004e24:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004e28:	4a09      	ldr	r2, [pc, #36]	; (8004e50 <vQueueUnregisterQueue+0x50>)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	4413      	add	r3, r2
 8004e30:	2200      	movs	r2, #0
 8004e32:	605a      	str	r2, [r3, #4]
				break;
 8004e34:	e006      	b.n	8004e44 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b07      	cmp	r3, #7
 8004e40:	d9e5      	bls.n	8004e0e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004e42:	bf00      	nop
 8004e44:	bf00      	nop
 8004e46:	3714      	adds	r7, #20
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	20000838 	.word	0x20000838

08004e54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004e64:	f001 fcf6 	bl	8006854 <vPortEnterCritical>
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e6e:	b25b      	sxtb	r3, r3
 8004e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e74:	d103      	bne.n	8004e7e <vQueueWaitForMessageRestricted+0x2a>
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e84:	b25b      	sxtb	r3, r3
 8004e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8a:	d103      	bne.n	8004e94 <vQueueWaitForMessageRestricted+0x40>
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e94:	f001 fd0e 	bl	80068b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d106      	bne.n	8004eae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	3324      	adds	r3, #36	; 0x24
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	68b9      	ldr	r1, [r7, #8]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 fc8d 	bl	80057c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004eae:	6978      	ldr	r0, [r7, #20]
 8004eb0:	f7ff fefb 	bl	8004caa <prvUnlockQueue>
	}
 8004eb4:	bf00      	nop
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08e      	sub	sp, #56	; 0x38
 8004ec0:	af04      	add	r7, sp, #16
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10a      	bne.n	8004ee6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	623b      	str	r3, [r7, #32]
}
 8004ee2:	bf00      	nop
 8004ee4:	e7fe      	b.n	8004ee4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10a      	bne.n	8004f02 <xTaskCreateStatic+0x46>
	__asm volatile
 8004eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef0:	f383 8811 	msr	BASEPRI, r3
 8004ef4:	f3bf 8f6f 	isb	sy
 8004ef8:	f3bf 8f4f 	dsb	sy
 8004efc:	61fb      	str	r3, [r7, #28]
}
 8004efe:	bf00      	nop
 8004f00:	e7fe      	b.n	8004f00 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f02:	235c      	movs	r3, #92	; 0x5c
 8004f04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	2b5c      	cmp	r3, #92	; 0x5c
 8004f0a:	d00a      	beq.n	8004f22 <xTaskCreateStatic+0x66>
	__asm volatile
 8004f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	61bb      	str	r3, [r7, #24]
}
 8004f1e:	bf00      	nop
 8004f20:	e7fe      	b.n	8004f20 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d01e      	beq.n	8004f68 <xTaskCreateStatic+0xac>
 8004f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d01b      	beq.n	8004f68 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f42:	2300      	movs	r3, #0
 8004f44:	9303      	str	r3, [sp, #12]
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	9302      	str	r3, [sp, #8]
 8004f4a:	f107 0314 	add.w	r3, r7, #20
 8004f4e:	9301      	str	r3, [sp, #4]
 8004f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	68b9      	ldr	r1, [r7, #8]
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 f850 	bl	8005000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f62:	f000 f8dd 	bl	8005120 <prvAddNewTaskToReadyList>
 8004f66:	e001      	b.n	8004f6c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f6c:	697b      	ldr	r3, [r7, #20]
	}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3728      	adds	r7, #40	; 0x28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b08c      	sub	sp, #48	; 0x30
 8004f7a:	af04      	add	r7, sp, #16
 8004f7c:	60f8      	str	r0, [r7, #12]
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	603b      	str	r3, [r7, #0]
 8004f82:	4613      	mov	r3, r2
 8004f84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f86:	88fb      	ldrh	r3, [r7, #6]
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f001 fd84 	bl	8006a98 <pvPortMalloc>
 8004f90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00e      	beq.n	8004fb6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f98:	205c      	movs	r0, #92	; 0x5c
 8004f9a:	f001 fd7d 	bl	8006a98 <pvPortMalloc>
 8004f9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	631a      	str	r2, [r3, #48]	; 0x30
 8004fac:	e005      	b.n	8004fba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004fae:	6978      	ldr	r0, [r7, #20]
 8004fb0:	f001 fe3e 	bl	8006c30 <vPortFree>
 8004fb4:	e001      	b.n	8004fba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d017      	beq.n	8004ff0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004fc8:	88fa      	ldrh	r2, [r7, #6]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	9303      	str	r3, [sp, #12]
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	9302      	str	r3, [sp, #8]
 8004fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd4:	9301      	str	r3, [sp, #4]
 8004fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	68b9      	ldr	r1, [r7, #8]
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 f80e 	bl	8005000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004fe4:	69f8      	ldr	r0, [r7, #28]
 8004fe6:	f000 f89b 	bl	8005120 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004fea:	2301      	movs	r3, #1
 8004fec:	61bb      	str	r3, [r7, #24]
 8004fee:	e002      	b.n	8004ff6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004ff6:	69bb      	ldr	r3, [r7, #24]
	}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3720      	adds	r7, #32
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b088      	sub	sp, #32
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
 800500c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	461a      	mov	r2, r3
 8005018:	21a5      	movs	r1, #165	; 0xa5
 800501a:	f001 ff27 	bl	8006e6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005028:	3b01      	subs	r3, #1
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	f023 0307 	bic.w	r3, r3, #7
 8005036:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	617b      	str	r3, [r7, #20]
}
 8005054:	bf00      	nop
 8005056:	e7fe      	b.n	8005056 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d01f      	beq.n	800509e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800505e:	2300      	movs	r3, #0
 8005060:	61fb      	str	r3, [r7, #28]
 8005062:	e012      	b.n	800508a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	4413      	add	r3, r2
 800506a:	7819      	ldrb	r1, [r3, #0]
 800506c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	4413      	add	r3, r2
 8005072:	3334      	adds	r3, #52	; 0x34
 8005074:	460a      	mov	r2, r1
 8005076:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	4413      	add	r3, r2
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d006      	beq.n	8005092 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	3301      	adds	r3, #1
 8005088:	61fb      	str	r3, [r7, #28]
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	2b0f      	cmp	r3, #15
 800508e:	d9e9      	bls.n	8005064 <prvInitialiseNewTask+0x64>
 8005090:	e000      	b.n	8005094 <prvInitialiseNewTask+0x94>
			{
				break;
 8005092:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005096:	2200      	movs	r2, #0
 8005098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800509c:	e003      	b.n	80050a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800509e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80050a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a8:	2b37      	cmp	r3, #55	; 0x37
 80050aa:	d901      	bls.n	80050b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80050ac:	2337      	movs	r3, #55	; 0x37
 80050ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80050bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050be:	2200      	movs	r2, #0
 80050c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	3304      	adds	r3, #4
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fe fe56 	bl	8003d78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80050cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ce:	3318      	adds	r3, #24
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fe fe51 	bl	8003d78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80050d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80050ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ee:	2200      	movs	r2, #0
 80050f0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	68f9      	ldr	r1, [r7, #12]
 80050fe:	69b8      	ldr	r0, [r7, #24]
 8005100:	f001 fa78 	bl	80065f4 <pxPortInitialiseStack>
 8005104:	4602      	mov	r2, r0
 8005106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005108:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800510a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005112:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005116:	bf00      	nop
 8005118:	3720      	adds	r7, #32
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005128:	f001 fb94 	bl	8006854 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800512c:	4b2d      	ldr	r3, [pc, #180]	; (80051e4 <prvAddNewTaskToReadyList+0xc4>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3301      	adds	r3, #1
 8005132:	4a2c      	ldr	r2, [pc, #176]	; (80051e4 <prvAddNewTaskToReadyList+0xc4>)
 8005134:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005136:	4b2c      	ldr	r3, [pc, #176]	; (80051e8 <prvAddNewTaskToReadyList+0xc8>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d109      	bne.n	8005152 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800513e:	4a2a      	ldr	r2, [pc, #168]	; (80051e8 <prvAddNewTaskToReadyList+0xc8>)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005144:	4b27      	ldr	r3, [pc, #156]	; (80051e4 <prvAddNewTaskToReadyList+0xc4>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d110      	bne.n	800516e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800514c:	f000 fc68 	bl	8005a20 <prvInitialiseTaskLists>
 8005150:	e00d      	b.n	800516e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005152:	4b26      	ldr	r3, [pc, #152]	; (80051ec <prvAddNewTaskToReadyList+0xcc>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d109      	bne.n	800516e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800515a:	4b23      	ldr	r3, [pc, #140]	; (80051e8 <prvAddNewTaskToReadyList+0xc8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	429a      	cmp	r2, r3
 8005166:	d802      	bhi.n	800516e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005168:	4a1f      	ldr	r2, [pc, #124]	; (80051e8 <prvAddNewTaskToReadyList+0xc8>)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800516e:	4b20      	ldr	r3, [pc, #128]	; (80051f0 <prvAddNewTaskToReadyList+0xd0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3301      	adds	r3, #1
 8005174:	4a1e      	ldr	r2, [pc, #120]	; (80051f0 <prvAddNewTaskToReadyList+0xd0>)
 8005176:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005178:	4b1d      	ldr	r3, [pc, #116]	; (80051f0 <prvAddNewTaskToReadyList+0xd0>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005184:	4b1b      	ldr	r3, [pc, #108]	; (80051f4 <prvAddNewTaskToReadyList+0xd4>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	429a      	cmp	r2, r3
 800518a:	d903      	bls.n	8005194 <prvAddNewTaskToReadyList+0x74>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005190:	4a18      	ldr	r2, [pc, #96]	; (80051f4 <prvAddNewTaskToReadyList+0xd4>)
 8005192:	6013      	str	r3, [r2, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005198:	4613      	mov	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4a15      	ldr	r2, [pc, #84]	; (80051f8 <prvAddNewTaskToReadyList+0xd8>)
 80051a2:	441a      	add	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3304      	adds	r3, #4
 80051a8:	4619      	mov	r1, r3
 80051aa:	4610      	mov	r0, r2
 80051ac:	f7fe fdf1 	bl	8003d92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80051b0:	f001 fb80 	bl	80068b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80051b4:	4b0d      	ldr	r3, [pc, #52]	; (80051ec <prvAddNewTaskToReadyList+0xcc>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00e      	beq.n	80051da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80051bc:	4b0a      	ldr	r3, [pc, #40]	; (80051e8 <prvAddNewTaskToReadyList+0xc8>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d207      	bcs.n	80051da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80051ca:	4b0c      	ldr	r3, [pc, #48]	; (80051fc <prvAddNewTaskToReadyList+0xdc>)
 80051cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051da:	bf00      	nop
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	20000d4c 	.word	0x20000d4c
 80051e8:	20000878 	.word	0x20000878
 80051ec:	20000d58 	.word	0x20000d58
 80051f0:	20000d68 	.word	0x20000d68
 80051f4:	20000d54 	.word	0x20000d54
 80051f8:	2000087c 	.word	0x2000087c
 80051fc:	e000ed04 	.word	0xe000ed04

08005200 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08a      	sub	sp, #40	; 0x28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800520a:	2300      	movs	r3, #0
 800520c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10a      	bne.n	800522a <vTaskDelayUntil+0x2a>
	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	617b      	str	r3, [r7, #20]
}
 8005226:	bf00      	nop
 8005228:	e7fe      	b.n	8005228 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10a      	bne.n	8005246 <vTaskDelayUntil+0x46>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	613b      	str	r3, [r7, #16]
}
 8005242:	bf00      	nop
 8005244:	e7fe      	b.n	8005244 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8005246:	4b2a      	ldr	r3, [pc, #168]	; (80052f0 <vTaskDelayUntil+0xf0>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <vTaskDelayUntil+0x64>
	__asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	60fb      	str	r3, [r7, #12]
}
 8005260:	bf00      	nop
 8005262:	e7fe      	b.n	8005262 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8005264:	f000 f8b0 	bl	80053c8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005268:	4b22      	ldr	r3, [pc, #136]	; (80052f4 <vTaskDelayUntil+0xf4>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	4413      	add	r3, r2
 8005276:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6a3a      	ldr	r2, [r7, #32]
 800527e:	429a      	cmp	r2, r3
 8005280:	d20b      	bcs.n	800529a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69fa      	ldr	r2, [r7, #28]
 8005288:	429a      	cmp	r2, r3
 800528a:	d211      	bcs.n	80052b0 <vTaskDelayUntil+0xb0>
 800528c:	69fa      	ldr	r2, [r7, #28]
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	429a      	cmp	r2, r3
 8005292:	d90d      	bls.n	80052b0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005294:	2301      	movs	r3, #1
 8005296:	627b      	str	r3, [r7, #36]	; 0x24
 8005298:	e00a      	b.n	80052b0 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	69fa      	ldr	r2, [r7, #28]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d303      	bcc.n	80052ac <vTaskDelayUntil+0xac>
 80052a4:	69fa      	ldr	r2, [r7, #28]
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d901      	bls.n	80052b0 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80052ac:	2301      	movs	r3, #1
 80052ae:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80052b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d006      	beq.n	80052ca <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2100      	movs	r1, #0
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 fdf3 	bl	8005eb0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80052ca:	f000 f88b 	bl	80053e4 <xTaskResumeAll>
 80052ce:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d107      	bne.n	80052e6 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80052d6:	4b08      	ldr	r3, [pc, #32]	; (80052f8 <vTaskDelayUntil+0xf8>)
 80052d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80052e6:	bf00      	nop
 80052e8:	3728      	adds	r7, #40	; 0x28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	20000d74 	.word	0x20000d74
 80052f4:	20000d50 	.word	0x20000d50
 80052f8:	e000ed04 	.word	0xe000ed04

080052fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b08a      	sub	sp, #40	; 0x28
 8005300:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005302:	2300      	movs	r3, #0
 8005304:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005306:	2300      	movs	r3, #0
 8005308:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800530a:	463a      	mov	r2, r7
 800530c:	1d39      	adds	r1, r7, #4
 800530e:	f107 0308 	add.w	r3, r7, #8
 8005312:	4618      	mov	r0, r3
 8005314:	f7fe fcdc 	bl	8003cd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005318:	6839      	ldr	r1, [r7, #0]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	9202      	str	r2, [sp, #8]
 8005320:	9301      	str	r3, [sp, #4]
 8005322:	2300      	movs	r3, #0
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	2300      	movs	r3, #0
 8005328:	460a      	mov	r2, r1
 800532a:	4921      	ldr	r1, [pc, #132]	; (80053b0 <vTaskStartScheduler+0xb4>)
 800532c:	4821      	ldr	r0, [pc, #132]	; (80053b4 <vTaskStartScheduler+0xb8>)
 800532e:	f7ff fdc5 	bl	8004ebc <xTaskCreateStatic>
 8005332:	4603      	mov	r3, r0
 8005334:	4a20      	ldr	r2, [pc, #128]	; (80053b8 <vTaskStartScheduler+0xbc>)
 8005336:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005338:	4b1f      	ldr	r3, [pc, #124]	; (80053b8 <vTaskStartScheduler+0xbc>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d002      	beq.n	8005346 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005340:	2301      	movs	r3, #1
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	e001      	b.n	800534a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005346:	2300      	movs	r3, #0
 8005348:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	2b01      	cmp	r3, #1
 800534e:	d102      	bne.n	8005356 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005350:	f000 fe02 	bl	8005f58 <xTimerCreateTimerTask>
 8005354:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d116      	bne.n	800538a <vTaskStartScheduler+0x8e>
	__asm volatile
 800535c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	613b      	str	r3, [r7, #16]
}
 800536e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005370:	4b12      	ldr	r3, [pc, #72]	; (80053bc <vTaskStartScheduler+0xc0>)
 8005372:	f04f 32ff 	mov.w	r2, #4294967295
 8005376:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005378:	4b11      	ldr	r3, [pc, #68]	; (80053c0 <vTaskStartScheduler+0xc4>)
 800537a:	2201      	movs	r2, #1
 800537c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800537e:	4b11      	ldr	r3, [pc, #68]	; (80053c4 <vTaskStartScheduler+0xc8>)
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005384:	f001 f9c4 	bl	8006710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005388:	e00e      	b.n	80053a8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005390:	d10a      	bne.n	80053a8 <vTaskStartScheduler+0xac>
	__asm volatile
 8005392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005396:	f383 8811 	msr	BASEPRI, r3
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	60fb      	str	r3, [r7, #12]
}
 80053a4:	bf00      	nop
 80053a6:	e7fe      	b.n	80053a6 <vTaskStartScheduler+0xaa>
}
 80053a8:	bf00      	nop
 80053aa:	3718      	adds	r7, #24
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	08006f18 	.word	0x08006f18
 80053b4:	080059f1 	.word	0x080059f1
 80053b8:	20000d70 	.word	0x20000d70
 80053bc:	20000d6c 	.word	0x20000d6c
 80053c0:	20000d58 	.word	0x20000d58
 80053c4:	20000d50 	.word	0x20000d50

080053c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80053cc:	4b04      	ldr	r3, [pc, #16]	; (80053e0 <vTaskSuspendAll+0x18>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	3301      	adds	r3, #1
 80053d2:	4a03      	ldr	r2, [pc, #12]	; (80053e0 <vTaskSuspendAll+0x18>)
 80053d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80053d6:	bf00      	nop
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	20000d74 	.word	0x20000d74

080053e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80053ee:	2300      	movs	r3, #0
 80053f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80053f2:	4b42      	ldr	r3, [pc, #264]	; (80054fc <xTaskResumeAll+0x118>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10a      	bne.n	8005410 <xTaskResumeAll+0x2c>
	__asm volatile
 80053fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	603b      	str	r3, [r7, #0]
}
 800540c:	bf00      	nop
 800540e:	e7fe      	b.n	800540e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005410:	f001 fa20 	bl	8006854 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005414:	4b39      	ldr	r3, [pc, #228]	; (80054fc <xTaskResumeAll+0x118>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3b01      	subs	r3, #1
 800541a:	4a38      	ldr	r2, [pc, #224]	; (80054fc <xTaskResumeAll+0x118>)
 800541c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800541e:	4b37      	ldr	r3, [pc, #220]	; (80054fc <xTaskResumeAll+0x118>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d162      	bne.n	80054ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005426:	4b36      	ldr	r3, [pc, #216]	; (8005500 <xTaskResumeAll+0x11c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d05e      	beq.n	80054ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800542e:	e02f      	b.n	8005490 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005430:	4b34      	ldr	r3, [pc, #208]	; (8005504 <xTaskResumeAll+0x120>)
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	3318      	adds	r3, #24
 800543c:	4618      	mov	r0, r3
 800543e:	f7fe fd05 	bl	8003e4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	3304      	adds	r3, #4
 8005446:	4618      	mov	r0, r3
 8005448:	f7fe fd00 	bl	8003e4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005450:	4b2d      	ldr	r3, [pc, #180]	; (8005508 <xTaskResumeAll+0x124>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	d903      	bls.n	8005460 <xTaskResumeAll+0x7c>
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	4a2a      	ldr	r2, [pc, #168]	; (8005508 <xTaskResumeAll+0x124>)
 800545e:	6013      	str	r3, [r2, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005464:	4613      	mov	r3, r2
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	4a27      	ldr	r2, [pc, #156]	; (800550c <xTaskResumeAll+0x128>)
 800546e:	441a      	add	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	3304      	adds	r3, #4
 8005474:	4619      	mov	r1, r3
 8005476:	4610      	mov	r0, r2
 8005478:	f7fe fc8b 	bl	8003d92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005480:	4b23      	ldr	r3, [pc, #140]	; (8005510 <xTaskResumeAll+0x12c>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005486:	429a      	cmp	r2, r3
 8005488:	d302      	bcc.n	8005490 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800548a:	4b22      	ldr	r3, [pc, #136]	; (8005514 <xTaskResumeAll+0x130>)
 800548c:	2201      	movs	r2, #1
 800548e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005490:	4b1c      	ldr	r3, [pc, #112]	; (8005504 <xTaskResumeAll+0x120>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1cb      	bne.n	8005430 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800549e:	f000 fb5d 	bl	8005b5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80054a2:	4b1d      	ldr	r3, [pc, #116]	; (8005518 <xTaskResumeAll+0x134>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d010      	beq.n	80054d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80054ae:	f000 f847 	bl	8005540 <xTaskIncrementTick>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80054b8:	4b16      	ldr	r3, [pc, #88]	; (8005514 <xTaskResumeAll+0x130>)
 80054ba:	2201      	movs	r2, #1
 80054bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3b01      	subs	r3, #1
 80054c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1f1      	bne.n	80054ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80054ca:	4b13      	ldr	r3, [pc, #76]	; (8005518 <xTaskResumeAll+0x134>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80054d0:	4b10      	ldr	r3, [pc, #64]	; (8005514 <xTaskResumeAll+0x130>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d009      	beq.n	80054ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80054d8:	2301      	movs	r3, #1
 80054da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80054dc:	4b0f      	ldr	r3, [pc, #60]	; (800551c <xTaskResumeAll+0x138>)
 80054de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	f3bf 8f4f 	dsb	sy
 80054e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054ec:	f001 f9e2 	bl	80068b4 <vPortExitCritical>

	return xAlreadyYielded;
 80054f0:	68bb      	ldr	r3, [r7, #8]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20000d74 	.word	0x20000d74
 8005500:	20000d4c 	.word	0x20000d4c
 8005504:	20000d0c 	.word	0x20000d0c
 8005508:	20000d54 	.word	0x20000d54
 800550c:	2000087c 	.word	0x2000087c
 8005510:	20000878 	.word	0x20000878
 8005514:	20000d60 	.word	0x20000d60
 8005518:	20000d5c 	.word	0x20000d5c
 800551c:	e000ed04 	.word	0xe000ed04

08005520 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005526:	4b05      	ldr	r3, [pc, #20]	; (800553c <xTaskGetTickCount+0x1c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800552c:	687b      	ldr	r3, [r7, #4]
}
 800552e:	4618      	mov	r0, r3
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	20000d50 	.word	0x20000d50

08005540 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005546:	2300      	movs	r3, #0
 8005548:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800554a:	4b53      	ldr	r3, [pc, #332]	; (8005698 <xTaskIncrementTick+0x158>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	f040 8095 	bne.w	800567e <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005554:	4b51      	ldr	r3, [pc, #324]	; (800569c <xTaskIncrementTick+0x15c>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	3301      	adds	r3, #1
 800555a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800555c:	4a4f      	ldr	r2, [pc, #316]	; (800569c <xTaskIncrementTick+0x15c>)
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d120      	bne.n	80055aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005568:	4b4d      	ldr	r3, [pc, #308]	; (80056a0 <xTaskIncrementTick+0x160>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <xTaskIncrementTick+0x48>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	603b      	str	r3, [r7, #0]
}
 8005584:	bf00      	nop
 8005586:	e7fe      	b.n	8005586 <xTaskIncrementTick+0x46>
 8005588:	4b45      	ldr	r3, [pc, #276]	; (80056a0 <xTaskIncrementTick+0x160>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	4b45      	ldr	r3, [pc, #276]	; (80056a4 <xTaskIncrementTick+0x164>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a43      	ldr	r2, [pc, #268]	; (80056a0 <xTaskIncrementTick+0x160>)
 8005594:	6013      	str	r3, [r2, #0]
 8005596:	4a43      	ldr	r2, [pc, #268]	; (80056a4 <xTaskIncrementTick+0x164>)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6013      	str	r3, [r2, #0]
 800559c:	4b42      	ldr	r3, [pc, #264]	; (80056a8 <xTaskIncrementTick+0x168>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	3301      	adds	r3, #1
 80055a2:	4a41      	ldr	r2, [pc, #260]	; (80056a8 <xTaskIncrementTick+0x168>)
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	f000 fad9 	bl	8005b5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80055aa:	4b40      	ldr	r3, [pc, #256]	; (80056ac <xTaskIncrementTick+0x16c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d349      	bcc.n	8005648 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055b4:	4b3a      	ldr	r3, [pc, #232]	; (80056a0 <xTaskIncrementTick+0x160>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d104      	bne.n	80055c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055be:	4b3b      	ldr	r3, [pc, #236]	; (80056ac <xTaskIncrementTick+0x16c>)
 80055c0:	f04f 32ff 	mov.w	r2, #4294967295
 80055c4:	601a      	str	r2, [r3, #0]
					break;
 80055c6:	e03f      	b.n	8005648 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055c8:	4b35      	ldr	r3, [pc, #212]	; (80056a0 <xTaskIncrementTick+0x160>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d203      	bcs.n	80055e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80055e0:	4a32      	ldr	r2, [pc, #200]	; (80056ac <xTaskIncrementTick+0x16c>)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80055e6:	e02f      	b.n	8005648 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	3304      	adds	r3, #4
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7fe fc2d 	bl	8003e4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d004      	beq.n	8005604 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	3318      	adds	r3, #24
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fe fc24 	bl	8003e4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005608:	4b29      	ldr	r3, [pc, #164]	; (80056b0 <xTaskIncrementTick+0x170>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	429a      	cmp	r2, r3
 800560e:	d903      	bls.n	8005618 <xTaskIncrementTick+0xd8>
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005614:	4a26      	ldr	r2, [pc, #152]	; (80056b0 <xTaskIncrementTick+0x170>)
 8005616:	6013      	str	r3, [r2, #0]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800561c:	4613      	mov	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4a23      	ldr	r2, [pc, #140]	; (80056b4 <xTaskIncrementTick+0x174>)
 8005626:	441a      	add	r2, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	3304      	adds	r3, #4
 800562c:	4619      	mov	r1, r3
 800562e:	4610      	mov	r0, r2
 8005630:	f7fe fbaf 	bl	8003d92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005638:	4b1f      	ldr	r3, [pc, #124]	; (80056b8 <xTaskIncrementTick+0x178>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563e:	429a      	cmp	r2, r3
 8005640:	d3b8      	bcc.n	80055b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005642:	2301      	movs	r3, #1
 8005644:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005646:	e7b5      	b.n	80055b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005648:	4b1b      	ldr	r3, [pc, #108]	; (80056b8 <xTaskIncrementTick+0x178>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800564e:	4919      	ldr	r1, [pc, #100]	; (80056b4 <xTaskIncrementTick+0x174>)
 8005650:	4613      	mov	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d901      	bls.n	8005664 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005660:	2301      	movs	r3, #1
 8005662:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8005664:	4b15      	ldr	r3, [pc, #84]	; (80056bc <xTaskIncrementTick+0x17c>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d101      	bne.n	8005670 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 800566c:	f7fa ffcc 	bl	8000608 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005670:	4b13      	ldr	r3, [pc, #76]	; (80056c0 <xTaskIncrementTick+0x180>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d009      	beq.n	800568c <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8005678:	2301      	movs	r3, #1
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	e006      	b.n	800568c <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800567e:	4b0f      	ldr	r3, [pc, #60]	; (80056bc <xTaskIncrementTick+0x17c>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	3301      	adds	r3, #1
 8005684:	4a0d      	ldr	r2, [pc, #52]	; (80056bc <xTaskIncrementTick+0x17c>)
 8005686:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8005688:	f7fa ffbe 	bl	8000608 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 800568c:	697b      	ldr	r3, [r7, #20]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3718      	adds	r7, #24
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20000d74 	.word	0x20000d74
 800569c:	20000d50 	.word	0x20000d50
 80056a0:	20000d04 	.word	0x20000d04
 80056a4:	20000d08 	.word	0x20000d08
 80056a8:	20000d64 	.word	0x20000d64
 80056ac:	20000d6c 	.word	0x20000d6c
 80056b0:	20000d54 	.word	0x20000d54
 80056b4:	2000087c 	.word	0x2000087c
 80056b8:	20000878 	.word	0x20000878
 80056bc:	20000d5c 	.word	0x20000d5c
 80056c0:	20000d60 	.word	0x20000d60

080056c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80056ca:	4b28      	ldr	r3, [pc, #160]	; (800576c <vTaskSwitchContext+0xa8>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80056d2:	4b27      	ldr	r3, [pc, #156]	; (8005770 <vTaskSwitchContext+0xac>)
 80056d4:	2201      	movs	r2, #1
 80056d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80056d8:	e041      	b.n	800575e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80056da:	4b25      	ldr	r3, [pc, #148]	; (8005770 <vTaskSwitchContext+0xac>)
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056e0:	4b24      	ldr	r3, [pc, #144]	; (8005774 <vTaskSwitchContext+0xb0>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	60fb      	str	r3, [r7, #12]
 80056e6:	e010      	b.n	800570a <vTaskSwitchContext+0x46>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10a      	bne.n	8005704 <vTaskSwitchContext+0x40>
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	607b      	str	r3, [r7, #4]
}
 8005700:	bf00      	nop
 8005702:	e7fe      	b.n	8005702 <vTaskSwitchContext+0x3e>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3b01      	subs	r3, #1
 8005708:	60fb      	str	r3, [r7, #12]
 800570a:	491b      	ldr	r1, [pc, #108]	; (8005778 <vTaskSwitchContext+0xb4>)
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	4613      	mov	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	440b      	add	r3, r1
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0e4      	beq.n	80056e8 <vTaskSwitchContext+0x24>
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	4613      	mov	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4a13      	ldr	r2, [pc, #76]	; (8005778 <vTaskSwitchContext+0xb4>)
 800572a:	4413      	add	r3, r2
 800572c:	60bb      	str	r3, [r7, #8]
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	605a      	str	r2, [r3, #4]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	3308      	adds	r3, #8
 8005740:	429a      	cmp	r2, r3
 8005742:	d104      	bne.n	800574e <vTaskSwitchContext+0x8a>
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	605a      	str	r2, [r3, #4]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	4a09      	ldr	r2, [pc, #36]	; (800577c <vTaskSwitchContext+0xb8>)
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	4a06      	ldr	r2, [pc, #24]	; (8005774 <vTaskSwitchContext+0xb0>)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6013      	str	r3, [r2, #0]
}
 800575e:	bf00      	nop
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	20000d74 	.word	0x20000d74
 8005770:	20000d60 	.word	0x20000d60
 8005774:	20000d54 	.word	0x20000d54
 8005778:	2000087c 	.word	0x2000087c
 800577c:	20000878 	.word	0x20000878

08005780 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d10a      	bne.n	80057a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005794:	f383 8811 	msr	BASEPRI, r3
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	60fb      	str	r3, [r7, #12]
}
 80057a2:	bf00      	nop
 80057a4:	e7fe      	b.n	80057a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057a6:	4b07      	ldr	r3, [pc, #28]	; (80057c4 <vTaskPlaceOnEventList+0x44>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3318      	adds	r3, #24
 80057ac:	4619      	mov	r1, r3
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7fe fb13 	bl	8003dda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80057b4:	2101      	movs	r1, #1
 80057b6:	6838      	ldr	r0, [r7, #0]
 80057b8:	f000 fb7a 	bl	8005eb0 <prvAddCurrentTaskToDelayedList>
}
 80057bc:	bf00      	nop
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	20000878 	.word	0x20000878

080057c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10a      	bne.n	80057f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	617b      	str	r3, [r7, #20]
}
 80057ec:	bf00      	nop
 80057ee:	e7fe      	b.n	80057ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80057f0:	4b0a      	ldr	r3, [pc, #40]	; (800581c <vTaskPlaceOnEventListRestricted+0x54>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3318      	adds	r3, #24
 80057f6:	4619      	mov	r1, r3
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f7fe faca 	bl	8003d92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005804:	f04f 33ff 	mov.w	r3, #4294967295
 8005808:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	68b8      	ldr	r0, [r7, #8]
 800580e:	f000 fb4f 	bl	8005eb0 <prvAddCurrentTaskToDelayedList>
	}
 8005812:	bf00      	nop
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20000878 	.word	0x20000878

08005820 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10a      	bne.n	800584c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	60fb      	str	r3, [r7, #12]
}
 8005848:	bf00      	nop
 800584a:	e7fe      	b.n	800584a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	3318      	adds	r3, #24
 8005850:	4618      	mov	r0, r3
 8005852:	f7fe fafb 	bl	8003e4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005856:	4b1e      	ldr	r3, [pc, #120]	; (80058d0 <xTaskRemoveFromEventList+0xb0>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d11d      	bne.n	800589a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	3304      	adds	r3, #4
 8005862:	4618      	mov	r0, r3
 8005864:	f7fe faf2 	bl	8003e4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800586c:	4b19      	ldr	r3, [pc, #100]	; (80058d4 <xTaskRemoveFromEventList+0xb4>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	429a      	cmp	r2, r3
 8005872:	d903      	bls.n	800587c <xTaskRemoveFromEventList+0x5c>
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	4a16      	ldr	r2, [pc, #88]	; (80058d4 <xTaskRemoveFromEventList+0xb4>)
 800587a:	6013      	str	r3, [r2, #0]
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005880:	4613      	mov	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4a13      	ldr	r2, [pc, #76]	; (80058d8 <xTaskRemoveFromEventList+0xb8>)
 800588a:	441a      	add	r2, r3
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	3304      	adds	r3, #4
 8005890:	4619      	mov	r1, r3
 8005892:	4610      	mov	r0, r2
 8005894:	f7fe fa7d 	bl	8003d92 <vListInsertEnd>
 8005898:	e005      	b.n	80058a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	3318      	adds	r3, #24
 800589e:	4619      	mov	r1, r3
 80058a0:	480e      	ldr	r0, [pc, #56]	; (80058dc <xTaskRemoveFromEventList+0xbc>)
 80058a2:	f7fe fa76 	bl	8003d92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058aa:	4b0d      	ldr	r3, [pc, #52]	; (80058e0 <xTaskRemoveFromEventList+0xc0>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d905      	bls.n	80058c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80058b4:	2301      	movs	r3, #1
 80058b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80058b8:	4b0a      	ldr	r3, [pc, #40]	; (80058e4 <xTaskRemoveFromEventList+0xc4>)
 80058ba:	2201      	movs	r2, #1
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	e001      	b.n	80058c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80058c0:	2300      	movs	r3, #0
 80058c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80058c4:	697b      	ldr	r3, [r7, #20]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	20000d74 	.word	0x20000d74
 80058d4:	20000d54 	.word	0x20000d54
 80058d8:	2000087c 	.word	0x2000087c
 80058dc:	20000d0c 	.word	0x20000d0c
 80058e0:	20000878 	.word	0x20000878
 80058e4:	20000d60 	.word	0x20000d60

080058e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80058f0:	4b06      	ldr	r3, [pc, #24]	; (800590c <vTaskInternalSetTimeOutState+0x24>)
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80058f8:	4b05      	ldr	r3, [pc, #20]	; (8005910 <vTaskInternalSetTimeOutState+0x28>)
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	605a      	str	r2, [r3, #4]
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	20000d64 	.word	0x20000d64
 8005910:	20000d50 	.word	0x20000d50

08005914 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b088      	sub	sp, #32
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d10a      	bne.n	800593a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	613b      	str	r3, [r7, #16]
}
 8005936:	bf00      	nop
 8005938:	e7fe      	b.n	8005938 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10a      	bne.n	8005956 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005944:	f383 8811 	msr	BASEPRI, r3
 8005948:	f3bf 8f6f 	isb	sy
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	60fb      	str	r3, [r7, #12]
}
 8005952:	bf00      	nop
 8005954:	e7fe      	b.n	8005954 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005956:	f000 ff7d 	bl	8006854 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800595a:	4b1d      	ldr	r3, [pc, #116]	; (80059d0 <xTaskCheckForTimeOut+0xbc>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005972:	d102      	bne.n	800597a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005974:	2300      	movs	r3, #0
 8005976:	61fb      	str	r3, [r7, #28]
 8005978:	e023      	b.n	80059c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	4b15      	ldr	r3, [pc, #84]	; (80059d4 <xTaskCheckForTimeOut+0xc0>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	429a      	cmp	r2, r3
 8005984:	d007      	beq.n	8005996 <xTaskCheckForTimeOut+0x82>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	429a      	cmp	r2, r3
 800598e:	d302      	bcc.n	8005996 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005990:	2301      	movs	r3, #1
 8005992:	61fb      	str	r3, [r7, #28]
 8005994:	e015      	b.n	80059c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	429a      	cmp	r2, r3
 800599e:	d20b      	bcs.n	80059b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	1ad2      	subs	r2, r2, r3
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f7ff ff9b 	bl	80058e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80059b2:	2300      	movs	r3, #0
 80059b4:	61fb      	str	r3, [r7, #28]
 80059b6:	e004      	b.n	80059c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2200      	movs	r2, #0
 80059bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80059be:	2301      	movs	r3, #1
 80059c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80059c2:	f000 ff77 	bl	80068b4 <vPortExitCritical>

	return xReturn;
 80059c6:	69fb      	ldr	r3, [r7, #28]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3720      	adds	r7, #32
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	20000d50 	.word	0x20000d50
 80059d4:	20000d64 	.word	0x20000d64

080059d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80059dc:	4b03      	ldr	r3, [pc, #12]	; (80059ec <vTaskMissedYield+0x14>)
 80059de:	2201      	movs	r2, #1
 80059e0:	601a      	str	r2, [r3, #0]
}
 80059e2:	bf00      	nop
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	20000d60 	.word	0x20000d60

080059f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059f8:	f000 f852 	bl	8005aa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059fc:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <prvIdleTask+0x28>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d9f9      	bls.n	80059f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005a04:	4b05      	ldr	r3, [pc, #20]	; (8005a1c <prvIdleTask+0x2c>)
 8005a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005a14:	e7f0      	b.n	80059f8 <prvIdleTask+0x8>
 8005a16:	bf00      	nop
 8005a18:	2000087c 	.word	0x2000087c
 8005a1c:	e000ed04 	.word	0xe000ed04

08005a20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a26:	2300      	movs	r3, #0
 8005a28:	607b      	str	r3, [r7, #4]
 8005a2a:	e00c      	b.n	8005a46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4a12      	ldr	r2, [pc, #72]	; (8005a80 <prvInitialiseTaskLists+0x60>)
 8005a38:	4413      	add	r3, r2
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fe f97c 	bl	8003d38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3301      	adds	r3, #1
 8005a44:	607b      	str	r3, [r7, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b37      	cmp	r3, #55	; 0x37
 8005a4a:	d9ef      	bls.n	8005a2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a4c:	480d      	ldr	r0, [pc, #52]	; (8005a84 <prvInitialiseTaskLists+0x64>)
 8005a4e:	f7fe f973 	bl	8003d38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a52:	480d      	ldr	r0, [pc, #52]	; (8005a88 <prvInitialiseTaskLists+0x68>)
 8005a54:	f7fe f970 	bl	8003d38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a58:	480c      	ldr	r0, [pc, #48]	; (8005a8c <prvInitialiseTaskLists+0x6c>)
 8005a5a:	f7fe f96d 	bl	8003d38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a5e:	480c      	ldr	r0, [pc, #48]	; (8005a90 <prvInitialiseTaskLists+0x70>)
 8005a60:	f7fe f96a 	bl	8003d38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a64:	480b      	ldr	r0, [pc, #44]	; (8005a94 <prvInitialiseTaskLists+0x74>)
 8005a66:	f7fe f967 	bl	8003d38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a6a:	4b0b      	ldr	r3, [pc, #44]	; (8005a98 <prvInitialiseTaskLists+0x78>)
 8005a6c:	4a05      	ldr	r2, [pc, #20]	; (8005a84 <prvInitialiseTaskLists+0x64>)
 8005a6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a70:	4b0a      	ldr	r3, [pc, #40]	; (8005a9c <prvInitialiseTaskLists+0x7c>)
 8005a72:	4a05      	ldr	r2, [pc, #20]	; (8005a88 <prvInitialiseTaskLists+0x68>)
 8005a74:	601a      	str	r2, [r3, #0]
}
 8005a76:	bf00      	nop
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	2000087c 	.word	0x2000087c
 8005a84:	20000cdc 	.word	0x20000cdc
 8005a88:	20000cf0 	.word	0x20000cf0
 8005a8c:	20000d0c 	.word	0x20000d0c
 8005a90:	20000d20 	.word	0x20000d20
 8005a94:	20000d38 	.word	0x20000d38
 8005a98:	20000d04 	.word	0x20000d04
 8005a9c:	20000d08 	.word	0x20000d08

08005aa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005aa6:	e019      	b.n	8005adc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005aa8:	f000 fed4 	bl	8006854 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005aac:	4b10      	ldr	r3, [pc, #64]	; (8005af0 <prvCheckTasksWaitingTermination+0x50>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fe f9c7 	bl	8003e4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005abe:	4b0d      	ldr	r3, [pc, #52]	; (8005af4 <prvCheckTasksWaitingTermination+0x54>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	4a0b      	ldr	r2, [pc, #44]	; (8005af4 <prvCheckTasksWaitingTermination+0x54>)
 8005ac6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ac8:	4b0b      	ldr	r3, [pc, #44]	; (8005af8 <prvCheckTasksWaitingTermination+0x58>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3b01      	subs	r3, #1
 8005ace:	4a0a      	ldr	r2, [pc, #40]	; (8005af8 <prvCheckTasksWaitingTermination+0x58>)
 8005ad0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ad2:	f000 feef 	bl	80068b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f810 	bl	8005afc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005adc:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <prvCheckTasksWaitingTermination+0x58>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e1      	bne.n	8005aa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ae4:	bf00      	nop
 8005ae6:	bf00      	nop
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20000d20 	.word	0x20000d20
 8005af4:	20000d4c 	.word	0x20000d4c
 8005af8:	20000d34 	.word	0x20000d34

08005afc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d108      	bne.n	8005b20 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b12:	4618      	mov	r0, r3
 8005b14:	f001 f88c 	bl	8006c30 <vPortFree>
				vPortFree( pxTCB );
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f001 f889 	bl	8006c30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b1e:	e018      	b.n	8005b52 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d103      	bne.n	8005b32 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f001 f880 	bl	8006c30 <vPortFree>
	}
 8005b30:	e00f      	b.n	8005b52 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d00a      	beq.n	8005b52 <prvDeleteTCB+0x56>
	__asm volatile
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	60fb      	str	r3, [r7, #12]
}
 8005b4e:	bf00      	nop
 8005b50:	e7fe      	b.n	8005b50 <prvDeleteTCB+0x54>
	}
 8005b52:	bf00      	nop
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
	...

08005b5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b62:	4b0c      	ldr	r3, [pc, #48]	; (8005b94 <prvResetNextTaskUnblockTime+0x38>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d104      	bne.n	8005b76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b6c:	4b0a      	ldr	r3, [pc, #40]	; (8005b98 <prvResetNextTaskUnblockTime+0x3c>)
 8005b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b74:	e008      	b.n	8005b88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b76:	4b07      	ldr	r3, [pc, #28]	; (8005b94 <prvResetNextTaskUnblockTime+0x38>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	4a04      	ldr	r2, [pc, #16]	; (8005b98 <prvResetNextTaskUnblockTime+0x3c>)
 8005b86:	6013      	str	r3, [r2, #0]
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	20000d04 	.word	0x20000d04
 8005b98:	20000d6c 	.word	0x20000d6c

08005b9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ba2:	4b0b      	ldr	r3, [pc, #44]	; (8005bd0 <xTaskGetSchedulerState+0x34>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d102      	bne.n	8005bb0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005baa:	2301      	movs	r3, #1
 8005bac:	607b      	str	r3, [r7, #4]
 8005bae:	e008      	b.n	8005bc2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bb0:	4b08      	ldr	r3, [pc, #32]	; (8005bd4 <xTaskGetSchedulerState+0x38>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d102      	bne.n	8005bbe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005bb8:	2302      	movs	r3, #2
 8005bba:	607b      	str	r3, [r7, #4]
 8005bbc:	e001      	b.n	8005bc2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005bc2:	687b      	ldr	r3, [r7, #4]
	}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	20000d58 	.word	0x20000d58
 8005bd4:	20000d74 	.word	0x20000d74

08005bd8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005be4:	2300      	movs	r3, #0
 8005be6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d051      	beq.n	8005c92 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf2:	4b2a      	ldr	r3, [pc, #168]	; (8005c9c <xTaskPriorityInherit+0xc4>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d241      	bcs.n	8005c80 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	db06      	blt.n	8005c12 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c04:	4b25      	ldr	r3, [pc, #148]	; (8005c9c <xTaskPriorityInherit+0xc4>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	6959      	ldr	r1, [r3, #20]
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4a1f      	ldr	r2, [pc, #124]	; (8005ca0 <xTaskPriorityInherit+0xc8>)
 8005c24:	4413      	add	r3, r2
 8005c26:	4299      	cmp	r1, r3
 8005c28:	d122      	bne.n	8005c70 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fe f90c 	bl	8003e4c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c34:	4b19      	ldr	r3, [pc, #100]	; (8005c9c <xTaskPriorityInherit+0xc4>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c42:	4b18      	ldr	r3, [pc, #96]	; (8005ca4 <xTaskPriorityInherit+0xcc>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d903      	bls.n	8005c52 <xTaskPriorityInherit+0x7a>
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4e:	4a15      	ldr	r2, [pc, #84]	; (8005ca4 <xTaskPriorityInherit+0xcc>)
 8005c50:	6013      	str	r3, [r2, #0]
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c56:	4613      	mov	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4a10      	ldr	r2, [pc, #64]	; (8005ca0 <xTaskPriorityInherit+0xc8>)
 8005c60:	441a      	add	r2, r3
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	3304      	adds	r3, #4
 8005c66:	4619      	mov	r1, r3
 8005c68:	4610      	mov	r0, r2
 8005c6a:	f7fe f892 	bl	8003d92 <vListInsertEnd>
 8005c6e:	e004      	b.n	8005c7a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c70:	4b0a      	ldr	r3, [pc, #40]	; (8005c9c <xTaskPriorityInherit+0xc4>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	60fb      	str	r3, [r7, #12]
 8005c7e:	e008      	b.n	8005c92 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c84:	4b05      	ldr	r3, [pc, #20]	; (8005c9c <xTaskPriorityInherit+0xc4>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d201      	bcs.n	8005c92 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c92:	68fb      	ldr	r3, [r7, #12]
	}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3710      	adds	r7, #16
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	20000878 	.word	0x20000878
 8005ca0:	2000087c 	.word	0x2000087c
 8005ca4:	20000d54 	.word	0x20000d54

08005ca8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d056      	beq.n	8005d6c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005cbe:	4b2e      	ldr	r3, [pc, #184]	; (8005d78 <xTaskPriorityDisinherit+0xd0>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d00a      	beq.n	8005cde <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	60fb      	str	r3, [r7, #12]
}
 8005cda:	bf00      	nop
 8005cdc:	e7fe      	b.n	8005cdc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10a      	bne.n	8005cfc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	60bb      	str	r3, [r7, #8]
}
 8005cf8:	bf00      	nop
 8005cfa:	e7fe      	b.n	8005cfa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d00:	1e5a      	subs	r2, r3, #1
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d02c      	beq.n	8005d6c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d128      	bne.n	8005d6c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fe f894 	bl	8003e4c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d3c:	4b0f      	ldr	r3, [pc, #60]	; (8005d7c <xTaskPriorityDisinherit+0xd4>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d903      	bls.n	8005d4c <xTaskPriorityDisinherit+0xa4>
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d48:	4a0c      	ldr	r2, [pc, #48]	; (8005d7c <xTaskPriorityDisinherit+0xd4>)
 8005d4a:	6013      	str	r3, [r2, #0]
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d50:	4613      	mov	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4a09      	ldr	r2, [pc, #36]	; (8005d80 <xTaskPriorityDisinherit+0xd8>)
 8005d5a:	441a      	add	r2, r3
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	3304      	adds	r3, #4
 8005d60:	4619      	mov	r1, r3
 8005d62:	4610      	mov	r0, r2
 8005d64:	f7fe f815 	bl	8003d92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d6c:	697b      	ldr	r3, [r7, #20]
	}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20000878 	.word	0x20000878
 8005d7c:	20000d54 	.word	0x20000d54
 8005d80:	2000087c 	.word	0x2000087c

08005d84 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005d92:	2301      	movs	r3, #1
 8005d94:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d06a      	beq.n	8005e72 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10a      	bne.n	8005dba <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	60fb      	str	r3, [r7, #12]
}
 8005db6:	bf00      	nop
 8005db8:	e7fe      	b.n	8005db8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dbe:	683a      	ldr	r2, [r7, #0]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d902      	bls.n	8005dca <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	61fb      	str	r3, [r7, #28]
 8005dc8:	e002      	b.n	8005dd0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dce:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	69fa      	ldr	r2, [r7, #28]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d04b      	beq.n	8005e72 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d146      	bne.n	8005e72 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005de4:	4b25      	ldr	r3, [pc, #148]	; (8005e7c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d10a      	bne.n	8005e04 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	60bb      	str	r3, [r7, #8]
}
 8005e00:	bf00      	nop
 8005e02:	e7fe      	b.n	8005e02 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e08:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	69fa      	ldr	r2, [r7, #28]
 8005e0e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	db04      	blt.n	8005e22 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	6959      	ldr	r1, [r3, #20]
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4a13      	ldr	r2, [pc, #76]	; (8005e80 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005e32:	4413      	add	r3, r2
 8005e34:	4299      	cmp	r1, r3
 8005e36:	d11c      	bne.n	8005e72 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7fe f805 	bl	8003e4c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e46:	4b0f      	ldr	r3, [pc, #60]	; (8005e84 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d903      	bls.n	8005e56 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e52:	4a0c      	ldr	r2, [pc, #48]	; (8005e84 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4a07      	ldr	r2, [pc, #28]	; (8005e80 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005e64:	441a      	add	r2, r3
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	3304      	adds	r3, #4
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	4610      	mov	r0, r2
 8005e6e:	f7fd ff90 	bl	8003d92 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e72:	bf00      	nop
 8005e74:	3720      	adds	r7, #32
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	20000878 	.word	0x20000878
 8005e80:	2000087c 	.word	0x2000087c
 8005e84:	20000d54 	.word	0x20000d54

08005e88 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005e88:	b480      	push	{r7}
 8005e8a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005e8c:	4b07      	ldr	r3, [pc, #28]	; (8005eac <pvTaskIncrementMutexHeldCount+0x24>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d004      	beq.n	8005e9e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005e94:	4b05      	ldr	r3, [pc, #20]	; (8005eac <pvTaskIncrementMutexHeldCount+0x24>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e9a:	3201      	adds	r2, #1
 8005e9c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005e9e:	4b03      	ldr	r3, [pc, #12]	; (8005eac <pvTaskIncrementMutexHeldCount+0x24>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
	}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	20000878 	.word	0x20000878

08005eb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005eba:	4b21      	ldr	r3, [pc, #132]	; (8005f40 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ec0:	4b20      	ldr	r3, [pc, #128]	; (8005f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fd ffc0 	bl	8003e4c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed2:	d10a      	bne.n	8005eea <prvAddCurrentTaskToDelayedList+0x3a>
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d007      	beq.n	8005eea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005eda:	4b1a      	ldr	r3, [pc, #104]	; (8005f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	3304      	adds	r3, #4
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4819      	ldr	r0, [pc, #100]	; (8005f48 <prvAddCurrentTaskToDelayedList+0x98>)
 8005ee4:	f7fd ff55 	bl	8003d92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ee8:	e026      	b.n	8005f38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4413      	add	r3, r2
 8005ef0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005ef2:	4b14      	ldr	r3, [pc, #80]	; (8005f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d209      	bcs.n	8005f16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f02:	4b12      	ldr	r3, [pc, #72]	; (8005f4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	4b0f      	ldr	r3, [pc, #60]	; (8005f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4610      	mov	r0, r2
 8005f10:	f7fd ff63 	bl	8003dda <vListInsert>
}
 8005f14:	e010      	b.n	8005f38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f16:	4b0e      	ldr	r3, [pc, #56]	; (8005f50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4619      	mov	r1, r3
 8005f22:	4610      	mov	r0, r2
 8005f24:	f7fd ff59 	bl	8003dda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f28:	4b0a      	ldr	r3, [pc, #40]	; (8005f54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d202      	bcs.n	8005f38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005f32:	4a08      	ldr	r2, [pc, #32]	; (8005f54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	6013      	str	r3, [r2, #0]
}
 8005f38:	bf00      	nop
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	20000d50 	.word	0x20000d50
 8005f44:	20000878 	.word	0x20000878
 8005f48:	20000d38 	.word	0x20000d38
 8005f4c:	20000d08 	.word	0x20000d08
 8005f50:	20000d04 	.word	0x20000d04
 8005f54:	20000d6c 	.word	0x20000d6c

08005f58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08a      	sub	sp, #40	; 0x28
 8005f5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f62:	f000 fb07 	bl	8006574 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f66:	4b1c      	ldr	r3, [pc, #112]	; (8005fd8 <xTimerCreateTimerTask+0x80>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d021      	beq.n	8005fb2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f76:	1d3a      	adds	r2, r7, #4
 8005f78:	f107 0108 	add.w	r1, r7, #8
 8005f7c:	f107 030c 	add.w	r3, r7, #12
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7fd febf 	bl	8003d04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f86:	6879      	ldr	r1, [r7, #4]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	9202      	str	r2, [sp, #8]
 8005f8e:	9301      	str	r3, [sp, #4]
 8005f90:	2302      	movs	r3, #2
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	2300      	movs	r3, #0
 8005f96:	460a      	mov	r2, r1
 8005f98:	4910      	ldr	r1, [pc, #64]	; (8005fdc <xTimerCreateTimerTask+0x84>)
 8005f9a:	4811      	ldr	r0, [pc, #68]	; (8005fe0 <xTimerCreateTimerTask+0x88>)
 8005f9c:	f7fe ff8e 	bl	8004ebc <xTaskCreateStatic>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	4a10      	ldr	r2, [pc, #64]	; (8005fe4 <xTimerCreateTimerTask+0x8c>)
 8005fa4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005fa6:	4b0f      	ldr	r3, [pc, #60]	; (8005fe4 <xTimerCreateTimerTask+0x8c>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10a      	bne.n	8005fce <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbc:	f383 8811 	msr	BASEPRI, r3
 8005fc0:	f3bf 8f6f 	isb	sy
 8005fc4:	f3bf 8f4f 	dsb	sy
 8005fc8:	613b      	str	r3, [r7, #16]
}
 8005fca:	bf00      	nop
 8005fcc:	e7fe      	b.n	8005fcc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005fce:	697b      	ldr	r3, [r7, #20]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	20000da8 	.word	0x20000da8
 8005fdc:	08006f20 	.word	0x08006f20
 8005fe0:	0800611d 	.word	0x0800611d
 8005fe4:	20000dac 	.word	0x20000dac

08005fe8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08a      	sub	sp, #40	; 0x28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
 8005ff4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10a      	bne.n	8006016 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006004:	f383 8811 	msr	BASEPRI, r3
 8006008:	f3bf 8f6f 	isb	sy
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	623b      	str	r3, [r7, #32]
}
 8006012:	bf00      	nop
 8006014:	e7fe      	b.n	8006014 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006016:	4b1a      	ldr	r3, [pc, #104]	; (8006080 <xTimerGenericCommand+0x98>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d02a      	beq.n	8006074 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	2b05      	cmp	r3, #5
 800602e:	dc18      	bgt.n	8006062 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006030:	f7ff fdb4 	bl	8005b9c <xTaskGetSchedulerState>
 8006034:	4603      	mov	r3, r0
 8006036:	2b02      	cmp	r3, #2
 8006038:	d109      	bne.n	800604e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800603a:	4b11      	ldr	r3, [pc, #68]	; (8006080 <xTimerGenericCommand+0x98>)
 800603c:	6818      	ldr	r0, [r3, #0]
 800603e:	f107 0110 	add.w	r1, r7, #16
 8006042:	2300      	movs	r3, #0
 8006044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006046:	f7fe f8d3 	bl	80041f0 <xQueueGenericSend>
 800604a:	6278      	str	r0, [r7, #36]	; 0x24
 800604c:	e012      	b.n	8006074 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800604e:	4b0c      	ldr	r3, [pc, #48]	; (8006080 <xTimerGenericCommand+0x98>)
 8006050:	6818      	ldr	r0, [r3, #0]
 8006052:	f107 0110 	add.w	r1, r7, #16
 8006056:	2300      	movs	r3, #0
 8006058:	2200      	movs	r2, #0
 800605a:	f7fe f8c9 	bl	80041f0 <xQueueGenericSend>
 800605e:	6278      	str	r0, [r7, #36]	; 0x24
 8006060:	e008      	b.n	8006074 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006062:	4b07      	ldr	r3, [pc, #28]	; (8006080 <xTimerGenericCommand+0x98>)
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	f107 0110 	add.w	r1, r7, #16
 800606a:	2300      	movs	r3, #0
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	f7fe f9bd 	bl	80043ec <xQueueGenericSendFromISR>
 8006072:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006076:	4618      	mov	r0, r3
 8006078:	3728      	adds	r7, #40	; 0x28
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20000da8 	.word	0x20000da8

08006084 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b088      	sub	sp, #32
 8006088:	af02      	add	r7, sp, #8
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800608e:	4b22      	ldr	r3, [pc, #136]	; (8006118 <prvProcessExpiredTimer+0x94>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	3304      	adds	r3, #4
 800609c:	4618      	mov	r0, r3
 800609e:	f7fd fed5 	bl	8003e4c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060a8:	f003 0304 	and.w	r3, r3, #4
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d022      	beq.n	80060f6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	699a      	ldr	r2, [r3, #24]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	18d1      	adds	r1, r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	6978      	ldr	r0, [r7, #20]
 80060be:	f000 f8d1 	bl	8006264 <prvInsertTimerInActiveList>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d01f      	beq.n	8006108 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060c8:	2300      	movs	r3, #0
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	2300      	movs	r3, #0
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	2100      	movs	r1, #0
 80060d2:	6978      	ldr	r0, [r7, #20]
 80060d4:	f7ff ff88 	bl	8005fe8 <xTimerGenericCommand>
 80060d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d113      	bne.n	8006108 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	60fb      	str	r3, [r7, #12]
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060fc:	f023 0301 	bic.w	r3, r3, #1
 8006100:	b2da      	uxtb	r2, r3
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	6978      	ldr	r0, [r7, #20]
 800610e:	4798      	blx	r3
}
 8006110:	bf00      	nop
 8006112:	3718      	adds	r7, #24
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}
 8006118:	20000da0 	.word	0x20000da0

0800611c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006124:	f107 0308 	add.w	r3, r7, #8
 8006128:	4618      	mov	r0, r3
 800612a:	f000 f857 	bl	80061dc <prvGetNextExpireTime>
 800612e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	4619      	mov	r1, r3
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 f803 	bl	8006140 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800613a:	f000 f8d5 	bl	80062e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800613e:	e7f1      	b.n	8006124 <prvTimerTask+0x8>

08006140 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800614a:	f7ff f93d 	bl	80053c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800614e:	f107 0308 	add.w	r3, r7, #8
 8006152:	4618      	mov	r0, r3
 8006154:	f000 f866 	bl	8006224 <prvSampleTimeNow>
 8006158:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d130      	bne.n	80061c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10a      	bne.n	800617c <prvProcessTimerOrBlockTask+0x3c>
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	429a      	cmp	r2, r3
 800616c:	d806      	bhi.n	800617c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800616e:	f7ff f939 	bl	80053e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006172:	68f9      	ldr	r1, [r7, #12]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7ff ff85 	bl	8006084 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800617a:	e024      	b.n	80061c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d008      	beq.n	8006194 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006182:	4b13      	ldr	r3, [pc, #76]	; (80061d0 <prvProcessTimerOrBlockTask+0x90>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <prvProcessTimerOrBlockTask+0x50>
 800618c:	2301      	movs	r3, #1
 800618e:	e000      	b.n	8006192 <prvProcessTimerOrBlockTask+0x52>
 8006190:	2300      	movs	r3, #0
 8006192:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006194:	4b0f      	ldr	r3, [pc, #60]	; (80061d4 <prvProcessTimerOrBlockTask+0x94>)
 8006196:	6818      	ldr	r0, [r3, #0]
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	4619      	mov	r1, r3
 80061a2:	f7fe fe57 	bl	8004e54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80061a6:	f7ff f91d 	bl	80053e4 <xTaskResumeAll>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10a      	bne.n	80061c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80061b0:	4b09      	ldr	r3, [pc, #36]	; (80061d8 <prvProcessTimerOrBlockTask+0x98>)
 80061b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	f3bf 8f6f 	isb	sy
}
 80061c0:	e001      	b.n	80061c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80061c2:	f7ff f90f 	bl	80053e4 <xTaskResumeAll>
}
 80061c6:	bf00      	nop
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	20000da4 	.word	0x20000da4
 80061d4:	20000da8 	.word	0x20000da8
 80061d8:	e000ed04 	.word	0xe000ed04

080061dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80061e4:	4b0e      	ldr	r3, [pc, #56]	; (8006220 <prvGetNextExpireTime+0x44>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <prvGetNextExpireTime+0x16>
 80061ee:	2201      	movs	r2, #1
 80061f0:	e000      	b.n	80061f4 <prvGetNextExpireTime+0x18>
 80061f2:	2200      	movs	r2, #0
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d105      	bne.n	800620c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006200:	4b07      	ldr	r3, [pc, #28]	; (8006220 <prvGetNextExpireTime+0x44>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	60fb      	str	r3, [r7, #12]
 800620a:	e001      	b.n	8006210 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006210:	68fb      	ldr	r3, [r7, #12]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3714      	adds	r7, #20
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	20000da0 	.word	0x20000da0

08006224 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800622c:	f7ff f978 	bl	8005520 <xTaskGetTickCount>
 8006230:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006232:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <prvSampleTimeNow+0x3c>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	429a      	cmp	r2, r3
 800623a:	d205      	bcs.n	8006248 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800623c:	f000 f936 	bl	80064ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	e002      	b.n	800624e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800624e:	4a04      	ldr	r2, [pc, #16]	; (8006260 <prvSampleTimeNow+0x3c>)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006254:	68fb      	ldr	r3, [r7, #12]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	20000db0 	.word	0x20000db0

08006264 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006272:	2300      	movs	r3, #0
 8006274:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	429a      	cmp	r2, r3
 8006288:	d812      	bhi.n	80062b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	1ad2      	subs	r2, r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	429a      	cmp	r2, r3
 8006296:	d302      	bcc.n	800629e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006298:	2301      	movs	r3, #1
 800629a:	617b      	str	r3, [r7, #20]
 800629c:	e01b      	b.n	80062d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800629e:	4b10      	ldr	r3, [pc, #64]	; (80062e0 <prvInsertTimerInActiveList+0x7c>)
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	3304      	adds	r3, #4
 80062a6:	4619      	mov	r1, r3
 80062a8:	4610      	mov	r0, r2
 80062aa:	f7fd fd96 	bl	8003dda <vListInsert>
 80062ae:	e012      	b.n	80062d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d206      	bcs.n	80062c6 <prvInsertTimerInActiveList+0x62>
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d302      	bcc.n	80062c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80062c0:	2301      	movs	r3, #1
 80062c2:	617b      	str	r3, [r7, #20]
 80062c4:	e007      	b.n	80062d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062c6:	4b07      	ldr	r3, [pc, #28]	; (80062e4 <prvInsertTimerInActiveList+0x80>)
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	3304      	adds	r3, #4
 80062ce:	4619      	mov	r1, r3
 80062d0:	4610      	mov	r0, r2
 80062d2:	f7fd fd82 	bl	8003dda <vListInsert>
		}
	}

	return xProcessTimerNow;
 80062d6:	697b      	ldr	r3, [r7, #20]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3718      	adds	r7, #24
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	20000da4 	.word	0x20000da4
 80062e4:	20000da0 	.word	0x20000da0

080062e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08e      	sub	sp, #56	; 0x38
 80062ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062ee:	e0ca      	b.n	8006486 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	da18      	bge.n	8006328 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80062f6:	1d3b      	adds	r3, r7, #4
 80062f8:	3304      	adds	r3, #4
 80062fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80062fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10a      	bne.n	8006318 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	61fb      	str	r3, [r7, #28]
}
 8006314:	bf00      	nop
 8006316:	e7fe      	b.n	8006316 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800631e:	6850      	ldr	r0, [r2, #4]
 8006320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006322:	6892      	ldr	r2, [r2, #8]
 8006324:	4611      	mov	r1, r2
 8006326:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	f2c0 80ab 	blt.w	8006486 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d004      	beq.n	8006346 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800633c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633e:	3304      	adds	r3, #4
 8006340:	4618      	mov	r0, r3
 8006342:	f7fd fd83 	bl	8003e4c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006346:	463b      	mov	r3, r7
 8006348:	4618      	mov	r0, r3
 800634a:	f7ff ff6b 	bl	8006224 <prvSampleTimeNow>
 800634e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b09      	cmp	r3, #9
 8006354:	f200 8096 	bhi.w	8006484 <prvProcessReceivedCommands+0x19c>
 8006358:	a201      	add	r2, pc, #4	; (adr r2, 8006360 <prvProcessReceivedCommands+0x78>)
 800635a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635e:	bf00      	nop
 8006360:	08006389 	.word	0x08006389
 8006364:	08006389 	.word	0x08006389
 8006368:	08006389 	.word	0x08006389
 800636c:	080063fd 	.word	0x080063fd
 8006370:	08006411 	.word	0x08006411
 8006374:	0800645b 	.word	0x0800645b
 8006378:	08006389 	.word	0x08006389
 800637c:	08006389 	.word	0x08006389
 8006380:	080063fd 	.word	0x080063fd
 8006384:	08006411 	.word	0x08006411
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800638e:	f043 0301 	orr.w	r3, r3, #1
 8006392:	b2da      	uxtb	r2, r3
 8006394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006396:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	18d1      	adds	r1, r2, r3
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063a8:	f7ff ff5c 	bl	8006264 <prvInsertTimerInActiveList>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d069      	beq.n	8006486 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063c0:	f003 0304 	and.w	r3, r3, #4
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d05e      	beq.n	8006486 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	441a      	add	r2, r3
 80063d0:	2300      	movs	r3, #0
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	2300      	movs	r3, #0
 80063d6:	2100      	movs	r1, #0
 80063d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063da:	f7ff fe05 	bl	8005fe8 <xTimerGenericCommand>
 80063de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d14f      	bne.n	8006486 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80063e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	61bb      	str	r3, [r7, #24]
}
 80063f8:	bf00      	nop
 80063fa:	e7fe      	b.n	80063fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006402:	f023 0301 	bic.w	r3, r3, #1
 8006406:	b2da      	uxtb	r2, r3
 8006408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800640e:	e03a      	b.n	8006486 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006412:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006416:	f043 0301 	orr.w	r3, r3, #1
 800641a:	b2da      	uxtb	r2, r3
 800641c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10a      	bne.n	8006446 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006434:	f383 8811 	msr	BASEPRI, r3
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	617b      	str	r3, [r7, #20]
}
 8006442:	bf00      	nop
 8006444:	e7fe      	b.n	8006444 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006448:	699a      	ldr	r2, [r3, #24]
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	18d1      	adds	r1, r2, r3
 800644e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006454:	f7ff ff06 	bl	8006264 <prvInsertTimerInActiveList>
					break;
 8006458:	e015      	b.n	8006486 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800645a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d103      	bne.n	8006470 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800646a:	f000 fbe1 	bl	8006c30 <vPortFree>
 800646e:	e00a      	b.n	8006486 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006476:	f023 0301 	bic.w	r3, r3, #1
 800647a:	b2da      	uxtb	r2, r3
 800647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006482:	e000      	b.n	8006486 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006484:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006486:	4b08      	ldr	r3, [pc, #32]	; (80064a8 <prvProcessReceivedCommands+0x1c0>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	1d39      	adds	r1, r7, #4
 800648c:	2200      	movs	r2, #0
 800648e:	4618      	mov	r0, r3
 8006490:	f7fe f8d4 	bl	800463c <xQueueReceive>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	f47f af2a 	bne.w	80062f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800649c:	bf00      	nop
 800649e:	bf00      	nop
 80064a0:	3730      	adds	r7, #48	; 0x30
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	20000da8 	.word	0x20000da8

080064ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80064b2:	e048      	b.n	8006546 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064b4:	4b2d      	ldr	r3, [pc, #180]	; (800656c <prvSwitchTimerLists+0xc0>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064be:	4b2b      	ldr	r3, [pc, #172]	; (800656c <prvSwitchTimerLists+0xc0>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	3304      	adds	r3, #4
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7fd fcbd 	bl	8003e4c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d02e      	beq.n	8006546 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	4413      	add	r3, r2
 80064f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d90e      	bls.n	8006518 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006506:	4b19      	ldr	r3, [pc, #100]	; (800656c <prvSwitchTimerLists+0xc0>)
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	3304      	adds	r3, #4
 800650e:	4619      	mov	r1, r3
 8006510:	4610      	mov	r0, r2
 8006512:	f7fd fc62 	bl	8003dda <vListInsert>
 8006516:	e016      	b.n	8006546 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006518:	2300      	movs	r3, #0
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	2300      	movs	r3, #0
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	2100      	movs	r1, #0
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f7ff fd60 	bl	8005fe8 <xTimerGenericCommand>
 8006528:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10a      	bne.n	8006546 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	603b      	str	r3, [r7, #0]
}
 8006542:	bf00      	nop
 8006544:	e7fe      	b.n	8006544 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006546:	4b09      	ldr	r3, [pc, #36]	; (800656c <prvSwitchTimerLists+0xc0>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1b1      	bne.n	80064b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006550:	4b06      	ldr	r3, [pc, #24]	; (800656c <prvSwitchTimerLists+0xc0>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006556:	4b06      	ldr	r3, [pc, #24]	; (8006570 <prvSwitchTimerLists+0xc4>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a04      	ldr	r2, [pc, #16]	; (800656c <prvSwitchTimerLists+0xc0>)
 800655c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800655e:	4a04      	ldr	r2, [pc, #16]	; (8006570 <prvSwitchTimerLists+0xc4>)
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	6013      	str	r3, [r2, #0]
}
 8006564:	bf00      	nop
 8006566:	3718      	adds	r7, #24
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	20000da0 	.word	0x20000da0
 8006570:	20000da4 	.word	0x20000da4

08006574 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800657a:	f000 f96b 	bl	8006854 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800657e:	4b15      	ldr	r3, [pc, #84]	; (80065d4 <prvCheckForValidListAndQueue+0x60>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d120      	bne.n	80065c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006586:	4814      	ldr	r0, [pc, #80]	; (80065d8 <prvCheckForValidListAndQueue+0x64>)
 8006588:	f7fd fbd6 	bl	8003d38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800658c:	4813      	ldr	r0, [pc, #76]	; (80065dc <prvCheckForValidListAndQueue+0x68>)
 800658e:	f7fd fbd3 	bl	8003d38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006592:	4b13      	ldr	r3, [pc, #76]	; (80065e0 <prvCheckForValidListAndQueue+0x6c>)
 8006594:	4a10      	ldr	r2, [pc, #64]	; (80065d8 <prvCheckForValidListAndQueue+0x64>)
 8006596:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006598:	4b12      	ldr	r3, [pc, #72]	; (80065e4 <prvCheckForValidListAndQueue+0x70>)
 800659a:	4a10      	ldr	r2, [pc, #64]	; (80065dc <prvCheckForValidListAndQueue+0x68>)
 800659c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800659e:	2300      	movs	r3, #0
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	4b11      	ldr	r3, [pc, #68]	; (80065e8 <prvCheckForValidListAndQueue+0x74>)
 80065a4:	4a11      	ldr	r2, [pc, #68]	; (80065ec <prvCheckForValidListAndQueue+0x78>)
 80065a6:	2110      	movs	r1, #16
 80065a8:	200a      	movs	r0, #10
 80065aa:	f7fd fce1 	bl	8003f70 <xQueueGenericCreateStatic>
 80065ae:	4603      	mov	r3, r0
 80065b0:	4a08      	ldr	r2, [pc, #32]	; (80065d4 <prvCheckForValidListAndQueue+0x60>)
 80065b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80065b4:	4b07      	ldr	r3, [pc, #28]	; (80065d4 <prvCheckForValidListAndQueue+0x60>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d005      	beq.n	80065c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80065bc:	4b05      	ldr	r3, [pc, #20]	; (80065d4 <prvCheckForValidListAndQueue+0x60>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	490b      	ldr	r1, [pc, #44]	; (80065f0 <prvCheckForValidListAndQueue+0x7c>)
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fe fbf2 	bl	8004dac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80065c8:	f000 f974 	bl	80068b4 <vPortExitCritical>
}
 80065cc:	bf00      	nop
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	20000da8 	.word	0x20000da8
 80065d8:	20000d78 	.word	0x20000d78
 80065dc:	20000d8c 	.word	0x20000d8c
 80065e0:	20000da0 	.word	0x20000da0
 80065e4:	20000da4 	.word	0x20000da4
 80065e8:	20000e54 	.word	0x20000e54
 80065ec:	20000db4 	.word	0x20000db4
 80065f0:	08006f28 	.word	0x08006f28

080065f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	3b04      	subs	r3, #4
 8006604:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800660c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3b04      	subs	r3, #4
 8006612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f023 0201 	bic.w	r2, r3, #1
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	3b04      	subs	r3, #4
 8006622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006624:	4a0c      	ldr	r2, [pc, #48]	; (8006658 <pxPortInitialiseStack+0x64>)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3b14      	subs	r3, #20
 800662e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	3b04      	subs	r3, #4
 800663a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f06f 0202 	mvn.w	r2, #2
 8006642:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	3b20      	subs	r3, #32
 8006648:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800664a:	68fb      	ldr	r3, [r7, #12]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	0800665d 	.word	0x0800665d

0800665c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006662:	2300      	movs	r3, #0
 8006664:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006666:	4b12      	ldr	r3, [pc, #72]	; (80066b0 <prvTaskExitError+0x54>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666e:	d00a      	beq.n	8006686 <prvTaskExitError+0x2a>
	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	60fb      	str	r3, [r7, #12]
}
 8006682:	bf00      	nop
 8006684:	e7fe      	b.n	8006684 <prvTaskExitError+0x28>
	__asm volatile
 8006686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	60bb      	str	r3, [r7, #8]
}
 8006698:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800669a:	bf00      	nop
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d0fc      	beq.n	800669c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80066a2:	bf00      	nop
 80066a4:	bf00      	nop
 80066a6:	3714      	adds	r7, #20
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	2000000c 	.word	0x2000000c
	...

080066c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80066c0:	4b07      	ldr	r3, [pc, #28]	; (80066e0 <pxCurrentTCBConst2>)
 80066c2:	6819      	ldr	r1, [r3, #0]
 80066c4:	6808      	ldr	r0, [r1, #0]
 80066c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ca:	f380 8809 	msr	PSP, r0
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f04f 0000 	mov.w	r0, #0
 80066d6:	f380 8811 	msr	BASEPRI, r0
 80066da:	4770      	bx	lr
 80066dc:	f3af 8000 	nop.w

080066e0 <pxCurrentTCBConst2>:
 80066e0:	20000878 	.word	0x20000878
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066e4:	bf00      	nop
 80066e6:	bf00      	nop

080066e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066e8:	4808      	ldr	r0, [pc, #32]	; (800670c <prvPortStartFirstTask+0x24>)
 80066ea:	6800      	ldr	r0, [r0, #0]
 80066ec:	6800      	ldr	r0, [r0, #0]
 80066ee:	f380 8808 	msr	MSP, r0
 80066f2:	f04f 0000 	mov.w	r0, #0
 80066f6:	f380 8814 	msr	CONTROL, r0
 80066fa:	b662      	cpsie	i
 80066fc:	b661      	cpsie	f
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	df00      	svc	0
 8006708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800670a:	bf00      	nop
 800670c:	e000ed08 	.word	0xe000ed08

08006710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006716:	4b46      	ldr	r3, [pc, #280]	; (8006830 <xPortStartScheduler+0x120>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a46      	ldr	r2, [pc, #280]	; (8006834 <xPortStartScheduler+0x124>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d10a      	bne.n	8006736 <xPortStartScheduler+0x26>
	__asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	613b      	str	r3, [r7, #16]
}
 8006732:	bf00      	nop
 8006734:	e7fe      	b.n	8006734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006736:	4b3e      	ldr	r3, [pc, #248]	; (8006830 <xPortStartScheduler+0x120>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a3f      	ldr	r2, [pc, #252]	; (8006838 <xPortStartScheduler+0x128>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d10a      	bne.n	8006756 <xPortStartScheduler+0x46>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	60fb      	str	r3, [r7, #12]
}
 8006752:	bf00      	nop
 8006754:	e7fe      	b.n	8006754 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006756:	4b39      	ldr	r3, [pc, #228]	; (800683c <xPortStartScheduler+0x12c>)
 8006758:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	b2db      	uxtb	r3, r3
 8006760:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	22ff      	movs	r2, #255	; 0xff
 8006766:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	b2db      	uxtb	r3, r3
 800676e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006770:	78fb      	ldrb	r3, [r7, #3]
 8006772:	b2db      	uxtb	r3, r3
 8006774:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006778:	b2da      	uxtb	r2, r3
 800677a:	4b31      	ldr	r3, [pc, #196]	; (8006840 <xPortStartScheduler+0x130>)
 800677c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800677e:	4b31      	ldr	r3, [pc, #196]	; (8006844 <xPortStartScheduler+0x134>)
 8006780:	2207      	movs	r2, #7
 8006782:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006784:	e009      	b.n	800679a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006786:	4b2f      	ldr	r3, [pc, #188]	; (8006844 <xPortStartScheduler+0x134>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3b01      	subs	r3, #1
 800678c:	4a2d      	ldr	r2, [pc, #180]	; (8006844 <xPortStartScheduler+0x134>)
 800678e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006790:	78fb      	ldrb	r3, [r7, #3]
 8006792:	b2db      	uxtb	r3, r3
 8006794:	005b      	lsls	r3, r3, #1
 8006796:	b2db      	uxtb	r3, r3
 8006798:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800679a:	78fb      	ldrb	r3, [r7, #3]
 800679c:	b2db      	uxtb	r3, r3
 800679e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a2:	2b80      	cmp	r3, #128	; 0x80
 80067a4:	d0ef      	beq.n	8006786 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80067a6:	4b27      	ldr	r3, [pc, #156]	; (8006844 <xPortStartScheduler+0x134>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f1c3 0307 	rsb	r3, r3, #7
 80067ae:	2b04      	cmp	r3, #4
 80067b0:	d00a      	beq.n	80067c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	60bb      	str	r3, [r7, #8]
}
 80067c4:	bf00      	nop
 80067c6:	e7fe      	b.n	80067c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80067c8:	4b1e      	ldr	r3, [pc, #120]	; (8006844 <xPortStartScheduler+0x134>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	021b      	lsls	r3, r3, #8
 80067ce:	4a1d      	ldr	r2, [pc, #116]	; (8006844 <xPortStartScheduler+0x134>)
 80067d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80067d2:	4b1c      	ldr	r3, [pc, #112]	; (8006844 <xPortStartScheduler+0x134>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067da:	4a1a      	ldr	r2, [pc, #104]	; (8006844 <xPortStartScheduler+0x134>)
 80067dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067e6:	4b18      	ldr	r3, [pc, #96]	; (8006848 <xPortStartScheduler+0x138>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a17      	ldr	r2, [pc, #92]	; (8006848 <xPortStartScheduler+0x138>)
 80067ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067f2:	4b15      	ldr	r3, [pc, #84]	; (8006848 <xPortStartScheduler+0x138>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a14      	ldr	r2, [pc, #80]	; (8006848 <xPortStartScheduler+0x138>)
 80067f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80067fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80067fe:	f000 f8dd 	bl	80069bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006802:	4b12      	ldr	r3, [pc, #72]	; (800684c <xPortStartScheduler+0x13c>)
 8006804:	2200      	movs	r2, #0
 8006806:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006808:	f000 f8fc 	bl	8006a04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800680c:	4b10      	ldr	r3, [pc, #64]	; (8006850 <xPortStartScheduler+0x140>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a0f      	ldr	r2, [pc, #60]	; (8006850 <xPortStartScheduler+0x140>)
 8006812:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006816:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006818:	f7ff ff66 	bl	80066e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800681c:	f7fe ff52 	bl	80056c4 <vTaskSwitchContext>
	prvTaskExitError();
 8006820:	f7ff ff1c 	bl	800665c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3718      	adds	r7, #24
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	e000ed00 	.word	0xe000ed00
 8006834:	410fc271 	.word	0x410fc271
 8006838:	410fc270 	.word	0x410fc270
 800683c:	e000e400 	.word	0xe000e400
 8006840:	20000ea4 	.word	0x20000ea4
 8006844:	20000ea8 	.word	0x20000ea8
 8006848:	e000ed20 	.word	0xe000ed20
 800684c:	2000000c 	.word	0x2000000c
 8006850:	e000ef34 	.word	0xe000ef34

08006854 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
	__asm volatile
 800685a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800685e:	f383 8811 	msr	BASEPRI, r3
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	f3bf 8f4f 	dsb	sy
 800686a:	607b      	str	r3, [r7, #4]
}
 800686c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800686e:	4b0f      	ldr	r3, [pc, #60]	; (80068ac <vPortEnterCritical+0x58>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3301      	adds	r3, #1
 8006874:	4a0d      	ldr	r2, [pc, #52]	; (80068ac <vPortEnterCritical+0x58>)
 8006876:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006878:	4b0c      	ldr	r3, [pc, #48]	; (80068ac <vPortEnterCritical+0x58>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d10f      	bne.n	80068a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006880:	4b0b      	ldr	r3, [pc, #44]	; (80068b0 <vPortEnterCritical+0x5c>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00a      	beq.n	80068a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800688a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800688e:	f383 8811 	msr	BASEPRI, r3
 8006892:	f3bf 8f6f 	isb	sy
 8006896:	f3bf 8f4f 	dsb	sy
 800689a:	603b      	str	r3, [r7, #0]
}
 800689c:	bf00      	nop
 800689e:	e7fe      	b.n	800689e <vPortEnterCritical+0x4a>
	}
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	2000000c 	.word	0x2000000c
 80068b0:	e000ed04 	.word	0xe000ed04

080068b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80068ba:	4b12      	ldr	r3, [pc, #72]	; (8006904 <vPortExitCritical+0x50>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10a      	bne.n	80068d8 <vPortExitCritical+0x24>
	__asm volatile
 80068c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	607b      	str	r3, [r7, #4]
}
 80068d4:	bf00      	nop
 80068d6:	e7fe      	b.n	80068d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80068d8:	4b0a      	ldr	r3, [pc, #40]	; (8006904 <vPortExitCritical+0x50>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	3b01      	subs	r3, #1
 80068de:	4a09      	ldr	r2, [pc, #36]	; (8006904 <vPortExitCritical+0x50>)
 80068e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068e2:	4b08      	ldr	r3, [pc, #32]	; (8006904 <vPortExitCritical+0x50>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d105      	bne.n	80068f6 <vPortExitCritical+0x42>
 80068ea:	2300      	movs	r3, #0
 80068ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	f383 8811 	msr	BASEPRI, r3
}
 80068f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	2000000c 	.word	0x2000000c
	...

08006910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006910:	f3ef 8009 	mrs	r0, PSP
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	4b15      	ldr	r3, [pc, #84]	; (8006970 <pxCurrentTCBConst>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	f01e 0f10 	tst.w	lr, #16
 8006920:	bf08      	it	eq
 8006922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692a:	6010      	str	r0, [r2, #0]
 800692c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006930:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006934:	f380 8811 	msr	BASEPRI, r0
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f7fe fec0 	bl	80056c4 <vTaskSwitchContext>
 8006944:	f04f 0000 	mov.w	r0, #0
 8006948:	f380 8811 	msr	BASEPRI, r0
 800694c:	bc09      	pop	{r0, r3}
 800694e:	6819      	ldr	r1, [r3, #0]
 8006950:	6808      	ldr	r0, [r1, #0]
 8006952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006956:	f01e 0f10 	tst.w	lr, #16
 800695a:	bf08      	it	eq
 800695c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006960:	f380 8809 	msr	PSP, r0
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	f3af 8000 	nop.w

08006970 <pxCurrentTCBConst>:
 8006970:	20000878 	.word	0x20000878
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006974:	bf00      	nop
 8006976:	bf00      	nop

08006978 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
	__asm volatile
 800697e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	607b      	str	r3, [r7, #4]
}
 8006990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006992:	f7fe fdd5 	bl	8005540 <xTaskIncrementTick>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800699c:	4b06      	ldr	r3, [pc, #24]	; (80069b8 <xPortSysTickHandler+0x40>)
 800699e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	2300      	movs	r3, #0
 80069a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	f383 8811 	msr	BASEPRI, r3
}
 80069ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80069b0:	bf00      	nop
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	e000ed04 	.word	0xe000ed04

080069bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80069c0:	4b0b      	ldr	r3, [pc, #44]	; (80069f0 <vPortSetupTimerInterrupt+0x34>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80069c6:	4b0b      	ldr	r3, [pc, #44]	; (80069f4 <vPortSetupTimerInterrupt+0x38>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80069cc:	4b0a      	ldr	r3, [pc, #40]	; (80069f8 <vPortSetupTimerInterrupt+0x3c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a0a      	ldr	r2, [pc, #40]	; (80069fc <vPortSetupTimerInterrupt+0x40>)
 80069d2:	fba2 2303 	umull	r2, r3, r2, r3
 80069d6:	099b      	lsrs	r3, r3, #6
 80069d8:	4a09      	ldr	r2, [pc, #36]	; (8006a00 <vPortSetupTimerInterrupt+0x44>)
 80069da:	3b01      	subs	r3, #1
 80069dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80069de:	4b04      	ldr	r3, [pc, #16]	; (80069f0 <vPortSetupTimerInterrupt+0x34>)
 80069e0:	2207      	movs	r2, #7
 80069e2:	601a      	str	r2, [r3, #0]
}
 80069e4:	bf00      	nop
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	e000e010 	.word	0xe000e010
 80069f4:	e000e018 	.word	0xe000e018
 80069f8:	20000000 	.word	0x20000000
 80069fc:	10624dd3 	.word	0x10624dd3
 8006a00:	e000e014 	.word	0xe000e014

08006a04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a14 <vPortEnableVFP+0x10>
 8006a08:	6801      	ldr	r1, [r0, #0]
 8006a0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a0e:	6001      	str	r1, [r0, #0]
 8006a10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a12:	bf00      	nop
 8006a14:	e000ed88 	.word	0xe000ed88

08006a18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a1e:	f3ef 8305 	mrs	r3, IPSR
 8006a22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2b0f      	cmp	r3, #15
 8006a28:	d914      	bls.n	8006a54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a2a:	4a17      	ldr	r2, [pc, #92]	; (8006a88 <vPortValidateInterruptPriority+0x70>)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a34:	4b15      	ldr	r3, [pc, #84]	; (8006a8c <vPortValidateInterruptPriority+0x74>)
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	7afa      	ldrb	r2, [r7, #11]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d20a      	bcs.n	8006a54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a42:	f383 8811 	msr	BASEPRI, r3
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	607b      	str	r3, [r7, #4]
}
 8006a50:	bf00      	nop
 8006a52:	e7fe      	b.n	8006a52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a54:	4b0e      	ldr	r3, [pc, #56]	; (8006a90 <vPortValidateInterruptPriority+0x78>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006a5c:	4b0d      	ldr	r3, [pc, #52]	; (8006a94 <vPortValidateInterruptPriority+0x7c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d90a      	bls.n	8006a7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	603b      	str	r3, [r7, #0]
}
 8006a76:	bf00      	nop
 8006a78:	e7fe      	b.n	8006a78 <vPortValidateInterruptPriority+0x60>
	}
 8006a7a:	bf00      	nop
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	e000e3f0 	.word	0xe000e3f0
 8006a8c:	20000ea4 	.word	0x20000ea4
 8006a90:	e000ed0c 	.word	0xe000ed0c
 8006a94:	20000ea8 	.word	0x20000ea8

08006a98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08a      	sub	sp, #40	; 0x28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006aa4:	f7fe fc90 	bl	80053c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006aa8:	4b5b      	ldr	r3, [pc, #364]	; (8006c18 <pvPortMalloc+0x180>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ab0:	f000 f920 	bl	8006cf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ab4:	4b59      	ldr	r3, [pc, #356]	; (8006c1c <pvPortMalloc+0x184>)
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4013      	ands	r3, r2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f040 8093 	bne.w	8006be8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d01d      	beq.n	8006b04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006ac8:	2208      	movs	r2, #8
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4413      	add	r3, r2
 8006ace:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f003 0307 	and.w	r3, r3, #7
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d014      	beq.n	8006b04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f023 0307 	bic.w	r3, r3, #7
 8006ae0:	3308      	adds	r3, #8
 8006ae2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f003 0307 	and.w	r3, r3, #7
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00a      	beq.n	8006b04 <pvPortMalloc+0x6c>
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	617b      	str	r3, [r7, #20]
}
 8006b00:	bf00      	nop
 8006b02:	e7fe      	b.n	8006b02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d06e      	beq.n	8006be8 <pvPortMalloc+0x150>
 8006b0a:	4b45      	ldr	r3, [pc, #276]	; (8006c20 <pvPortMalloc+0x188>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d869      	bhi.n	8006be8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b14:	4b43      	ldr	r3, [pc, #268]	; (8006c24 <pvPortMalloc+0x18c>)
 8006b16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b18:	4b42      	ldr	r3, [pc, #264]	; (8006c24 <pvPortMalloc+0x18c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b1e:	e004      	b.n	8006b2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d903      	bls.n	8006b3c <pvPortMalloc+0xa4>
 8006b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1f1      	bne.n	8006b20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b3c:	4b36      	ldr	r3, [pc, #216]	; (8006c18 <pvPortMalloc+0x180>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d050      	beq.n	8006be8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b46:	6a3b      	ldr	r3, [r7, #32]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2208      	movs	r2, #8
 8006b4c:	4413      	add	r3, r2
 8006b4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	1ad2      	subs	r2, r2, r3
 8006b60:	2308      	movs	r3, #8
 8006b62:	005b      	lsls	r3, r3, #1
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d91f      	bls.n	8006ba8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	f003 0307 	and.w	r3, r3, #7
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00a      	beq.n	8006b90 <pvPortMalloc+0xf8>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	613b      	str	r3, [r7, #16]
}
 8006b8c:	bf00      	nop
 8006b8e:	e7fe      	b.n	8006b8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	1ad2      	subs	r2, r2, r3
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ba2:	69b8      	ldr	r0, [r7, #24]
 8006ba4:	f000 f908 	bl	8006db8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ba8:	4b1d      	ldr	r3, [pc, #116]	; (8006c20 <pvPortMalloc+0x188>)
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	4a1b      	ldr	r2, [pc, #108]	; (8006c20 <pvPortMalloc+0x188>)
 8006bb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006bb6:	4b1a      	ldr	r3, [pc, #104]	; (8006c20 <pvPortMalloc+0x188>)
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	4b1b      	ldr	r3, [pc, #108]	; (8006c28 <pvPortMalloc+0x190>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d203      	bcs.n	8006bca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006bc2:	4b17      	ldr	r3, [pc, #92]	; (8006c20 <pvPortMalloc+0x188>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a18      	ldr	r2, [pc, #96]	; (8006c28 <pvPortMalloc+0x190>)
 8006bc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	4b13      	ldr	r3, [pc, #76]	; (8006c1c <pvPortMalloc+0x184>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	2200      	movs	r2, #0
 8006bdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006bde:	4b13      	ldr	r3, [pc, #76]	; (8006c2c <pvPortMalloc+0x194>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3301      	adds	r3, #1
 8006be4:	4a11      	ldr	r2, [pc, #68]	; (8006c2c <pvPortMalloc+0x194>)
 8006be6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006be8:	f7fe fbfc 	bl	80053e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	f003 0307 	and.w	r3, r3, #7
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00a      	beq.n	8006c0c <pvPortMalloc+0x174>
	__asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	60fb      	str	r3, [r7, #12]
}
 8006c08:	bf00      	nop
 8006c0a:	e7fe      	b.n	8006c0a <pvPortMalloc+0x172>
	return pvReturn;
 8006c0c:	69fb      	ldr	r3, [r7, #28]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3728      	adds	r7, #40	; 0x28
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	20004ab4 	.word	0x20004ab4
 8006c1c:	20004ac8 	.word	0x20004ac8
 8006c20:	20004ab8 	.word	0x20004ab8
 8006c24:	20004aac 	.word	0x20004aac
 8006c28:	20004abc 	.word	0x20004abc
 8006c2c:	20004ac0 	.word	0x20004ac0

08006c30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d04d      	beq.n	8006cde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c42:	2308      	movs	r3, #8
 8006c44:	425b      	negs	r3, r3
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	4413      	add	r3, r2
 8006c4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	4b24      	ldr	r3, [pc, #144]	; (8006ce8 <vPortFree+0xb8>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4013      	ands	r3, r2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d10a      	bne.n	8006c74 <vPortFree+0x44>
	__asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	60fb      	str	r3, [r7, #12]
}
 8006c70:	bf00      	nop
 8006c72:	e7fe      	b.n	8006c72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d00a      	beq.n	8006c92 <vPortFree+0x62>
	__asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	60bb      	str	r3, [r7, #8]
}
 8006c8e:	bf00      	nop
 8006c90:	e7fe      	b.n	8006c90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	4b14      	ldr	r3, [pc, #80]	; (8006ce8 <vPortFree+0xb8>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d01e      	beq.n	8006cde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d11a      	bne.n	8006cde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	4b0e      	ldr	r3, [pc, #56]	; (8006ce8 <vPortFree+0xb8>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	43db      	mvns	r3, r3
 8006cb2:	401a      	ands	r2, r3
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006cb8:	f7fe fb86 	bl	80053c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	4b0a      	ldr	r3, [pc, #40]	; (8006cec <vPortFree+0xbc>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	4a09      	ldr	r2, [pc, #36]	; (8006cec <vPortFree+0xbc>)
 8006cc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006cca:	6938      	ldr	r0, [r7, #16]
 8006ccc:	f000 f874 	bl	8006db8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006cd0:	4b07      	ldr	r3, [pc, #28]	; (8006cf0 <vPortFree+0xc0>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	4a06      	ldr	r2, [pc, #24]	; (8006cf0 <vPortFree+0xc0>)
 8006cd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006cda:	f7fe fb83 	bl	80053e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006cde:	bf00      	nop
 8006ce0:	3718      	adds	r7, #24
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	20004ac8 	.word	0x20004ac8
 8006cec:	20004ab8 	.word	0x20004ab8
 8006cf0:	20004ac4 	.word	0x20004ac4

08006cf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006cfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006cfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d00:	4b27      	ldr	r3, [pc, #156]	; (8006da0 <prvHeapInit+0xac>)
 8006d02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00c      	beq.n	8006d28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	3307      	adds	r3, #7
 8006d12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f023 0307 	bic.w	r3, r3, #7
 8006d1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	4a1f      	ldr	r2, [pc, #124]	; (8006da0 <prvHeapInit+0xac>)
 8006d24:	4413      	add	r3, r2
 8006d26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d2c:	4a1d      	ldr	r2, [pc, #116]	; (8006da4 <prvHeapInit+0xb0>)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d32:	4b1c      	ldr	r3, [pc, #112]	; (8006da4 <prvHeapInit+0xb0>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d40:	2208      	movs	r2, #8
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	1a9b      	subs	r3, r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f023 0307 	bic.w	r3, r3, #7
 8006d4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	4a15      	ldr	r2, [pc, #84]	; (8006da8 <prvHeapInit+0xb4>)
 8006d54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d56:	4b14      	ldr	r3, [pc, #80]	; (8006da8 <prvHeapInit+0xb4>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d5e:	4b12      	ldr	r3, [pc, #72]	; (8006da8 <prvHeapInit+0xb4>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2200      	movs	r2, #0
 8006d64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	1ad2      	subs	r2, r2, r3
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d74:	4b0c      	ldr	r3, [pc, #48]	; (8006da8 <prvHeapInit+0xb4>)
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	4a0a      	ldr	r2, [pc, #40]	; (8006dac <prvHeapInit+0xb8>)
 8006d82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	4a09      	ldr	r2, [pc, #36]	; (8006db0 <prvHeapInit+0xbc>)
 8006d8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d8c:	4b09      	ldr	r3, [pc, #36]	; (8006db4 <prvHeapInit+0xc0>)
 8006d8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d92:	601a      	str	r2, [r3, #0]
}
 8006d94:	bf00      	nop
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	20000eac 	.word	0x20000eac
 8006da4:	20004aac 	.word	0x20004aac
 8006da8:	20004ab4 	.word	0x20004ab4
 8006dac:	20004abc 	.word	0x20004abc
 8006db0:	20004ab8 	.word	0x20004ab8
 8006db4:	20004ac8 	.word	0x20004ac8

08006db8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006dc0:	4b28      	ldr	r3, [pc, #160]	; (8006e64 <prvInsertBlockIntoFreeList+0xac>)
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	e002      	b.n	8006dcc <prvInsertBlockIntoFreeList+0x14>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	60fb      	str	r3, [r7, #12]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d8f7      	bhi.n	8006dc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	4413      	add	r3, r2
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d108      	bne.n	8006dfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	441a      	add	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	441a      	add	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d118      	bne.n	8006e40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	4b15      	ldr	r3, [pc, #84]	; (8006e68 <prvInsertBlockIntoFreeList+0xb0>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d00d      	beq.n	8006e36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	441a      	add	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	e008      	b.n	8006e48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e36:	4b0c      	ldr	r3, [pc, #48]	; (8006e68 <prvInsertBlockIntoFreeList+0xb0>)
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	601a      	str	r2, [r3, #0]
 8006e3e:	e003      	b.n	8006e48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d002      	beq.n	8006e56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e56:	bf00      	nop
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	20004aac 	.word	0x20004aac
 8006e68:	20004ab4 	.word	0x20004ab4

08006e6c <memset>:
 8006e6c:	4402      	add	r2, r0
 8006e6e:	4603      	mov	r3, r0
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d100      	bne.n	8006e76 <memset+0xa>
 8006e74:	4770      	bx	lr
 8006e76:	f803 1b01 	strb.w	r1, [r3], #1
 8006e7a:	e7f9      	b.n	8006e70 <memset+0x4>

08006e7c <__libc_init_array>:
 8006e7c:	b570      	push	{r4, r5, r6, lr}
 8006e7e:	4d0d      	ldr	r5, [pc, #52]	; (8006eb4 <__libc_init_array+0x38>)
 8006e80:	4c0d      	ldr	r4, [pc, #52]	; (8006eb8 <__libc_init_array+0x3c>)
 8006e82:	1b64      	subs	r4, r4, r5
 8006e84:	10a4      	asrs	r4, r4, #2
 8006e86:	2600      	movs	r6, #0
 8006e88:	42a6      	cmp	r6, r4
 8006e8a:	d109      	bne.n	8006ea0 <__libc_init_array+0x24>
 8006e8c:	4d0b      	ldr	r5, [pc, #44]	; (8006ebc <__libc_init_array+0x40>)
 8006e8e:	4c0c      	ldr	r4, [pc, #48]	; (8006ec0 <__libc_init_array+0x44>)
 8006e90:	f000 f826 	bl	8006ee0 <_init>
 8006e94:	1b64      	subs	r4, r4, r5
 8006e96:	10a4      	asrs	r4, r4, #2
 8006e98:	2600      	movs	r6, #0
 8006e9a:	42a6      	cmp	r6, r4
 8006e9c:	d105      	bne.n	8006eaa <__libc_init_array+0x2e>
 8006e9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ea0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ea4:	4798      	blx	r3
 8006ea6:	3601      	adds	r6, #1
 8006ea8:	e7ee      	b.n	8006e88 <__libc_init_array+0xc>
 8006eaa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eae:	4798      	blx	r3
 8006eb0:	3601      	adds	r6, #1
 8006eb2:	e7f2      	b.n	8006e9a <__libc_init_array+0x1e>
 8006eb4:	08006fb0 	.word	0x08006fb0
 8006eb8:	08006fb0 	.word	0x08006fb0
 8006ebc:	08006fb0 	.word	0x08006fb0
 8006ec0:	08006fb4 	.word	0x08006fb4

08006ec4 <memcpy>:
 8006ec4:	440a      	add	r2, r1
 8006ec6:	4291      	cmp	r1, r2
 8006ec8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ecc:	d100      	bne.n	8006ed0 <memcpy+0xc>
 8006ece:	4770      	bx	lr
 8006ed0:	b510      	push	{r4, lr}
 8006ed2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ed6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006eda:	4291      	cmp	r1, r2
 8006edc:	d1f9      	bne.n	8006ed2 <memcpy+0xe>
 8006ede:	bd10      	pop	{r4, pc}

08006ee0 <_init>:
 8006ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee2:	bf00      	nop
 8006ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ee6:	bc08      	pop	{r3}
 8006ee8:	469e      	mov	lr, r3
 8006eea:	4770      	bx	lr

08006eec <_fini>:
 8006eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eee:	bf00      	nop
 8006ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ef2:	bc08      	pop	{r3}
 8006ef4:	469e      	mov	lr, r3
 8006ef6:	4770      	bx	lr
